[0 - 7efdc8311000]    0.248133 {3}{Mapper}: Enabled Control Replication Optimizations.
[0 - 7efdc8311000]    0.248177 {3}{Mapper}: Enabled Control Replication Optimizations.
workSpaceSize (1024 MB)
OPT Config:
vocab_size: 50272
word_embed_proj_dim: 4096
hidden_size: 4096
num_attention_heads: 32
max_position_embeddings: 2048
layer_norm_elementwise_affine: true
dropout: 0.1
ffn_dim: 16384
num_hidden_layers: 32
max_beam_width: 1
batchSize: 8
sentence_len: 100
max_beam_depth: 4
------start compile ----------
num_nodes = 1 num_gpus_per_node = 1
optimal_views.size = 264
views.size() = 264
Deserialized Views...
node[5000513]: type(Dense_5000513) view(1 1 0)  inEdge(node(5000512) idx(0))
node[5000512]: type(LayerNorm_5000512) view(1 1 0)  inEdge(node(5000511) idx(0))
node[5000511]: type(Add_5000511) view(1 1 0)  inEdge(node(5000508) idx(0)) inEdge(node(5000510) idx(0))
node[5000510]: type(TreeIncMultiHeadSelfAttention_5000510) view(1 1 0)  inEdge(node(5000509) idx(0))
node[5000509]: type(LayerNorm_5000509) view(1 1 0)  inEdge(node(5000508) idx(0))
node[5000508]: type(Add_5000508) view(1 1 0)  inEdge(node(5000507) idx(0)) inEdge(node(5000503) idx(0))
node[5000507]: type(Dense_5000507) view(1 1 0)  inEdge(node(5000506) idx(0))
node[5000353]: type(Dense_5000353) view(1 1 0)  inEdge(node(5000352) idx(0))
node[5000354]: type(ReLU_5000354) view(1 1 0)  inEdge(node(5000353) idx(0))
node[5000355]: type(Dense_5000355) view(1 1 0)  inEdge(node(5000354) idx(0))
node[5000356]: type(Add_5000356) view(1 1 0)  inEdge(node(5000355) idx(0)) inEdge(node(5000351) idx(0))
node[5000357]: type(LayerNorm_5000357) view(1 1 0)  inEdge(node(5000356) idx(0))
node[5000358]: type(TreeIncMultiHeadSelfAttention_5000358) view(1 1 0)  inEdge(node(5000357) idx(0))
node[5000359]: type(Add_5000359) view(1 1 0)  inEdge(node(5000356) idx(0)) inEdge(node(5000358) idx(0))
node[5000360]: type(LayerNorm_5000360) view(1 1 0)  inEdge(node(5000359) idx(0))
node[5000361]: type(Dense_5000361) view(1 1 0)  inEdge(node(5000360) idx(0))
node[5000362]: type(ReLU_5000362) view(1 1 0)  inEdge(node(5000361) idx(0))
node[5000363]: type(Dense_5000363) view(1 1 0)  inEdge(node(5000362) idx(0))
node[5000364]: type(Add_5000364) view(1 1 0)  inEdge(node(5000363) idx(0)) inEdge(node(5000359) idx(0))
node[5000365]: type(LayerNorm_5000365) view(1 1 0)  inEdge(node(5000364) idx(0))
node[5000366]: type(TreeIncMultiHeadSelfAttention_5000366) view(1 1 0)  inEdge(node(5000365) idx(0))
node[5000367]: type(Add_5000367) view(1 1 0)  inEdge(node(5000364) idx(0)) inEdge(node(5000366) idx(0))
node[5000368]: type(LayerNorm_5000368) view(1 1 0)  inEdge(node(5000367) idx(0))
node[5000385]: type(Dense_5000385) view(1 1 0)  inEdge(node(5000384) idx(0))
node[5000386]: type(ReLU_5000386) view(1 1 0)  inEdge(node(5000385) idx(0))
node[5000344]: type(LayerNorm_5000344) view(1 1 0)  inEdge(node(5000343) idx(0))
node[5000376]: type(LayerNorm_5000376) view(1 1 0)  inEdge(node(5000375) idx(0))
node[5000345]: type(Dense_5000345) view(1 1 0)  inEdge(node(5000344) idx(0))
node[5000377]: type(Dense_5000377) view(1 1 0)  inEdge(node(5000376) idx(0))
node[5000346]: type(ReLU_5000346) view(1 1 0)  inEdge(node(5000345) idx(0))
node[5000378]: type(ReLU_5000378) view(1 1 0)  inEdge(node(5000377) idx(0))
node[5000347]: type(Dense_5000347) view(1 1 0)  inEdge(node(5000346) idx(0))
node[5000379]: type(Dense_5000379) view(1 1 0)  inEdge(node(5000378) idx(0))
node[5000348]: type(Add_5000348) view(1 1 0)  inEdge(node(5000347) idx(0)) inEdge(node(5000343) idx(0))
node[5000525]: type(LayerNorm_5000525) view(1 1 0)  inEdge(node(5000524) idx(0))
node[5000268]: type(Add_5000268) view(1 1 0)  inEdge(node(5000267) idx(0)) inEdge(node(5000266) idx(0))
node[5000271]: type(Add_5000271) view(1 1 0)  inEdge(node(5000268) idx(0)) inEdge(node(5000270) idx(0))
node[5000380]: type(Add_5000380) view(1 1 0)  inEdge(node(5000379) idx(0)) inEdge(node(5000375) idx(0))
node[5000349]: type(LayerNorm_5000349) view(1 1 0)  inEdge(node(5000348) idx(0))
node[5000526]: type(Dense_5000526) view(1 1 0)  inEdge(node(5000525) idx(0))
node[5000269]: type(LayerNorm_5000269) view(1 1 0)  inEdge(node(5000268) idx(0))
node[5000272]: type(LayerNorm_5000272) view(1 1 0)  inEdge(node(5000271) idx(0))
node[5000381]: type(LayerNorm_5000381) view(1 1 0)  inEdge(node(5000380) idx(0))
node[5000350]: type(TreeIncMultiHeadSelfAttention_5000350) view(1 1 0)  inEdge(node(5000349) idx(0))
node[5000524]: type(Add_5000524) view(1 1 0)  inEdge(node(5000523) idx(0)) inEdge(node(5000519) idx(0))
node[5000267]: type(Embedding_5000267) view(1 1 0)  inEdge(node(5000265) idx(0))
node[5000270]: type(TreeIncMultiHeadSelfAttention_5000270) view(1 1 0)  inEdge(node(5000269) idx(0))
node[5000527]: type(ArgMax_5000527) view(1 1 0)  inEdge(node(5000526) idx(0))
node[5000273]: type(Dense_5000273) view(1 1 0)  inEdge(node(5000272) idx(0))
node[5000382]: type(TreeIncMultiHeadSelfAttention_5000382) view(1 1 0)  inEdge(node(5000381) idx(0))
node[5000384]: type(LayerNorm_5000384) view(1 1 0)  inEdge(node(5000383) idx(0))
node[5000383]: type(Add_5000383) view(1 1 0)  inEdge(node(5000380) idx(0)) inEdge(node(5000382) idx(0))
node[5000375]: type(Add_5000375) view(1 1 0)  inEdge(node(5000372) idx(0)) inEdge(node(5000374) idx(0))
node[5000374]: type(TreeIncMultiHeadSelfAttention_5000374) view(1 1 0)  inEdge(node(5000373) idx(0))
node[5000373]: type(LayerNorm_5000373) view(1 1 0)  inEdge(node(5000372) idx(0))
node[5000372]: type(Add_5000372) view(1 1 0)  inEdge(node(5000371) idx(0)) inEdge(node(5000367) idx(0))
node[5000371]: type(Dense_5000371) view(1 1 0)  inEdge(node(5000370) idx(0))
node[5000370]: type(ReLU_5000370) view(1 1 0)  inEdge(node(5000369) idx(0))
node[5000369]: type(Dense_5000369) view(1 1 0)  inEdge(node(5000368) idx(0))
node[5000338]: type(ReLU_5000338) view(1 1 0)  inEdge(node(5000337) idx(0))
node[5000337]: type(Dense_5000337) view(1 1 0)  inEdge(node(5000336) idx(0))
node[5000336]: type(LayerNorm_5000336) view(1 1 0)  inEdge(node(5000335) idx(0))
node[5000335]: type(Add_5000335) view(1 1 0)  inEdge(node(5000332) idx(0)) inEdge(node(5000334) idx(0))
node[5000334]: type(TreeIncMultiHeadSelfAttention_5000334) view(1 1 0)  inEdge(node(5000333) idx(0))
node[5000333]: type(LayerNorm_5000333) view(1 1 0)  inEdge(node(5000332) idx(0))
node[5000332]: type(Add_5000332) view(1 1 0)  inEdge(node(5000331) idx(0)) inEdge(node(5000327) idx(0))
node[5000331]: type(Dense_5000331) view(1 1 0)  inEdge(node(5000330) idx(0))
node[5000330]: type(ReLU_5000330) view(1 1 0)  inEdge(node(5000329) idx(0))
node[5000329]: type(Dense_5000329) view(1 1 0)  inEdge(node(5000328) idx(0))
node[5000328]: type(LayerNorm_5000328) view(1 1 0)  inEdge(node(5000327) idx(0))
node[5000327]: type(Add_5000327) view(1 1 0)  inEdge(node(5000324) idx(0)) inEdge(node(5000326) idx(0))
node[5000294]: type(TreeIncMultiHeadSelfAttention_5000294) view(1 1 0)  inEdge(node(5000293) idx(0))
node[5000295]: type(Add_5000295) view(1 1 0)  inEdge(node(5000292) idx(0)) inEdge(node(5000294) idx(0))
node[5000296]: type(LayerNorm_5000296) view(1 1 0)  inEdge(node(5000295) idx(0))
node[5000297]: type(Dense_5000297) view(1 1 0)  inEdge(node(5000296) idx(0))
node[5000298]: type(ReLU_5000298) view(1 1 0)  inEdge(node(5000297) idx(0))
node[5000299]: type(Dense_5000299) view(1 1 0)  inEdge(node(5000298) idx(0))
node[5000300]: type(Add_5000300) view(1 1 0)  inEdge(node(5000299) idx(0)) inEdge(node(5000295) idx(0))
node[5000301]: type(LayerNorm_5000301) view(1 1 0)  inEdge(node(5000300) idx(0))
node[5000302]: type(TreeIncMultiHeadSelfAttention_5000302) view(1 1 0)  inEdge(node(5000301) idx(0))
node[5000303]: type(Add_5000303) view(1 1 0)  inEdge(node(5000300) idx(0)) inEdge(node(5000302) idx(0))
node[5000304]: type(LayerNorm_5000304) view(1 1 0)  inEdge(node(5000303) idx(0))
node[5000305]: type(Dense_5000305) view(1 1 0)  inEdge(node(5000304) idx(0))
node[5000306]: type(ReLU_5000306) view(1 1 0)  inEdge(node(5000305) idx(0))
node[5000307]: type(Dense_5000307) view(1 1 0)  inEdge(node(5000306) idx(0))
node[5000308]: type(Add_5000308) view(1 1 0)  inEdge(node(5000307) idx(0)) inEdge(node(5000303) idx(0))
node[5000309]: type(LayerNorm_5000309) view(1 1 0)  inEdge(node(5000308) idx(0))
node[5000284]: type(Add_5000284) view(1 1 0)  inEdge(node(5000283) idx(0)) inEdge(node(5000279) idx(0))
node[5000283]: type(Dense_5000283) view(1 1 0)  inEdge(node(5000282) idx(0))
node[5000310]: type(TreeIncMultiHeadSelfAttention_5000310) view(1 1 0)  inEdge(node(5000309) idx(0))
node[5000312]: type(LayerNorm_5000312) view(1 1 0)  inEdge(node(5000311) idx(0))
node[5000388]: type(Add_5000388) view(1 1 0)  inEdge(node(5000387) idx(0)) inEdge(node(5000383) idx(0))
node[5000515]: type(Dense_5000515) view(1 1 0)  inEdge(node(5000514) idx(0))
node[5000279]: type(Add_5000279) view(1 1 0)  inEdge(node(5000276) idx(0)) inEdge(node(5000278) idx(0))
node[5000311]: type(Add_5000311) view(1 1 0)  inEdge(node(5000308) idx(0)) inEdge(node(5000310) idx(0))
node[5000387]: type(Dense_5000387) view(1 1 0)  inEdge(node(5000386) idx(0))
node[5000514]: type(ReLU_5000514) view(1 1 0)  inEdge(node(5000513) idx(0))
node[5000278]: type(TreeIncMultiHeadSelfAttention_5000278) view(1 1 0)  inEdge(node(5000277) idx(0))
node[5000282]: type(ReLU_5000282) view(1 1 0)  inEdge(node(5000281) idx(0))
node[5000315]: type(Dense_5000315) view(1 1 0)  inEdge(node(5000314) idx(0))
node[5000390]: type(TreeIncMultiHeadSelfAttention_5000390) view(1 1 0)  inEdge(node(5000389) idx(0))
node[5000517]: type(LayerNorm_5000517) view(1 1 0)  inEdge(node(5000516) idx(0))
node[5000281]: type(Dense_5000281) view(1 1 0)  inEdge(node(5000280) idx(0))
node[5000314]: type(ReLU_5000314) view(1 1 0)  inEdge(node(5000313) idx(0))
node[5000389]: type(LayerNorm_5000389) view(1 1 0)  inEdge(node(5000388) idx(0))
node[5000516]: type(Add_5000516) view(1 1 0)  inEdge(node(5000515) idx(0)) inEdge(node(5000511) idx(0))
node[5000280]: type(LayerNorm_5000280) view(1 1 0)  inEdge(node(5000279) idx(0))
node[5000313]: type(Dense_5000313) view(1 1 0)  inEdge(node(5000312) idx(0))
node[5000293]: type(LayerNorm_5000293) view(1 1 0)  inEdge(node(5000292) idx(0))
node[5000276]: type(Add_5000276) view(1 1 0)  inEdge(node(5000275) idx(0)) inEdge(node(5000271) idx(0))
node[5000275]: type(Dense_5000275) view(1 1 0)  inEdge(node(5000274) idx(0))
node[5000274]: type(ReLU_5000274) view(1 1 0)  inEdge(node(5000273) idx(0))
node[5000519]: type(Add_5000519) view(1 1 0)  inEdge(node(5000516) idx(0)) inEdge(node(5000518) idx(0))
node[5000265]: type(Input_5000265) view(1 1 0) 
node[5000522]: type(ReLU_5000522) view(1 1 0)  inEdge(node(5000521) idx(0))
node[5000324]: type(Add_5000324) view(1 1 0)  inEdge(node(5000323) idx(0)) inEdge(node(5000319) idx(0))
node[5000286]: type(TreeIncMultiHeadSelfAttention_5000286) view(1 1 0)  inEdge(node(5000285) idx(0))
node[5000518]: type(TreeIncMultiHeadSelfAttention_5000518) view(1 1 0)  inEdge(node(5000517) idx(0))
node[5000264]: type(Input_5000264) view(1 1 0) 
node[5000521]: type(Dense_5000521) view(1 1 0)  inEdge(node(5000520) idx(0))
node[5000323]: type(Dense_5000323) view(1 1 0)  inEdge(node(5000322) idx(0))
node[5000285]: type(LayerNorm_5000285) view(1 1 0)  inEdge(node(5000284) idx(0))
node[5000520]: type(LayerNorm_5000520) view(1 1 0)  inEdge(node(5000519) idx(0))
node[5000266]: type(Embedding_5000266) view(1 1 0)  inEdge(node(5000264) idx(0))
node[5000523]: type(Dense_5000523) view(1 1 0)  inEdge(node(5000522) idx(0))
node[5000325]: type(LayerNorm_5000325) view(1 1 0)  inEdge(node(5000324) idx(0))
node[5000287]: type(Add_5000287) view(1 1 0)  inEdge(node(5000284) idx(0)) inEdge(node(5000286) idx(0))
node[5000277]: type(LayerNorm_5000277) view(1 1 0)  inEdge(node(5000276) idx(0))
node[5000288]: type(LayerNorm_5000288) view(1 1 0)  inEdge(node(5000287) idx(0))
node[5000289]: type(Dense_5000289) view(1 1 0)  inEdge(node(5000288) idx(0))
node[5000290]: type(ReLU_5000290) view(1 1 0)  inEdge(node(5000289) idx(0))
node[5000291]: type(Dense_5000291) view(1 1 0)  inEdge(node(5000290) idx(0))
node[5000292]: type(Add_5000292) view(1 1 0)  inEdge(node(5000291) idx(0)) inEdge(node(5000287) idx(0))
node[5000326]: type(TreeIncMultiHeadSelfAttention_5000326) view(1 1 0)  inEdge(node(5000325) idx(0))
node[5000352]: type(LayerNorm_5000352) view(1 1 0)  inEdge(node(5000351) idx(0))
node[5000351]: type(Add_5000351) view(1 1 0)  inEdge(node(5000348) idx(0)) inEdge(node(5000350) idx(0))
node[5000343]: type(Add_5000343) view(1 1 0)  inEdge(node(5000340) idx(0)) inEdge(node(5000342) idx(0))
node[5000342]: type(TreeIncMultiHeadSelfAttention_5000342) view(1 1 0)  inEdge(node(5000341) idx(0))
node[5000341]: type(LayerNorm_5000341) view(1 1 0)  inEdge(node(5000340) idx(0))
node[5000340]: type(Add_5000340) view(1 1 0)  inEdge(node(5000339) idx(0)) inEdge(node(5000335) idx(0))
node[5000339]: type(Dense_5000339) view(1 1 0)  inEdge(node(5000338) idx(0))
node[5000316]: type(Add_5000316) view(1 1 0)  inEdge(node(5000315) idx(0)) inEdge(node(5000311) idx(0))
node[5000317]: type(LayerNorm_5000317) view(1 1 0)  inEdge(node(5000316) idx(0))
node[5000318]: type(TreeIncMultiHeadSelfAttention_5000318) view(1 1 0)  inEdge(node(5000317) idx(0))
node[5000319]: type(Add_5000319) view(1 1 0)  inEdge(node(5000316) idx(0)) inEdge(node(5000318) idx(0))
node[5000320]: type(LayerNorm_5000320) view(1 1 0)  inEdge(node(5000319) idx(0))
node[5000321]: type(Dense_5000321) view(1 1 0)  inEdge(node(5000320) idx(0))
node[5000322]: type(ReLU_5000322) view(1 1 0)  inEdge(node(5000321) idx(0))
node[5000391]: type(Add_5000391) view(1 1 0)  inEdge(node(5000388) idx(0)) inEdge(node(5000390) idx(0))
node[5000392]: type(LayerNorm_5000392) view(1 1 0)  inEdge(node(5000391) idx(0))
node[5000393]: type(Dense_5000393) view(1 1 0)  inEdge(node(5000392) idx(0))
node[5000394]: type(ReLU_5000394) view(1 1 0)  inEdge(node(5000393) idx(0))
node[5000395]: type(Dense_5000395) view(1 1 0)  inEdge(node(5000394) idx(0))
node[5000396]: type(Add_5000396) view(1 1 0)  inEdge(node(5000395) idx(0)) inEdge(node(5000391) idx(0))
node[5000397]: type(LayerNorm_5000397) view(1 1 0)  inEdge(node(5000396) idx(0))
node[5000398]: type(TreeIncMultiHeadSelfAttention_5000398) view(1 1 0)  inEdge(node(5000397) idx(0))
node[5000399]: type(Add_5000399) view(1 1 0)  inEdge(node(5000396) idx(0)) inEdge(node(5000398) idx(0))
node[5000400]: type(LayerNorm_5000400) view(1 1 0)  inEdge(node(5000399) idx(0))
node[5000401]: type(Dense_5000401) view(1 1 0)  inEdge(node(5000400) idx(0))
node[5000402]: type(ReLU_5000402) view(1 1 0)  inEdge(node(5000401) idx(0))
node[5000403]: type(Dense_5000403) view(1 1 0)  inEdge(node(5000402) idx(0))
node[5000404]: type(Add_5000404) view(1 1 0)  inEdge(node(5000403) idx(0)) inEdge(node(5000399) idx(0))
node[5000405]: type(LayerNorm_5000405) view(1 1 0)  inEdge(node(5000404) idx(0))
node[5000406]: type(TreeIncMultiHeadSelfAttention_5000406) view(1 1 0)  inEdge(node(5000405) idx(0))
node[5000407]: type(Add_5000407) view(1 1 0)  inEdge(node(5000404) idx(0)) inEdge(node(5000406) idx(0))
node[5000408]: type(LayerNorm_5000408) view(1 1 0)  inEdge(node(5000407) idx(0))
node[5000409]: type(Dense_5000409) view(1 1 0)  inEdge(node(5000408) idx(0))
node[5000410]: type(ReLU_5000410) view(1 1 0)  inEdge(node(5000409) idx(0))
node[5000411]: type(Dense_5000411) view(1 1 0)  inEdge(node(5000410) idx(0))
node[5000412]: type(Add_5000412) view(1 1 0)  inEdge(node(5000411) idx(0)) inEdge(node(5000407) idx(0))
node[5000413]: type(LayerNorm_5000413) view(1 1 0)  inEdge(node(5000412) idx(0))
node[5000414]: type(TreeIncMultiHeadSelfAttention_5000414) view(1 1 0)  inEdge(node(5000413) idx(0))
node[5000415]: type(Add_5000415) view(1 1 0)  inEdge(node(5000412) idx(0)) inEdge(node(5000414) idx(0))
node[5000416]: type(LayerNorm_5000416) view(1 1 0)  inEdge(node(5000415) idx(0))
node[5000417]: type(Dense_5000417) view(1 1 0)  inEdge(node(5000416) idx(0))
node[5000418]: type(ReLU_5000418) view(1 1 0)  inEdge(node(5000417) idx(0))
node[5000419]: type(Dense_5000419) view(1 1 0)  inEdge(node(5000418) idx(0))
node[5000420]: type(Add_5000420) view(1 1 0)  inEdge(node(5000419) idx(0)) inEdge(node(5000415) idx(0))
node[5000421]: type(LayerNorm_5000421) view(1 1 0)  inEdge(node(5000420) idx(0))
node[5000422]: type(TreeIncMultiHeadSelfAttention_5000422) view(1 1 0)  inEdge(node(5000421) idx(0))
node[5000423]: type(Add_5000423) view(1 1 0)  inEdge(node(5000420) idx(0)) inEdge(node(5000422) idx(0))
node[5000424]: type(LayerNorm_5000424) view(1 1 0)  inEdge(node(5000423) idx(0))
node[5000425]: type(Dense_5000425) view(1 1 0)  inEdge(node(5000424) idx(0))
node[5000426]: type(ReLU_5000426) view(1 1 0)  inEdge(node(5000425) idx(0))
node[5000427]: type(Dense_5000427) view(1 1 0)  inEdge(node(5000426) idx(0))
node[5000428]: type(Add_5000428) view(1 1 0)  inEdge(node(5000427) idx(0)) inEdge(node(5000423) idx(0))
node[5000429]: type(LayerNorm_5000429) view(1 1 0)  inEdge(node(5000428) idx(0))
node[5000430]: type(TreeIncMultiHeadSelfAttention_5000430) view(1 1 0)  inEdge(node(5000429) idx(0))
node[5000431]: type(Add_5000431) view(1 1 0)  inEdge(node(5000428) idx(0)) inEdge(node(5000430) idx(0))
node[5000432]: type(LayerNorm_5000432) view(1 1 0)  inEdge(node(5000431) idx(0))
node[5000433]: type(Dense_5000433) view(1 1 0)  inEdge(node(5000432) idx(0))
node[5000434]: type(ReLU_5000434) view(1 1 0)  inEdge(node(5000433) idx(0))
node[5000435]: type(Dense_5000435) view(1 1 0)  inEdge(node(5000434) idx(0))
node[5000436]: type(Add_5000436) view(1 1 0)  inEdge(node(5000435) idx(0)) inEdge(node(5000431) idx(0))
node[5000437]: type(LayerNorm_5000437) view(1 1 0)  inEdge(node(5000436) idx(0))
node[5000438]: type(TreeIncMultiHeadSelfAttention_5000438) view(1 1 0)  inEdge(node(5000437) idx(0))
node[5000439]: type(Add_5000439) view(1 1 0)  inEdge(node(5000436) idx(0)) inEdge(node(5000438) idx(0))
node[5000440]: type(LayerNorm_5000440) view(1 1 0)  inEdge(node(5000439) idx(0))
node[5000441]: type(Dense_5000441) view(1 1 0)  inEdge(node(5000440) idx(0))
node[5000442]: type(ReLU_5000442) view(1 1 0)  inEdge(node(5000441) idx(0))
node[5000443]: type(Dense_5000443) view(1 1 0)  inEdge(node(5000442) idx(0))
node[5000444]: type(Add_5000444) view(1 1 0)  inEdge(node(5000443) idx(0)) inEdge(node(5000439) idx(0))
node[5000445]: type(LayerNorm_5000445) view(1 1 0)  inEdge(node(5000444) idx(0))
node[5000446]: type(TreeIncMultiHeadSelfAttention_5000446) view(1 1 0)  inEdge(node(5000445) idx(0))
node[5000447]: type(Add_5000447) view(1 1 0)  inEdge(node(5000444) idx(0)) inEdge(node(5000446) idx(0))
node[5000448]: type(LayerNorm_5000448) view(1 1 0)  inEdge(node(5000447) idx(0))
node[5000449]: type(Dense_5000449) view(1 1 0)  inEdge(node(5000448) idx(0))
node[5000450]: type(ReLU_5000450) view(1 1 0)  inEdge(node(5000449) idx(0))
node[5000451]: type(Dense_5000451) view(1 1 0)  inEdge(node(5000450) idx(0))
node[5000452]: type(Add_5000452) view(1 1 0)  inEdge(node(5000451) idx(0)) inEdge(node(5000447) idx(0))
node[5000453]: type(LayerNorm_5000453) view(1 1 0)  inEdge(node(5000452) idx(0))
node[5000454]: type(TreeIncMultiHeadSelfAttention_5000454) view(1 1 0)  inEdge(node(5000453) idx(0))
node[5000455]: type(Add_5000455) view(1 1 0)  inEdge(node(5000452) idx(0)) inEdge(node(5000454) idx(0))
node[5000456]: type(LayerNorm_5000456) view(1 1 0)  inEdge(node(5000455) idx(0))
node[5000457]: type(Dense_5000457) view(1 1 0)  inEdge(node(5000456) idx(0))
node[5000458]: type(ReLU_5000458) view(1 1 0)  inEdge(node(5000457) idx(0))
node[5000459]: type(Dense_5000459) view(1 1 0)  inEdge(node(5000458) idx(0))
node[5000460]: type(Add_5000460) view(1 1 0)  inEdge(node(5000459) idx(0)) inEdge(node(5000455) idx(0))
node[5000461]: type(LayerNorm_5000461) view(1 1 0)  inEdge(node(5000460) idx(0))
node[5000462]: type(TreeIncMultiHeadSelfAttention_5000462) view(1 1 0)  inEdge(node(5000461) idx(0))
node[5000463]: type(Add_5000463) view(1 1 0)  inEdge(node(5000460) idx(0)) inEdge(node(5000462) idx(0))
node[5000464]: type(LayerNorm_5000464) view(1 1 0)  inEdge(node(5000463) idx(0))
node[5000465]: type(Dense_5000465) view(1 1 0)  inEdge(node(5000464) idx(0))
node[5000466]: type(ReLU_5000466) view(1 1 0)  inEdge(node(5000465) idx(0))
node[5000467]: type(Dense_5000467) view(1 1 0)  inEdge(node(5000466) idx(0))
node[5000468]: type(Add_5000468) view(1 1 0)  inEdge(node(5000467) idx(0)) inEdge(node(5000463) idx(0))
node[5000469]: type(LayerNorm_5000469) view(1 1 0)  inEdge(node(5000468) idx(0))
node[5000470]: type(TreeIncMultiHeadSelfAttention_5000470) view(1 1 0)  inEdge(node(5000469) idx(0))
node[5000471]: type(Add_5000471) view(1 1 0)  inEdge(node(5000468) idx(0)) inEdge(node(5000470) idx(0))
node[5000472]: type(LayerNorm_5000472) view(1 1 0)  inEdge(node(5000471) idx(0))
node[5000473]: type(Dense_5000473) view(1 1 0)  inEdge(node(5000472) idx(0))
node[5000474]: type(ReLU_5000474) view(1 1 0)  inEdge(node(5000473) idx(0))
node[5000475]: type(Dense_5000475) view(1 1 0)  inEdge(node(5000474) idx(0))
node[5000476]: type(Add_5000476) view(1 1 0)  inEdge(node(5000475) idx(0)) inEdge(node(5000471) idx(0))
node[5000477]: type(LayerNorm_5000477) view(1 1 0)  inEdge(node(5000476) idx(0))
node[5000478]: type(TreeIncMultiHeadSelfAttention_5000478) view(1 1 0)  inEdge(node(5000477) idx(0))
node[5000479]: type(Add_5000479) view(1 1 0)  inEdge(node(5000476) idx(0)) inEdge(node(5000478) idx(0))
node[5000480]: type(LayerNorm_5000480) view(1 1 0)  inEdge(node(5000479) idx(0))
node[5000481]: type(Dense_5000481) view(1 1 0)  inEdge(node(5000480) idx(0))
node[5000482]: type(ReLU_5000482) view(1 1 0)  inEdge(node(5000481) idx(0))
node[5000483]: type(Dense_5000483) view(1 1 0)  inEdge(node(5000482) idx(0))
node[5000484]: type(Add_5000484) view(1 1 0)  inEdge(node(5000483) idx(0)) inEdge(node(5000479) idx(0))
node[5000485]: type(LayerNorm_5000485) view(1 1 0)  inEdge(node(5000484) idx(0))
node[5000486]: type(TreeIncMultiHeadSelfAttention_5000486) view(1 1 0)  inEdge(node(5000485) idx(0))
node[5000487]: type(Add_5000487) view(1 1 0)  inEdge(node(5000484) idx(0)) inEdge(node(5000486) idx(0))
node[5000488]: type(LayerNorm_5000488) view(1 1 0)  inEdge(node(5000487) idx(0))
node[5000489]: type(Dense_5000489) view(1 1 0)  inEdge(node(5000488) idx(0))
node[5000490]: type(ReLU_5000490) view(1 1 0)  inEdge(node(5000489) idx(0))
node[5000491]: type(Dense_5000491) view(1 1 0)  inEdge(node(5000490) idx(0))
node[5000492]: type(Add_5000492) view(1 1 0)  inEdge(node(5000491) idx(0)) inEdge(node(5000487) idx(0))
node[5000493]: type(LayerNorm_5000493) view(1 1 0)  inEdge(node(5000492) idx(0))
node[5000494]: type(TreeIncMultiHeadSelfAttention_5000494) view(1 1 0)  inEdge(node(5000493) idx(0))
node[5000495]: type(Add_5000495) view(1 1 0)  inEdge(node(5000492) idx(0)) inEdge(node(5000494) idx(0))
node[5000496]: type(LayerNorm_5000496) view(1 1 0)  inEdge(node(5000495) idx(0))
node[5000497]: type(Dense_5000497) view(1 1 0)  inEdge(node(5000496) idx(0))
node[5000498]: type(ReLU_5000498) view(1 1 0)  inEdge(node(5000497) idx(0))
node[5000499]: type(Dense_5000499) view(1 1 0)  inEdge(node(5000498) idx(0))
node[5000500]: type(Add_5000500) view(1 1 0)  inEdge(node(5000499) idx(0)) inEdge(node(5000495) idx(0))
node[5000501]: type(LayerNorm_5000501) view(1 1 0)  inEdge(node(5000500) idx(0))
node[5000502]: type(TreeIncMultiHeadSelfAttention_5000502) view(1 1 0)  inEdge(node(5000501) idx(0))
node[5000503]: type(Add_5000503) view(1 1 0)  inEdge(node(5000500) idx(0)) inEdge(node(5000502) idx(0))
node[5000504]: type(LayerNorm_5000504) view(1 1 0)  inEdge(node(5000503) idx(0))
node[5000505]: type(Dense_5000505) view(1 1 0)  inEdge(node(5000504) idx(0))
node[5000506]: type(ReLU_5000506) view(1 1 0)  inEdge(node(5000505) idx(0))
digraph taskgraph {
  node0 [label="{ LayerNorm_5000520 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node1 -> node0;
  node1 [label="{ Add_5000519 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node2 -> node1;
  node3 -> node1;
  node2 [label="{ TreeIncMultiHeadSelfAttention_5000518 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node4 -> node2;
  node4 [label="{ LayerNorm_5000517 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node3 -> node4;
  node3 [label="{ Add_5000516 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node5 -> node3;
  node6 -> node3;
  node6 [label="{ Dense_5000515 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node7 -> node6;
  node7 [label="{ ReLU_5000514 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node8 -> node7;
  node9 [label="{ Dense_5000315 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node10 -> node9;
  node10 [label="{ ReLU_5000314 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node11 -> node10;
  node11 [label="{ Dense_5000313 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node12 -> node11;
  node12 [label="{ LayerNorm_5000312 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node13 -> node12;
  node13 [label="{ Add_5000311 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node14 -> node13;
  node15 -> node13;
  node14 [label="{ TreeIncMultiHeadSelfAttention_5000310 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node16 -> node14;
  node16 [label="{ LayerNorm_5000309 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node15 -> node16;
  node15 [label="{ Add_5000308 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node17 -> node15;
  node18 -> node15;
  node18 [label="{ Dense_5000307 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node19 -> node18;
  node19 [label="{ ReLU_5000306 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node20 -> node19;
  node20 [label="{ Dense_5000305 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node21 -> node20;
  node21 [label="{ LayerNorm_5000304 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node17 -> node21;
  node17 [label="{ Add_5000303 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node22 -> node17;
  node23 -> node17;
  node22 [label="{ TreeIncMultiHeadSelfAttention_5000302 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node24 -> node22;
  node24 [label="{ LayerNorm_5000301 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node23 -> node24;
  node23 [label="{ Add_5000300 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node25 -> node23;
  node26 -> node23;
  node26 [label="{ Dense_5000299 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node27 -> node26;
  node27 [label="{ ReLU_5000298 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node28 -> node27;
  node28 [label="{ Dense_5000297 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node29 -> node28;
  node29 [label="{ LayerNorm_5000296 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node25 -> node29;
  node25 [label="{ Add_5000295 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node30 -> node25;
  node31 -> node25;
  node30 [label="{ TreeIncMultiHeadSelfAttention_5000294 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node32 -> node30;
  node32 [label="{ LayerNorm_5000293 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node31 -> node32;
  node33 [label="{ Add_5000276 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node34 -> node33;
  node35 -> node33;
  node35 [label="{ Dense_5000275 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node36 -> node35;
  node36 [label="{ ReLU_5000274 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node37 -> node36;
  node38 [label="{ Input_5000265 | { shape([ 1/1 64/1 1/1 ]) } }",shape=record];
  node39 [label="{ ReLU_5000522 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node40 -> node39;
  node41 [label="{ Embedding_5000266 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node42 -> node41;
  node43 [label="{ Dense_5000523 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node39 -> node43;
  node42 [label="{ Input_5000264 | { shape([ 1/1 64/1 1/1 ]) } }",shape=record];
  node40 [label="{ Dense_5000521 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node0 -> node40;
  node44 [label="{ LayerNorm_5000277 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node33 -> node44;
  node45 [label="{ TreeIncMultiHeadSelfAttention_5000278 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node44 -> node45;
  node46 [label="{ Add_5000279 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node45 -> node46;
  node33 -> node46;
  node47 [label="{ LayerNorm_5000280 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node46 -> node47;
  node48 [label="{ Dense_5000281 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node47 -> node48;
  node49 [label="{ ReLU_5000282 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node48 -> node49;
  node50 [label="{ Dense_5000283 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node49 -> node50;
  node51 [label="{ Add_5000284 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node46 -> node51;
  node50 -> node51;
  node52 [label="{ LayerNorm_5000285 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node51 -> node52;
  node53 [label="{ TreeIncMultiHeadSelfAttention_5000286 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node52 -> node53;
  node54 [label="{ Add_5000287 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node53 -> node54;
  node51 -> node54;
  node55 [label="{ LayerNorm_5000288 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node54 -> node55;
  node56 [label="{ Dense_5000289 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node55 -> node56;
  node57 [label="{ ReLU_5000290 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node56 -> node57;
  node58 [label="{ Dense_5000291 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node57 -> node58;
  node31 [label="{ Add_5000292 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node54 -> node31;
  node58 -> node31;
  node59 [label="{ Dense_5000323 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node60 -> node59;
  node61 [label="{ Add_5000324 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node62 -> node61;
  node59 -> node61;
  node63 [label="{ LayerNorm_5000325 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node61 -> node63;
  node64 [label="{ TreeIncMultiHeadSelfAttention_5000326 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node63 -> node64;
  node65 [label="{ Add_5000327 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node64 -> node65;
  node61 -> node65;
  node66 [label="{ LayerNorm_5000328 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node65 -> node66;
  node67 [label="{ Dense_5000329 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node66 -> node67;
  node68 [label="{ ReLU_5000330 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node67 -> node68;
  node69 [label="{ Dense_5000331 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node68 -> node69;
  node70 [label="{ Add_5000332 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node65 -> node70;
  node69 -> node70;
  node71 [label="{ LayerNorm_5000333 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node70 -> node71;
  node72 [label="{ TreeIncMultiHeadSelfAttention_5000334 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node71 -> node72;
  node73 [label="{ Add_5000335 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node72 -> node73;
  node70 -> node73;
  node74 [label="{ LayerNorm_5000336 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node73 -> node74;
  node75 [label="{ Dense_5000337 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node74 -> node75;
  node76 [label="{ ReLU_5000338 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node75 -> node76;
  node77 [label="{ Dense_5000369 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node78 -> node77;
  node79 [label="{ ReLU_5000370 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node77 -> node79;
  node80 [label="{ Dense_5000371 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node79 -> node80;
  node81 [label="{ Add_5000372 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node82 -> node81;
  node80 -> node81;
  node83 [label="{ LayerNorm_5000373 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node81 -> node83;
  node84 [label="{ TreeIncMultiHeadSelfAttention_5000374 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node83 -> node84;
  node85 [label="{ Add_5000375 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node84 -> node85;
  node81 -> node85;
  node86 [label="{ Add_5000383 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node87 -> node86;
  node88 -> node86;
  node89 [label="{ LayerNorm_5000384 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node86 -> node89;
  node87 [label="{ TreeIncMultiHeadSelfAttention_5000382 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node90 -> node87;
  node37 [label="{ Dense_5000273 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node91 -> node37;
  node92 [label="{ ArgMax_5000527 | { 1/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node93 -> node92;
  node94 [label="{ TreeIncMultiHeadSelfAttention_5000270 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node95 -> node94;
  node96 [label="{ TreeIncMultiHeadSelfAttention_5000350 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node97 -> node96;
  node90 [label="{ LayerNorm_5000381 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node88 -> node90;
  node91 [label="{ LayerNorm_5000272 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node34 -> node91;
  node93 [label="{ Dense_5000526 | { 50272/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node98 -> node93;
  node95 [label="{ LayerNorm_5000269 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node99 -> node95;
  node97 [label="{ LayerNorm_5000349 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node100 -> node97;
  node88 [label="{ Add_5000380 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node85 -> node88;
  node101 -> node88;
  node34 [label="{ Add_5000271 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node94 -> node34;
  node99 -> node34;
  node98 [label="{ LayerNorm_5000525 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node102 -> node98;
  node99 [label="{ Add_5000268 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node41 -> node99;
  node103 -> node99;
  node100 [label="{ Add_5000348 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node104 -> node100;
  node105 -> node100;
  node101 [label="{ Dense_5000379 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node106 -> node101;
  node102 [label="{ Add_5000524 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node1 -> node102;
  node43 -> node102;
  node103 [label="{ Embedding_5000267 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node38 -> node103;
  node105 [label="{ Dense_5000347 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node107 -> node105;
  node106 [label="{ ReLU_5000378 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node108 -> node106;
  node107 [label="{ ReLU_5000346 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node109 -> node107;
  node108 [label="{ Dense_5000377 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node110 -> node108;
  node109 [label="{ Dense_5000345 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node111 -> node109;
  node110 [label="{ LayerNorm_5000376 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node85 -> node110;
  node111 [label="{ LayerNorm_5000344 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node104 -> node111;
  node112 [label="{ TreeIncMultiHeadSelfAttention_5000390 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node113 -> node112;
  node113 [label="{ LayerNorm_5000389 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node114 -> node113;
  node114 [label="{ Add_5000388 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node86 -> node114;
  node115 -> node114;
  node115 [label="{ Dense_5000387 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node116 -> node115;
  node116 [label="{ ReLU_5000386 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node117 -> node116;
  node117 [label="{ Dense_5000385 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node89 -> node117;
  node78 [label="{ LayerNorm_5000368 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node82 -> node78;
  node82 [label="{ Add_5000367 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node118 -> node82;
  node119 -> node82;
  node118 [label="{ TreeIncMultiHeadSelfAttention_5000366 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node120 -> node118;
  node120 [label="{ LayerNorm_5000365 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node119 -> node120;
  node119 [label="{ Add_5000364 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node121 -> node119;
  node122 -> node119;
  node122 [label="{ Dense_5000363 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node123 -> node122;
  node123 [label="{ ReLU_5000362 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node124 -> node123;
  node124 [label="{ Dense_5000361 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node125 -> node124;
  node125 [label="{ LayerNorm_5000360 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node121 -> node125;
  node121 [label="{ Add_5000359 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node126 -> node121;
  node127 -> node121;
  node126 [label="{ TreeIncMultiHeadSelfAttention_5000358 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node128 -> node126;
  node128 [label="{ LayerNorm_5000357 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node127 -> node128;
  node127 [label="{ Add_5000356 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node129 -> node127;
  node130 -> node127;
  node130 [label="{ Dense_5000355 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node131 -> node130;
  node131 [label="{ ReLU_5000354 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node132 -> node131;
  node132 [label="{ Dense_5000353 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node133 -> node132;
  node133 [label="{ LayerNorm_5000352 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node129 -> node133;
  node129 [label="{ Add_5000351 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node96 -> node129;
  node100 -> node129;
  node104 [label="{ Add_5000343 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node134 -> node104;
  node135 -> node104;
  node134 [label="{ TreeIncMultiHeadSelfAttention_5000342 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node136 -> node134;
  node136 [label="{ LayerNorm_5000341 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node135 -> node136;
  node135 [label="{ Add_5000340 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node73 -> node135;
  node137 -> node135;
  node137 [label="{ Dense_5000339 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node76 -> node137;
  node138 [label="{ Add_5000316 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node13 -> node138;
  node9 -> node138;
  node139 [label="{ LayerNorm_5000317 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node138 -> node139;
  node140 [label="{ TreeIncMultiHeadSelfAttention_5000318 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node139 -> node140;
  node62 [label="{ Add_5000319 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node140 -> node62;
  node138 -> node62;
  node141 [label="{ LayerNorm_5000320 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node62 -> node141;
  node142 [label="{ Dense_5000321 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node141 -> node142;
  node60 [label="{ ReLU_5000322 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node142 -> node60;
  node143 [label="{ Add_5000391 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node112 -> node143;
  node114 -> node143;
  node144 [label="{ LayerNorm_5000392 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node143 -> node144;
  node145 [label="{ Dense_5000393 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node144 -> node145;
  node146 [label="{ ReLU_5000394 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node145 -> node146;
  node147 [label="{ Dense_5000395 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node146 -> node147;
  node148 [label="{ Add_5000396 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node143 -> node148;
  node147 -> node148;
  node149 [label="{ LayerNorm_5000397 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node148 -> node149;
  node150 [label="{ TreeIncMultiHeadSelfAttention_5000398 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node149 -> node150;
  node151 [label="{ Add_5000399 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node150 -> node151;
  node148 -> node151;
  node152 [label="{ LayerNorm_5000400 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node151 -> node152;
  node153 [label="{ Dense_5000401 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node152 -> node153;
  node154 [label="{ ReLU_5000402 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node153 -> node154;
  node155 [label="{ Dense_5000403 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node154 -> node155;
  node156 [label="{ Add_5000404 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node151 -> node156;
  node155 -> node156;
  node157 [label="{ LayerNorm_5000405 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node156 -> node157;
  node158 [label="{ TreeIncMultiHeadSelfAttention_5000406 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node157 -> node158;
  node159 [label="{ Add_5000407 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node158 -> node159;
  node156 -> node159;
  node160 [label="{ LayerNorm_5000408 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node159 -> node160;
  node161 [label="{ Dense_5000409 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node160 -> node161;
  node162 [label="{ ReLU_5000410 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node161 -> node162;
  node163 [label="{ Dense_5000411 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node162 -> node163;
  node164 [label="{ Add_5000412 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node159 -> node164;
  node163 -> node164;
  node165 [label="{ LayerNorm_5000413 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node164 -> node165;
  node166 [label="{ TreeIncMultiHeadSelfAttention_5000414 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node165 -> node166;
  node167 [label="{ Add_5000415 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node166 -> node167;
  node164 -> node167;
  node168 [label="{ LayerNorm_5000416 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node167 -> node168;
  node169 [label="{ Dense_5000417 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node168 -> node169;
  node170 [label="{ ReLU_5000418 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node169 -> node170;
  node171 [label="{ Dense_5000419 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node170 -> node171;
  node172 [label="{ Add_5000420 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node167 -> node172;
  node171 -> node172;
  node173 [label="{ LayerNorm_5000421 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node172 -> node173;
  node174 [label="{ TreeIncMultiHeadSelfAttention_5000422 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node173 -> node174;
  node175 [label="{ Add_5000423 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node174 -> node175;
  node172 -> node175;
  node176 [label="{ LayerNorm_5000424 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node175 -> node176;
  node177 [label="{ Dense_5000425 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node176 -> node177;
  node178 [label="{ ReLU_5000426 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node177 -> node178;
  node179 [label="{ Dense_5000427 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node178 -> node179;
  node180 [label="{ Add_5000428 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node175 -> node180;
  node179 -> node180;
  node181 [label="{ LayerNorm_5000429 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node180 -> node181;
  node182 [label="{ TreeIncMultiHeadSelfAttention_5000430 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node181 -> node182;
  node183 [label="{ Add_5000431 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node182 -> node183;
  node180 -> node183;
  node184 [label="{ LayerNorm_5000432 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node183 -> node184;
  node185 [label="{ Dense_5000433 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node184 -> node185;
  node186 [label="{ ReLU_5000434 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node185 -> node186;
  node187 [label="{ Dense_5000435 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node186 -> node187;
  node188 [label="{ Add_5000436 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node183 -> node188;
  node187 -> node188;
  node189 [label="{ LayerNorm_5000437 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node188 -> node189;
  node190 [label="{ TreeIncMultiHeadSelfAttention_5000438 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node189 -> node190;
  node191 [label="{ Add_5000439 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node190 -> node191;
  node188 -> node191;
  node192 [label="{ LayerNorm_5000440 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node191 -> node192;
  node193 [label="{ Dense_5000441 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node192 -> node193;
  node194 [label="{ ReLU_5000442 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node193 -> node194;
  node195 [label="{ Dense_5000443 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node194 -> node195;
  node196 [label="{ Add_5000444 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node191 -> node196;
  node195 -> node196;
  node197 [label="{ LayerNorm_5000445 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node196 -> node197;
  node198 [label="{ TreeIncMultiHeadSelfAttention_5000446 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node197 -> node198;
  node199 [label="{ Add_5000447 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node198 -> node199;
  node196 -> node199;
  node200 [label="{ LayerNorm_5000448 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node199 -> node200;
  node201 [label="{ Dense_5000449 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node200 -> node201;
  node202 [label="{ ReLU_5000450 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node201 -> node202;
  node203 [label="{ Dense_5000451 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node202 -> node203;
  node204 [label="{ Add_5000452 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node199 -> node204;
  node203 -> node204;
  node205 [label="{ LayerNorm_5000453 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node204 -> node205;
  node206 [label="{ TreeIncMultiHeadSelfAttention_5000454 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node205 -> node206;
  node207 [label="{ Add_5000455 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node206 -> node207;
  node204 -> node207;
  node208 [label="{ LayerNorm_5000456 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node207 -> node208;
  node209 [label="{ Dense_5000457 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node208 -> node209;
  node210 [label="{ ReLU_5000458 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node209 -> node210;
  node211 [label="{ Dense_5000459 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node210 -> node211;
  node212 [label="{ Add_5000460 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node207 -> node212;
  node211 -> node212;
  node213 [label="{ LayerNorm_5000461 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node212 -> node213;
  node214 [label="{ TreeIncMultiHeadSelfAttention_5000462 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node213 -> node214;
  node215 [label="{ Add_5000463 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node214 -> node215;
  node212 -> node215;
  node216 [label="{ LayerNorm_5000464 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node215 -> node216;
  node217 [label="{ Dense_5000465 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node216 -> node217;
  node218 [label="{ ReLU_5000466 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node217 -> node218;
  node219 [label="{ Dense_5000467 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node218 -> node219;
  node220 [label="{ Add_5000468 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node215 -> node220;
  node219 -> node220;
  node221 [label="{ LayerNorm_5000469 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node220 -> node221;
  node222 [label="{ TreeIncMultiHeadSelfAttention_5000470 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node221 -> node222;
  node223 [label="{ Add_5000471 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node222 -> node223;
  node220 -> node223;
  node224 [label="{ LayerNorm_5000472 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node223 -> node224;
  node225 [label="{ Dense_5000473 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node224 -> node225;
  node226 [label="{ ReLU_5000474 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node225 -> node226;
  node227 [label="{ Dense_5000475 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node226 -> node227;
  node228 [label="{ Add_5000476 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node223 -> node228;
  node227 -> node228;
  node229 [label="{ LayerNorm_5000477 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node228 -> node229;
  node230 [label="{ TreeIncMultiHeadSelfAttention_5000478 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node229 -> node230;
  node231 [label="{ Add_5000479 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node230 -> node231;
  node228 -> node231;
  node232 [label="{ LayerNorm_5000480 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node231 -> node232;
  node233 [label="{ Dense_5000481 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node232 -> node233;
  node234 [label="{ ReLU_5000482 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node233 -> node234;
  node235 [label="{ Dense_5000483 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node234 -> node235;
  node236 [label="{ Add_5000484 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node231 -> node236;
  node235 -> node236;
  node237 [label="{ LayerNorm_5000485 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node236 -> node237;
  node238 [label="{ TreeIncMultiHeadSelfAttention_5000486 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node237 -> node238;
  node239 [label="{ Add_5000487 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node238 -> node239;
  node236 -> node239;
  node240 [label="{ LayerNorm_5000488 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node239 -> node240;
  node241 [label="{ Dense_5000489 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node240 -> node241;
  node242 [label="{ ReLU_5000490 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node241 -> node242;
  node243 [label="{ Dense_5000491 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node242 -> node243;
  node244 [label="{ Add_5000492 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node239 -> node244;
  node243 -> node244;
  node245 [label="{ LayerNorm_5000493 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node244 -> node245;
  node246 [label="{ TreeIncMultiHeadSelfAttention_5000494 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node245 -> node246;
  node247 [label="{ Add_5000495 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node246 -> node247;
  node244 -> node247;
  node248 [label="{ LayerNorm_5000496 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node247 -> node248;
  node249 [label="{ Dense_5000497 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node248 -> node249;
  node250 [label="{ ReLU_5000498 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node249 -> node250;
  node251 [label="{ Dense_5000499 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node250 -> node251;
  node252 [label="{ Add_5000500 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node247 -> node252;
  node251 -> node252;
  node253 [label="{ LayerNorm_5000501 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node252 -> node253;
  node254 [label="{ TreeIncMultiHeadSelfAttention_5000502 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node253 -> node254;
  node255 [label="{ Add_5000503 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node254 -> node255;
  node252 -> node255;
  node256 [label="{ LayerNorm_5000504 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node255 -> node256;
  node257 [label="{ Dense_5000505 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node256 -> node257;
  node258 [label="{ ReLU_5000506 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node257 -> node258;
  node259 [label="{ Dense_5000507 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node258 -> node259;
  node260 [label="{ Add_5000508 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node255 -> node260;
  node259 -> node260;
  node261 [label="{ LayerNorm_5000509 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node260 -> node261;
  node262 [label="{ TreeIncMultiHeadSelfAttention_5000510 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node261 -> node262;
  node5 [label="{ Add_5000511 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node262 -> node5;
  node260 -> node5;
  node263 [label="{ LayerNorm_5000512 | { 4096/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node5 -> node263;
  node8 [label="{ Dense_5000513 | { 16384/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node263 -> node8;
}
ndim(1) dims[1 0 0 0]
operator[0]: type(0)
	outputs[0] region(5,1,1)
operator[1]: type(0)
	outputs[0] region(7,2,2)
operator[2]: type(1)
	outputs[0] region(9,3,3)
operator[3]: type(23)
	inputs[0] region(5,1,1)
	outputs[0] region(11,4,4)
operator[4]: type(1)
	outputs[0] region(13,5,5)
operator[5]: type(23)
	inputs[0] region(7,2,2)
	outputs[0] region(15,6,6)
operator[6]: type(31)
	inputs[0] region(11,4,4)
	inputs[1] region(15,6,6)
	outputs[0] region(17,7,7)
operator[7]: type(1)
	outputs[0] region(19,8,8)
operator[8]: type(1)
	outputs[0] region(21,9,9)
operator[9]: type(82)
	inputs[0] region(17,7,7)
	outputs[0] region(23,10,10)
operator[10]: type(1)
	outputs[0] region(25,11,11)
operator[11]: type(1)
	outputs[0] region(27,12,12)
operator[12]: type(90)
	inputs[0] region(23,10,10)
	outputs[0] region(29,13,13)
operator[13]: type(31)
	inputs[0] region(29,13,13)
	inputs[1] region(17,7,7)
	outputs[0] region(31,14,14)
operator[14]: type(1)
	outputs[0] region(33,15,15)
operator[15]: type(1)
	outputs[0] region(35,16,16)
operator[16]: type(82)
	inputs[0] region(31,14,14)
	outputs[0] region(37,17,17)
operator[17]: type(1)
	outputs[0] region(39,18,18)
operator[18]: type(1)
	outputs[0] region(41,19,19)
operator[19]: type(5)
	inputs[0] region(37,17,17)
	outputs[0] region(43,20,20)
operator[20]: type(13)
	inputs[0] region(43,20,20)
	outputs[0] region(45,21,21)
operator[21]: type(1)
	outputs[0] region(47,22,22)
operator[22]: type(1)
	outputs[0] region(49,23,23)
operator[23]: type(5)
	inputs[0] region(45,21,21)
	outputs[0] region(51,24,24)
operator[24]: type(31)
	inputs[0] region(31,14,14)
	inputs[1] region(51,24,24)
	outputs[0] region(53,25,25)
operator[25]: type(1)
	outputs[0] region(55,26,26)
operator[26]: type(1)
	outputs[0] region(57,27,27)
operator[27]: type(82)
	inputs[0] region(53,25,25)
	outputs[0] region(59,28,28)
operator[28]: type(1)
	outputs[0] region(61,29,29)
operator[29]: type(1)
	outputs[0] region(63,30,30)
operator[30]: type(90)
	inputs[0] region(59,28,28)
	outputs[0] region(65,31,31)
operator[31]: type(31)
	inputs[0] region(65,31,31)
	inputs[1] region(53,25,25)
	outputs[0] region(67,32,32)
operator[32]: type(1)
	outputs[0] region(69,33,33)
operator[33]: type(1)
	outputs[0] region(71,34,34)
operator[34]: type(82)
	inputs[0] region(67,32,32)
	outputs[0] region(73,35,35)
operator[35]: type(1)
	outputs[0] region(75,36,36)
operator[36]: type(1)
	outputs[0] region(77,37,37)
operator[37]: type(5)
	inputs[0] region(73,35,35)
	outputs[0] region(79,38,38)
operator[38]: type(13)
	inputs[0] region(79,38,38)
	outputs[0] region(81,39,39)
operator[39]: type(1)
	outputs[0] region(83,40,40)
operator[40]: type(1)
	outputs[0] region(85,41,41)
operator[41]: type(5)
	inputs[0] region(81,39,39)
	outputs[0] region(87,42,42)
operator[42]: type(31)
	inputs[0] region(67,32,32)
	inputs[1] region(87,42,42)
	outputs[0] region(89,43,43)
operator[43]: type(1)
	outputs[0] region(91,44,44)
operator[44]: type(1)
	outputs[0] region(93,45,45)
operator[45]: type(82)
	inputs[0] region(89,43,43)
	outputs[0] region(95,46,46)
operator[46]: type(1)
	outputs[0] region(97,47,47)
operator[47]: type(1)
	outputs[0] region(99,48,48)
operator[48]: type(90)
	inputs[0] region(95,46,46)
	outputs[0] region(101,49,49)
operator[49]: type(31)
	inputs[0] region(101,49,49)
	inputs[1] region(89,43,43)
	outputs[0] region(103,50,50)
operator[50]: type(1)
	outputs[0] region(105,51,51)
operator[51]: type(1)
	outputs[0] region(107,52,52)
operator[52]: type(82)
	inputs[0] region(103,50,50)
	outputs[0] region(109,53,53)
operator[53]: type(1)
	outputs[0] region(111,54,54)
operator[54]: type(1)
	outputs[0] region(113,55,55)
operator[55]: type(5)
	inputs[0] region(109,53,53)
	outputs[0] region(115,56,56)
operator[56]: type(13)
	inputs[0] region(115,56,56)
	outputs[0] region(117,57,57)
operator[57]: type(1)
	outputs[0] region(119,58,58)
operator[58]: type(1)
	outputs[0] region(121,59,59)
operator[59]: type(5)
	inputs[0] region(117,57,57)
	outputs[0] region(123,60,60)
operator[60]: type(31)
	inputs[0] region(103,50,50)
	inputs[1] region(123,60,60)
	outputs[0] region(125,61,61)
operator[61]: type(1)
	outputs[0] region(127,62,62)
operator[62]: type(1)
	outputs[0] region(129,63,63)
operator[63]: type(82)
	inputs[0] region(125,61,61)
	outputs[0] region(131,64,64)
operator[64]: type(1)
	outputs[0] region(133,65,65)
operator[65]: type(1)
	outputs[0] region(135,66,66)
operator[66]: type(90)
	inputs[0] region(131,64,64)
	outputs[0] region(137,67,67)
operator[67]: type(31)
	inputs[0] region(137,67,67)
	inputs[1] region(125,61,61)
	outputs[0] region(139,68,68)
operator[68]: type(1)
	outputs[0] region(141,69,69)
operator[69]: type(1)
	outputs[0] region(143,70,70)
operator[70]: type(82)
	inputs[0] region(139,68,68)
	outputs[0] region(145,71,71)
operator[71]: type(1)
	outputs[0] region(147,72,72)
operator[72]: type(1)
	outputs[0] region(149,73,73)
operator[73]: type(5)
	inputs[0] region(145,71,71)
	outputs[0] region(151,74,74)
operator[74]: type(13)
	inputs[0] region(151,74,74)
	outputs[0] region(153,75,75)
operator[75]: type(1)
	outputs[0] region(155,76,76)
operator[76]: type(1)
	outputs[0] region(157,77,77)
operator[77]: type(5)
	inputs[0] region(153,75,75)
	outputs[0] region(159,78,78)
operator[78]: type(31)
	inputs[0] region(139,68,68)
	inputs[1] region(159,78,78)
	outputs[0] region(161,79,79)
operator[79]: type(1)
	outputs[0] region(163,80,80)
operator[80]: type(1)
	outputs[0] region(165,81,81)
operator[81]: type(82)
	inputs[0] region(161,79,79)
	outputs[0] region(167,82,82)
operator[82]: type(1)
	outputs[0] region(169,83,83)
operator[83]: type(1)
	outputs[0] region(171,84,84)
operator[84]: type(90)
	inputs[0] region(167,82,82)
	outputs[0] region(173,85,85)
operator[85]: type(31)
	inputs[0] region(173,85,85)
	inputs[1] region(161,79,79)
	outputs[0] region(175,86,86)
operator[86]: type(1)
	outputs[0] region(177,87,87)
operator[87]: type(1)
	outputs[0] region(179,88,88)
operator[88]: type(82)
	inputs[0] region(175,86,86)
	outputs[0] region(181,89,89)
operator[89]: type(1)
	outputs[0] region(183,90,90)
operator[90]: type(1)
	outputs[0] region(185,91,91)
operator[91]: type(5)
	inputs[0] region(181,89,89)
	outputs[0] region(187,92,92)
operator[92]: type(13)
	inputs[0] region(187,92,92)
	outputs[0] region(189,93,93)
operator[93]: type(1)
	outputs[0] region(191,94,94)
operator[94]: type(1)
	outputs[0] region(193,95,95)
operator[95]: type(5)
	inputs[0] region(189,93,93)
	outputs[0] region(195,96,96)
operator[96]: type(31)
	inputs[0] region(175,86,86)
	inputs[1] region(195,96,96)
	outputs[0] region(197,97,97)
operator[97]: type(1)
	outputs[0] region(199,98,98)
operator[98]: type(1)
	outputs[0] region(201,99,99)
operator[99]: type(82)
	inputs[0] region(197,97,97)
	outputs[0] region(203,100,100)
operator[100]: type(1)
	outputs[0] region(205,101,101)
operator[101]: type(1)
	outputs[0] region(207,102,102)
operator[102]: type(90)
	inputs[0] region(203,100,100)
	outputs[0] region(209,103,103)
operator[103]: type(31)
	inputs[0] region(209,103,103)
	inputs[1] region(197,97,97)
	outputs[0] region(211,104,104)
operator[104]: type(1)
	outputs[0] region(213,105,105)
operator[105]: type(1)
	outputs[0] region(215,106,106)
operator[106]: type(82)
	inputs[0] region(211,104,104)
	outputs[0] region(217,107,107)
operator[107]: type(1)
	outputs[0] region(219,108,108)
operator[108]: type(1)
	outputs[0] region(221,109,109)
operator[109]: type(5)
	inputs[0] region(217,107,107)
	outputs[0] region(223,110,110)
operator[110]: type(13)
	inputs[0] region(223,110,110)
	outputs[0] region(225,111,111)
operator[111]: type(1)
	outputs[0] region(227,112,112)
operator[112]: type(1)
	outputs[0] region(229,113,113)
operator[113]: type(5)
	inputs[0] region(225,111,111)
	outputs[0] region(231,114,114)
operator[114]: type(31)
	inputs[0] region(211,104,104)
	inputs[1] region(231,114,114)
	outputs[0] region(233,115,115)
operator[115]: type(1)
	outputs[0] region(235,116,116)
operator[116]: type(1)
	outputs[0] region(237,117,117)
operator[117]: type(82)
	inputs[0] region(233,115,115)
	outputs[0] region(239,118,118)
operator[118]: type(1)
	outputs[0] region(241,119,119)
operator[119]: type(1)
	outputs[0] region(243,120,120)
operator[120]: type(90)
	inputs[0] region(239,118,118)
	outputs[0] region(245,121,121)
operator[121]: type(31)
	inputs[0] region(245,121,121)
	inputs[1] region(233,115,115)
	outputs[0] region(247,122,122)
operator[122]: type(1)
	outputs[0] region(249,123,123)
operator[123]: type(1)
	outputs[0] region(251,124,124)
operator[124]: type(82)
	inputs[0] region(247,122,122)
	outputs[0] region(253,125,125)
operator[125]: type(1)
	outputs[0] region(255,126,126)
operator[126]: type(1)
	outputs[0] region(257,127,127)
operator[127]: type(5)
	inputs[0] region(253,125,125)
	outputs[0] region(259,128,128)
operator[128]: type(13)
	inputs[0] region(259,128,128)
	outputs[0] region(261,129,129)
operator[129]: type(1)
	outputs[0] region(263,130,130)
operator[130]: type(1)
	outputs[0] region(265,131,131)
operator[131]: type(5)
	inputs[0] region(261,129,129)
	outputs[0] region(267,132,132)
operator[132]: type(31)
	inputs[0] region(247,122,122)
	inputs[1] region(267,132,132)
	outputs[0] region(269,133,133)
operator[133]: type(1)
	outputs[0] region(271,134,134)
operator[134]: type(1)
	outputs[0] region(273,135,135)
operator[135]: type(82)
	inputs[0] region(269,133,133)
	outputs[0] region(275,136,136)
operator[136]: type(1)
	outputs[0] region(277,137,137)
operator[137]: type(1)
	outputs[0] region(279,138,138)
operator[138]: type(90)
	inputs[0] region(275,136,136)
	outputs[0] region(281,139,139)
operator[139]: type(31)
	inputs[0] region(281,139,139)
	inputs[1] region(269,133,133)
	outputs[0] region(283,140,140)
operator[140]: type(1)
	outputs[0] region(285,141,141)
operator[141]: type(1)
	outputs[0] region(287,142,142)
operator[142]: type(82)
	inputs[0] region(283,140,140)
	outputs[0] region(289,143,143)
operator[143]: type(1)
	outputs[0] region(291,144,144)
operator[144]: type(1)
	outputs[0] region(293,145,145)
operator[145]: type(5)
	inputs[0] region(289,143,143)
	outputs[0] region(295,146,146)
operator[146]: type(13)
	inputs[0] region(295,146,146)
	outputs[0] region(297,147,147)
operator[147]: type(1)
	outputs[0] region(299,148,148)
operator[148]: type(1)
	outputs[0] region(301,149,149)
operator[149]: type(5)
	inputs[0] region(297,147,147)
	outputs[0] region(303,150,150)
operator[150]: type(31)
	inputs[0] region(283,140,140)
	inputs[1] region(303,150,150)
	outputs[0] region(305,151,151)
operator[151]: type(1)
	outputs[0] region(307,152,152)
operator[152]: type(1)
	outputs[0] region(309,153,153)
operator[153]: type(82)
	inputs[0] region(305,151,151)
	outputs[0] region(311,154,154)
operator[154]: type(1)
	outputs[0] region(313,155,155)
operator[155]: type(1)
	outputs[0] region(315,156,156)
operator[156]: type(90)
	inputs[0] region(311,154,154)
	outputs[0] region(317,157,157)
operator[157]: type(31)
	inputs[0] region(317,157,157)
	inputs[1] region(305,151,151)
	outputs[0] region(319,158,158)
operator[158]: type(1)
	outputs[0] region(321,159,159)
operator[159]: type(1)
	outputs[0] region(323,160,160)
operator[160]: type(82)
	inputs[0] region(319,158,158)
	outputs[0] region(325,161,161)
operator[161]: type(1)
	outputs[0] region(327,162,162)
operator[162]: type(1)
	outputs[0] region(329,163,163)
operator[163]: type(5)
	inputs[0] region(325,161,161)
	outputs[0] region(331,164,164)
operator[164]: type(13)
	inputs[0] region(331,164,164)
	outputs[0] region(333,165,165)
operator[165]: type(1)
	outputs[0] region(335,166,166)
operator[166]: type(1)
	outputs[0] region(337,167,167)
operator[167]: type(5)
	inputs[0] region(333,165,165)
	outputs[0] region(339,168,168)
operator[168]: type(31)
	inputs[0] region(319,158,158)
	inputs[1] region(339,168,168)
	outputs[0] region(341,169,169)
operator[169]: type(1)
	outputs[0] region(343,170,170)
operator[170]: type(1)
	outputs[0] region(345,171,171)
operator[171]: type(82)
	inputs[0] region(341,169,169)
	outputs[0] region(347,172,172)
operator[172]: type(1)
	outputs[0] region(349,173,173)
operator[173]: type(1)
	outputs[0] region(351,174,174)
operator[174]: type(90)
	inputs[0] region(347,172,172)
	outputs[0] region(353,175,175)
operator[175]: type(31)
	inputs[0] region(353,175,175)
	inputs[1] region(341,169,169)
	outputs[0] region(355,176,176)
operator[176]: type(1)
	outputs[0] region(357,177,177)
operator[177]: type(1)
	outputs[0] region(359,178,178)
operator[178]: type(82)
	inputs[0] region(355,176,176)
	outputs[0] region(361,179,179)
operator[179]: type(1)
	outputs[0] region(363,180,180)
operator[180]: type(1)
	outputs[0] region(365,181,181)
operator[181]: type(5)
	inputs[0] region(361,179,179)
	outputs[0] region(367,182,182)
operator[182]: type(13)
	inputs[0] region(367,182,182)
	outputs[0] region(369,183,183)
operator[183]: type(1)
	outputs[0] region(371,184,184)
operator[184]: type(1)
	outputs[0] region(373,185,185)
operator[185]: type(5)
	inputs[0] region(369,183,183)
	outputs[0] region(375,186,186)
operator[186]: type(31)
	inputs[0] region(355,176,176)
	inputs[1] region(375,186,186)
	outputs[0] region(377,187,187)
operator[187]: type(1)
	outputs[0] region(379,188,188)
operator[188]: type(1)
	outputs[0] region(381,189,189)
operator[189]: type(82)
	inputs[0] region(377,187,187)
	outputs[0] region(383,190,190)
operator[190]: type(1)
	outputs[0] region(385,191,191)
operator[191]: type(1)
	outputs[0] region(387,192,192)
operator[192]: type(90)
	inputs[0] region(383,190,190)
	outputs[0] region(389,193,193)
operator[193]: type(31)
	inputs[0] region(389,193,193)
	inputs[1] region(377,187,187)
	outputs[0] region(391,194,194)
operator[194]: type(1)
	outputs[0] region(393,195,195)
operator[195]: type(1)
	outputs[0] region(395,196,196)
operator[196]: type(82)
	inputs[0] region(391,194,194)
	outputs[0] region(397,197,197)
operator[197]: type(1)
	outputs[0] region(399,198,198)
operator[198]: type(1)
	outputs[0] region(401,199,199)
operator[199]: type(5)
	inputs[0] region(397,197,197)
	outputs[0] region(403,200,200)
operator[200]: type(13)
	inputs[0] region(403,200,200)
	outputs[0] region(405,201,201)
operator[201]: type(1)
	outputs[0] region(407,202,202)
operator[202]: type(1)
	outputs[0] region(409,203,203)
operator[203]: type(5)
	inputs[0] region(405,201,201)
	outputs[0] region(411,204,204)
operator[204]: type(31)
	inputs[0] region(391,194,194)
	inputs[1] region(411,204,204)
	outputs[0] region(413,205,205)
operator[205]: type(1)
	outputs[0] region(415,206,206)
operator[206]: type(1)
	outputs[0] region(417,207,207)
operator[207]: type(82)
	inputs[0] region(413,205,205)
	outputs[0] region(419,208,208)
operator[208]: type(1)
	outputs[0] region(421,209,209)
operator[209]: type(1)
	outputs[0] region(423,210,210)
operator[210]: type(90)
	inputs[0] region(419,208,208)
	outputs[0] region(425,211,211)
operator[211]: type(31)
	inputs[0] region(425,211,211)
	inputs[1] region(413,205,205)
	outputs[0] region(427,212,212)
operator[212]: type(1)
	outputs[0] region(429,213,213)
operator[213]: type(1)
	outputs[0] region(431,214,214)
operator[214]: type(82)
	inputs[0] region(427,212,212)
	outputs[0] region(433,215,215)
operator[215]: type(1)
	outputs[0] region(435,216,216)
operator[216]: type(1)
	outputs[0] region(437,217,217)
operator[217]: type(5)
	inputs[0] region(433,215,215)
	outputs[0] region(439,218,218)
operator[218]: type(13)
	inputs[0] region(439,218,218)
	outputs[0] region(441,219,219)
operator[219]: type(1)
	outputs[0] region(443,220,220)
operator[220]: type(1)
	outputs[0] region(445,221,221)
operator[221]: type(5)
	inputs[0] region(441,219,219)
	outputs[0] region(447,222,222)
operator[222]: type(31)
	inputs[0] region(427,212,212)
	inputs[1] region(447,222,222)
	outputs[0] region(449,223,223)
operator[223]: type(1)
	outputs[0] region(451,224,224)
operator[224]: type(1)
	outputs[0] region(453,225,225)
operator[225]: type(82)
	inputs[0] region(449,223,223)
	outputs[0] region(455,226,226)
operator[226]: type(1)
	outputs[0] region(457,227,227)
operator[227]: type(1)
	outputs[0] region(459,228,228)
operator[228]: type(90)
	inputs[0] region(455,226,226)
	outputs[0] region(461,229,229)
operator[229]: type(31)
	inputs[0] region(461,229,229)
	inputs[1] region(449,223,223)
	outputs[0] region(463,230,230)
operator[230]: type(1)
	outputs[0] region(465,231,231)
operator[231]: type(1)
	outputs[0] region(467,232,232)
operator[232]: type(82)
	inputs[0] region(463,230,230)
	outputs[0] region(469,233,233)
operator[233]: type(1)
	outputs[0] region(471,234,234)
operator[234]: type(1)
	outputs[0] region(473,235,235)
operator[235]: type(5)
	inputs[0] region(469,233,233)
	outputs[0] region(475,236,236)
operator[236]: type(13)
	inputs[0] region(475,236,236)
	outputs[0] region(477,237,237)
operator[237]: type(1)
	outputs[0] region(479,238,238)
operator[238]: type(1)
	outputs[0] region(481,239,239)
operator[239]: type(5)
	inputs[0] region(477,237,237)
	outputs[0] region(483,240,240)
operator[240]: type(31)
	inputs[0] region(463,230,230)
	inputs[1] region(483,240,240)
	outputs[0] region(485,241,241)
operator[241]: type(1)
	outputs[0] region(487,242,242)
operator[242]: type(1)
	outputs[0] region(489,243,243)
operator[243]: type(82)
	inputs[0] region(485,241,241)
	outputs[0] region(491,244,244)
operator[244]: type(1)
	outputs[0] region(493,245,245)
operator[245]: type(1)
	outputs[0] region(495,246,246)
operator[246]: type(90)
	inputs[0] region(491,244,244)
	outputs[0] region(497,247,247)
operator[247]: type(31)
	inputs[0] region(497,247,247)
	inputs[1] region(485,241,241)
	outputs[0] region(499,248,248)
operator[248]: type(1)
	outputs[0] region(501,249,249)
operator[249]: type(1)
	outputs[0] region(503,250,250)
operator[250]: type(82)
	inputs[0] region(499,248,248)
	outputs[0] region(505,251,251)
operator[251]: type(1)
	outputs[0] region(507,252,252)
operator[252]: type(1)
	outputs[0] region(509,253,253)
operator[253]: type(5)
	inputs[0] region(505,251,251)
	outputs[0] region(511,254,254)
operator[254]: type(13)
	inputs[0] region(511,254,254)
	outputs[0] region(513,255,255)
operator[255]: type(1)
	outputs[0] region(515,256,256)
operator[256]: type(1)
	outputs[0] region(517,257,257)
operator[257]: type(5)
	inputs[0] region(513,255,255)
	outputs[0] region(519,258,258)
operator[258]: type(31)
	inputs[0] region(499,248,248)
	inputs[1] region(519,258,258)
	outputs[0] region(521,259,259)
operator[259]: type(1)
	outputs[0] region(523,260,260)
operator[260]: type(1)
	outputs[0] region(525,261,261)
operator[261]: type(82)
	inputs[0] region(521,259,259)
	outputs[0] region(527,262,262)
operator[262]: type(1)
	outputs[0] region(529,263,263)
operator[263]: type(1)
	outputs[0] region(531,264,264)
operator[264]: type(90)
	inputs[0] region(527,262,262)
	outputs[0] region(533,265,265)
operator[265]: type(31)
	inputs[0] region(533,265,265)
	inputs[1] region(521,259,259)
	outputs[0] region(535,266,266)
operator[266]: type(1)
	outputs[0] region(537,267,267)
operator[267]: type(1)
	outputs[0] region(539,268,268)
operator[268]: type(82)
	inputs[0] region(535,266,266)
	outputs[0] region(541,269,269)
operator[269]: type(1)
	outputs[0] region(543,270,270)
operator[270]: type(1)
	outputs[0] region(545,271,271)
operator[271]: type(5)
	inputs[0] region(541,269,269)
	outputs[0] region(547,272,272)
operator[272]: type(13)
	inputs[0] region(547,272,272)
	outputs[0] region(549,273,273)
operator[273]: type(1)
	outputs[0] region(551,274,274)
operator[274]: type(1)
	outputs[0] region(553,275,275)
operator[275]: type(5)
	inputs[0] region(549,273,273)
	outputs[0] region(555,276,276)
operator[276]: type(31)
	inputs[0] region(535,266,266)
	inputs[1] region(555,276,276)
	outputs[0] region(557,277,277)
operator[277]: type(1)
	outputs[0] region(559,278,278)
operator[278]: type(1)
	outputs[0] region(561,279,279)
operator[279]: type(82)
	inputs[0] region(557,277,277)
	outputs[0] region(563,280,280)
operator[280]: type(1)
	outputs[0] region(565,281,281)
operator[281]: type(1)
	outputs[0] region(567,282,282)
operator[282]: type(90)
	inputs[0] region(563,280,280)
	outputs[0] region(569,283,283)
operator[283]: type(31)
	inputs[0] region(569,283,283)
	inputs[1] region(557,277,277)
	outputs[0] region(571,284,284)
operator[284]: type(1)
	outputs[0] region(573,285,285)
operator[285]: type(1)
	outputs[0] region(575,286,286)
operator[286]: type(82)
	inputs[0] region(571,284,284)
	outputs[0] region(577,287,287)
operator[287]: type(1)
	outputs[0] region(579,288,288)
operator[288]: type(1)
	outputs[0] region(581,289,289)
operator[289]: type(5)
	inputs[0] region(577,287,287)
	outputs[0] region(583,290,290)
operator[290]: type(13)
	inputs[0] region(583,290,290)
	outputs[0] region(585,291,291)
operator[291]: type(1)
	outputs[0] region(587,292,292)
operator[292]: type(1)
	outputs[0] region(589,293,293)
operator[293]: type(5)
	inputs[0] region(585,291,291)
	outputs[0] region(591,294,294)
operator[294]: type(31)
	inputs[0] region(571,284,284)
	inputs[1] region(591,294,294)
	outputs[0] region(593,295,295)
operator[295]: type(1)
	outputs[0] region(595,296,296)
operator[296]: type(1)
	outputs[0] region(597,297,297)
operator[297]: type(82)
	inputs[0] region(593,295,295)
	outputs[0] region(599,298,298)
operator[298]: type(1)
	outputs[0] region(601,299,299)
operator[299]: type(1)
	outputs[0] region(603,300,300)
operator[300]: type(90)
	inputs[0] region(599,298,298)
	outputs[0] region(605,301,301)
operator[301]: type(31)
	inputs[0] region(605,301,301)
	inputs[1] region(593,295,295)
	outputs[0] region(607,302,302)
operator[302]: type(1)
	outputs[0] region(609,303,303)
operator[303]: type(1)
	outputs[0] region(611,304,304)
operator[304]: type(82)
	inputs[0] region(607,302,302)
	outputs[0] region(613,305,305)
operator[305]: type(1)
	outputs[0] region(615,306,306)
operator[306]: type(1)
	outputs[0] region(617,307,307)
operator[307]: type(5)
	inputs[0] region(613,305,305)
	outputs[0] region(619,308,308)
operator[308]: type(13)
	inputs[0] region(619,308,308)
	outputs[0] region(621,309,309)
operator[309]: type(1)
	outputs[0] region(623,310,310)
operator[310]: type(1)
	outputs[0] region(625,311,311)
operator[311]: type(5)
	inputs[0] region(621,309,309)
	outputs[0] region(627,312,312)
operator[312]: type(31)
	inputs[0] region(607,302,302)
	inputs[1] region(627,312,312)
	outputs[0] region(629,313,313)
operator[313]: type(1)
	outputs[0] region(631,314,314)
operator[314]: type(1)
	outputs[0] region(633,315,315)
operator[315]: type(82)
	inputs[0] region(629,313,313)
	outputs[0] region(635,316,316)
operator[316]: type(1)
	outputs[0] region(637,317,317)
operator[317]: type(1)
	outputs[0] region(639,318,318)
operator[318]: type(90)
	inputs[0] region(635,316,316)
	outputs[0] region(641,319,319)
operator[319]: type(31)
	inputs[0] region(641,319,319)
	inputs[1] region(629,313,313)
	outputs[0] region(643,320,320)
operator[320]: type(1)
	outputs[0] region(645,321,321)
operator[321]: type(1)
	outputs[0] region(647,322,322)
operator[322]: type(82)
	inputs[0] region(643,320,320)
	outputs[0] region(649,323,323)
operator[323]: type(1)
	outputs[0] region(651,324,324)
operator[324]: type(1)
	outputs[0] region(653,325,325)
operator[325]: type(5)
	inputs[0] region(649,323,323)
	outputs[0] region(655,326,326)
operator[326]: type(13)
	inputs[0] region(655,326,326)
	outputs[0] region(657,327,327)
operator[327]: type(1)
	outputs[0] region(659,328,328)
operator[328]: type(1)
	outputs[0] region(661,329,329)
operator[329]: type(5)
	inputs[0] region(657,327,327)
	outputs[0] region(663,330,330)
operator[330]: type(31)
	inputs[0] region(643,320,320)
	inputs[1] region(663,330,330)
	outputs[0] region(665,331,331)
operator[331]: type(1)
	outputs[0] region(667,332,332)
operator[332]: type(1)
	outputs[0] region(669,333,333)
operator[333]: type(82)
	inputs[0] region(665,331,331)
	outputs[0] region(671,334,334)
operator[334]: type(1)
	outputs[0] region(673,335,335)
operator[335]: type(1)
	outputs[0] region(675,336,336)
operator[336]: type(90)
	inputs[0] region(671,334,334)
	outputs[0] region(677,337,337)
operator[337]: type(31)
	inputs[0] region(677,337,337)
	inputs[1] region(665,331,331)
	outputs[0] region(679,338,338)
operator[338]: type(1)
	outputs[0] region(681,339,339)
operator[339]: type(1)
	outputs[0] region(683,340,340)
operator[340]: type(82)
	inputs[0] region(679,338,338)
	outputs[0] region(685,341,341)
operator[341]: type(1)
	outputs[0] region(687,342,342)
operator[342]: type(1)
	outputs[0] region(689,343,343)
operator[343]: type(5)
	inputs[0] region(685,341,341)
	outputs[0] region(691,344,344)
operator[344]: type(13)
	inputs[0] region(691,344,344)
	outputs[0] region(693,345,345)
operator[345]: type(1)
	outputs[0] region(695,346,346)
operator[346]: type(1)
	outputs[0] region(697,347,347)
operator[347]: type(5)
	inputs[0] region(693,345,345)
	outputs[0] region(699,348,348)
operator[348]: type(31)
	inputs[0] region(679,338,338)
	inputs[1] region(699,348,348)
	outputs[0] region(701,349,349)
operator[349]: type(1)
	outputs[0] region(703,350,350)
operator[350]: type(1)
	outputs[0] region(705,351,351)
operator[351]: type(82)
	inputs[0] region(701,349,349)
	outputs[0] region(707,352,352)
operator[352]: type(1)
	outputs[0] region(709,353,353)
operator[353]: type(1)
	outputs[0] region(711,354,354)
operator[354]: type(90)
	inputs[0] region(707,352,352)
	outputs[0] region(713,355,355)
operator[355]: type(31)
	inputs[0] region(713,355,355)
	inputs[1] region(701,349,349)
	outputs[0] region(715,356,356)
operator[356]: type(1)
	outputs[0] region(717,357,357)
operator[357]: type(1)
	outputs[0] region(719,358,358)
operator[358]: type(82)
	inputs[0] region(715,356,356)
	outputs[0] region(721,359,359)
operator[359]: type(1)
	outputs[0] region(723,360,360)
operator[360]: type(1)
	outputs[0] region(725,361,361)
operator[361]: type(5)
	inputs[0] region(721,359,359)
	outputs[0] region(727,362,362)
operator[362]: type(13)
	inputs[0] region(727,362,362)
	outputs[0] region(729,363,363)
operator[363]: type(1)
	outputs[0] region(731,364,364)
operator[364]: type(1)
	outputs[0] region(733,365,365)
operator[365]: type(5)
	inputs[0] region(729,363,363)
	outputs[0] region(735,366,366)
operator[366]: type(31)
	inputs[0] region(715,356,356)
	inputs[1] region(735,366,366)
	outputs[0] region(737,367,367)
operator[367]: type(1)
	outputs[0] region(739,368,368)
operator[368]: type(1)
	outputs[0] region(741,369,369)
operator[369]: type(82)
	inputs[0] region(737,367,367)
	outputs[0] region(743,370,370)
operator[370]: type(1)
	outputs[0] region(745,371,371)
operator[371]: type(1)
	outputs[0] region(747,372,372)
operator[372]: type(90)
	inputs[0] region(743,370,370)
	outputs[0] region(749,373,373)
operator[373]: type(31)
	inputs[0] region(749,373,373)
	inputs[1] region(737,367,367)
	outputs[0] region(751,374,374)
operator[374]: type(1)
	outputs[0] region(753,375,375)
operator[375]: type(1)
	outputs[0] region(755,376,376)
operator[376]: type(82)
	inputs[0] region(751,374,374)
	outputs[0] region(757,377,377)
operator[377]: type(1)
	outputs[0] region(759,378,378)
operator[378]: type(1)
	outputs[0] region(761,379,379)
operator[379]: type(5)
	inputs[0] region(757,377,377)
	outputs[0] region(763,380,380)
operator[380]: type(13)
	inputs[0] region(763,380,380)
	outputs[0] region(765,381,381)
operator[381]: type(1)
	outputs[0] region(767,382,382)
operator[382]: type(1)
	outputs[0] region(769,383,383)
operator[383]: type(5)
	inputs[0] region(765,381,381)
	outputs[0] region(771,384,384)
operator[384]: type(31)
	inputs[0] region(751,374,374)
	inputs[1] region(771,384,384)
	outputs[0] region(773,385,385)
operator[385]: type(1)
	outputs[0] region(775,386,386)
operator[386]: type(1)
	outputs[0] region(777,387,387)
operator[387]: type(82)
	inputs[0] region(773,385,385)
	outputs[0] region(779,388,388)
operator[388]: type(1)
	outputs[0] region(781,389,389)
operator[389]: type(1)
	outputs[0] region(783,390,390)
operator[390]: type(90)
	inputs[0] region(779,388,388)
	outputs[0] region(785,391,391)
operator[391]: type(31)
	inputs[0] region(785,391,391)
	inputs[1] region(773,385,385)
	outputs[0] region(787,392,392)
operator[392]: type(1)
	outputs[0] region(789,393,393)
operator[393]: type(1)
	outputs[0] region(791,394,394)
operator[394]: type(82)
	inputs[0] region(787,392,392)
	outputs[0] region(793,395,395)
operator[395]: type(1)
	outputs[0] region(795,396,396)
operator[396]: type(1)
	outputs[0] region(797,397,397)
operator[397]: type(5)
	inputs[0] region(793,395,395)
	outputs[0] region(799,398,398)
operator[398]: type(13)
	inputs[0] region(799,398,398)
	outputs[0] region(801,399,399)
operator[399]: type(1)
	outputs[0] region(803,400,400)
operator[400]: type(1)
	outputs[0] region(805,401,401)
operator[401]: type(5)
	inputs[0] region(801,399,399)
	outputs[0] region(807,402,402)
operator[402]: type(31)
	inputs[0] region(787,392,392)
	inputs[1] region(807,402,402)
	outputs[0] region(809,403,403)
operator[403]: type(1)
	outputs[0] region(811,404,404)
operator[404]: type(1)
	outputs[0] region(813,405,405)
operator[405]: type(82)
	inputs[0] region(809,403,403)
	outputs[0] region(815,406,406)
operator[406]: type(1)
	outputs[0] region(817,407,407)
operator[407]: type(1)
	outputs[0] region(819,408,408)
operator[408]: type(90)
	inputs[0] region(815,406,406)
	outputs[0] region(821,409,409)
operator[409]: type(31)
	inputs[0] region(821,409,409)
	inputs[1] region(809,403,403)
	outputs[0] region(823,410,410)
operator[410]: type(1)
	outputs[0] region(825,411,411)
operator[411]: type(1)
	outputs[0] region(827,412,412)
operator[412]: type(82)
	inputs[0] region(823,410,410)
	outputs[0] region(829,413,413)
operator[413]: type(1)
	outputs[0] region(831,414,414)
operator[414]: type(1)
	outputs[0] region(833,415,415)
operator[415]: type(5)
	inputs[0] region(829,413,413)
	outputs[0] region(835,416,416)
operator[416]: type(13)
	inputs[0] region(835,416,416)
	outputs[0] region(837,417,417)
operator[417]: type(1)
	outputs[0] region(839,418,418)
operator[418]: type(1)
	outputs[0] region(841,419,419)
operator[419]: type(5)
	inputs[0] region(837,417,417)
	outputs[0] region(843,420,420)
operator[420]: type(31)
	inputs[0] region(823,410,410)
	inputs[1] region(843,420,420)
	outputs[0] region(845,421,421)
operator[421]: type(1)
	outputs[0] region(847,422,422)
operator[422]: type(1)
	outputs[0] region(849,423,423)
operator[423]: type(82)
	inputs[0] region(845,421,421)
	outputs[0] region(851,424,424)
operator[424]: type(1)
	outputs[0] region(853,425,425)
operator[425]: type(1)
	outputs[0] region(855,426,426)
operator[426]: type(90)
	inputs[0] region(851,424,424)
	outputs[0] region(857,427,427)
operator[427]: type(31)
	inputs[0] region(857,427,427)
	inputs[1] region(845,421,421)
	outputs[0] region(859,428,428)
operator[428]: type(1)
	outputs[0] region(861,429,429)
operator[429]: type(1)
	outputs[0] region(863,430,430)
operator[430]: type(82)
	inputs[0] region(859,428,428)
	outputs[0] region(865,431,431)
operator[431]: type(1)
	outputs[0] region(867,432,432)
operator[432]: type(1)
	outputs[0] region(869,433,433)
operator[433]: type(5)
	inputs[0] region(865,431,431)
	outputs[0] region(871,434,434)
operator[434]: type(13)
	inputs[0] region(871,434,434)
	outputs[0] region(873,435,435)
operator[435]: type(1)
	outputs[0] region(875,436,436)
operator[436]: type(1)
	outputs[0] region(877,437,437)
operator[437]: type(5)
	inputs[0] region(873,435,435)
	outputs[0] region(879,438,438)
operator[438]: type(31)
	inputs[0] region(859,428,428)
	inputs[1] region(879,438,438)
	outputs[0] region(881,439,439)
operator[439]: type(1)
	outputs[0] region(883,440,440)
operator[440]: type(1)
	outputs[0] region(885,441,441)
operator[441]: type(82)
	inputs[0] region(881,439,439)
	outputs[0] region(887,442,442)
operator[442]: type(1)
	outputs[0] region(889,443,443)
operator[443]: type(1)
	outputs[0] region(891,444,444)
operator[444]: type(90)
	inputs[0] region(887,442,442)
	outputs[0] region(893,445,445)
operator[445]: type(31)
	inputs[0] region(893,445,445)
	inputs[1] region(881,439,439)
	outputs[0] region(895,446,446)
operator[446]: type(1)
	outputs[0] region(897,447,447)
operator[447]: type(1)
	outputs[0] region(899,448,448)
operator[448]: type(82)
	inputs[0] region(895,446,446)
	outputs[0] region(901,449,449)
operator[449]: type(1)
	outputs[0] region(903,450,450)
operator[450]: type(1)
	outputs[0] region(905,451,451)
operator[451]: type(5)
	inputs[0] region(901,449,449)
	outputs[0] region(907,452,452)
operator[452]: type(13)
	inputs[0] region(907,452,452)
	outputs[0] region(909,453,453)
operator[453]: type(1)
	outputs[0] region(911,454,454)
operator[454]: type(1)
	outputs[0] region(913,455,455)
operator[455]: type(5)
	inputs[0] region(909,453,453)
	outputs[0] region(915,456,456)
operator[456]: type(31)
	inputs[0] region(895,446,446)
	inputs[1] region(915,456,456)
	outputs[0] region(917,457,457)
operator[457]: type(1)
	outputs[0] region(919,458,458)
operator[458]: type(1)
	outputs[0] region(921,459,459)
operator[459]: type(82)
	inputs[0] region(917,457,457)
	outputs[0] region(923,460,460)
operator[460]: type(1)
	outputs[0] region(925,461,461)
operator[461]: type(1)
	outputs[0] region(927,462,462)
operator[462]: type(90)
	inputs[0] region(923,460,460)
	outputs[0] region(929,463,463)
operator[463]: type(31)
	inputs[0] region(929,463,463)
	inputs[1] region(917,457,457)
	outputs[0] region(931,464,464)
operator[464]: type(1)
	outputs[0] region(933,465,465)
operator[465]: type(1)
	outputs[0] region(935,466,466)
operator[466]: type(82)
	inputs[0] region(931,464,464)
	outputs[0] region(937,467,467)
operator[467]: type(1)
	outputs[0] region(939,468,468)
operator[468]: type(1)
	outputs[0] region(941,469,469)
operator[469]: type(5)
	inputs[0] region(937,467,467)
	outputs[0] region(943,470,470)
operator[470]: type(13)
	inputs[0] region(943,470,470)
	outputs[0] region(945,471,471)
operator[471]: type(1)
	outputs[0] region(947,472,472)
operator[472]: type(1)
	outputs[0] region(949,473,473)
operator[473]: type(5)
	inputs[0] region(945,471,471)
	outputs[0] region(951,474,474)
operator[474]: type(31)
	inputs[0] region(931,464,464)
	inputs[1] region(951,474,474)
	outputs[0] region(953,475,475)
operator[475]: type(1)
	outputs[0] region(955,476,476)
operator[476]: type(1)
	outputs[0] region(957,477,477)
operator[477]: type(82)
	inputs[0] region(953,475,475)
	outputs[0] region(959,478,478)
operator[478]: type(1)
	outputs[0] region(961,479,479)
operator[479]: type(1)
	outputs[0] region(963,480,480)
operator[480]: type(90)
	inputs[0] region(959,478,478)
	outputs[0] region(965,481,481)
operator[481]: type(31)
	inputs[0] region(965,481,481)
	inputs[1] region(953,475,475)
	outputs[0] region(967,482,482)
operator[482]: type(1)
	outputs[0] region(969,483,483)
operator[483]: type(1)
	outputs[0] region(971,484,484)
operator[484]: type(82)
	inputs[0] region(967,482,482)
	outputs[0] region(973,485,485)
operator[485]: type(1)
	outputs[0] region(975,486,486)
operator[486]: type(1)
	outputs[0] region(977,487,487)
operator[487]: type(5)
	inputs[0] region(973,485,485)
	outputs[0] region(979,488,488)
operator[488]: type(13)
	inputs[0] region(979,488,488)
	outputs[0] region(981,489,489)
operator[489]: type(1)
	outputs[0] region(983,490,490)
operator[490]: type(1)
	outputs[0] region(985,491,491)
operator[491]: type(5)
	inputs[0] region(981,489,489)
	outputs[0] region(987,492,492)
operator[492]: type(31)
	inputs[0] region(967,482,482)
	inputs[1] region(987,492,492)
	outputs[0] region(989,493,493)
operator[493]: type(1)
	outputs[0] region(991,494,494)
operator[494]: type(1)
	outputs[0] region(993,495,495)
operator[495]: type(82)
	inputs[0] region(989,493,493)
	outputs[0] region(995,496,496)
operator[496]: type(1)
	outputs[0] region(997,497,497)
operator[497]: type(1)
	outputs[0] region(999,498,498)
operator[498]: type(90)
	inputs[0] region(995,496,496)
	outputs[0] region(1001,499,499)
operator[499]: type(31)
	inputs[0] region(1001,499,499)
	inputs[1] region(989,493,493)
	outputs[0] region(1003,500,500)
operator[500]: type(1)
	outputs[0] region(1005,501,501)
operator[501]: type(1)
	outputs[0] region(1007,502,502)
operator[502]: type(82)
	inputs[0] region(1003,500,500)
	outputs[0] region(1009,503,503)
operator[503]: type(1)
	outputs[0] region(1011,504,504)
operator[504]: type(1)
	outputs[0] region(1013,505,505)
operator[505]: type(5)
	inputs[0] region(1009,503,503)
	outputs[0] region(1015,506,506)
operator[506]: type(13)
	inputs[0] region(1015,506,506)
	outputs[0] region(1017,507,507)
operator[507]: type(1)
	outputs[0] region(1019,508,508)
operator[508]: type(1)
	outputs[0] region(1021,509,509)
operator[509]: type(5)
	inputs[0] region(1017,507,507)
	outputs[0] region(1023,510,510)
operator[510]: type(31)
	inputs[0] region(1003,500,500)
	inputs[1] region(1023,510,510)
	outputs[0] region(1025,511,511)
operator[511]: type(1)
	outputs[0] region(1027,512,512)
operator[512]: type(1)
	outputs[0] region(1029,513,513)
operator[513]: type(82)
	inputs[0] region(1025,511,511)
	outputs[0] region(1031,514,514)
operator[514]: type(1)
	outputs[0] region(1033,515,515)
operator[515]: type(1)
	outputs[0] region(1035,516,516)
operator[516]: type(90)
	inputs[0] region(1031,514,514)
	outputs[0] region(1037,517,517)
operator[517]: type(31)
	inputs[0] region(1037,517,517)
	inputs[1] region(1025,511,511)
	outputs[0] region(1039,518,518)
operator[518]: type(1)
	outputs[0] region(1041,519,519)
operator[519]: type(1)
	outputs[0] region(1043,520,520)
operator[520]: type(82)
	inputs[0] region(1039,518,518)
	outputs[0] region(1045,521,521)
operator[521]: type(1)
	outputs[0] region(1047,522,522)
operator[522]: type(1)
	outputs[0] region(1049,523,523)
operator[523]: type(5)
	inputs[0] region(1045,521,521)
	outputs[0] region(1051,524,524)
operator[524]: type(13)
	inputs[0] region(1051,524,524)
	outputs[0] region(1053,525,525)
operator[525]: type(1)
	outputs[0] region(1055,526,526)
operator[526]: type(1)
	outputs[0] region(1057,527,527)
operator[527]: type(5)
	inputs[0] region(1053,525,525)
	outputs[0] region(1059,528,528)
operator[528]: type(31)
	inputs[0] region(1039,518,518)
	inputs[1] region(1059,528,528)
	outputs[0] region(1061,529,529)
operator[529]: type(1)
	outputs[0] region(1063,530,530)
operator[530]: type(1)
	outputs[0] region(1065,531,531)
operator[531]: type(82)
	inputs[0] region(1061,529,529)
	outputs[0] region(1067,532,532)
operator[532]: type(1)
	outputs[0] region(1069,533,533)
operator[533]: type(1)
	outputs[0] region(1071,534,534)
operator[534]: type(90)
	inputs[0] region(1067,532,532)
	outputs[0] region(1073,535,535)
operator[535]: type(31)
	inputs[0] region(1073,535,535)
	inputs[1] region(1061,529,529)
	outputs[0] region(1075,536,536)
operator[536]: type(1)
	outputs[0] region(1077,537,537)
operator[537]: type(1)
	outputs[0] region(1079,538,538)
operator[538]: type(82)
	inputs[0] region(1075,536,536)
	outputs[0] region(1081,539,539)
operator[539]: type(1)
	outputs[0] region(1083,540,540)
operator[540]: type(1)
	outputs[0] region(1085,541,541)
operator[541]: type(5)
	inputs[0] region(1081,539,539)
	outputs[0] region(1087,542,542)
operator[542]: type(13)
	inputs[0] region(1087,542,542)
	outputs[0] region(1089,543,543)
operator[543]: type(1)
	outputs[0] region(1091,544,544)
operator[544]: type(1)
	outputs[0] region(1093,545,545)
operator[545]: type(5)
	inputs[0] region(1089,543,543)
	outputs[0] region(1095,546,546)
operator[546]: type(31)
	inputs[0] region(1075,536,536)
	inputs[1] region(1095,546,546)
	outputs[0] region(1097,547,547)
operator[547]: type(1)
	outputs[0] region(1099,548,548)
operator[548]: type(1)
	outputs[0] region(1101,549,549)
operator[549]: type(82)
	inputs[0] region(1097,547,547)
	outputs[0] region(1103,550,550)
operator[550]: type(1)
	outputs[0] region(1105,551,551)
operator[551]: type(1)
	outputs[0] region(1107,552,552)
operator[552]: type(90)
	inputs[0] region(1103,550,550)
	outputs[0] region(1109,553,553)
operator[553]: type(31)
	inputs[0] region(1109,553,553)
	inputs[1] region(1097,547,547)
	outputs[0] region(1111,554,554)
operator[554]: type(1)
	outputs[0] region(1113,555,555)
operator[555]: type(1)
	outputs[0] region(1115,556,556)
operator[556]: type(82)
	inputs[0] region(1111,554,554)
	outputs[0] region(1117,557,557)
operator[557]: type(1)
	outputs[0] region(1119,558,558)
operator[558]: type(1)
	outputs[0] region(1121,559,559)
operator[559]: type(5)
	inputs[0] region(1117,557,557)
	outputs[0] region(1123,560,560)
operator[560]: type(13)
	inputs[0] region(1123,560,560)
	outputs[0] region(1125,561,561)
operator[561]: type(1)
	outputs[0] region(1127,562,562)
operator[562]: type(1)
	outputs[0] region(1129,563,563)
operator[563]: type(5)
	inputs[0] region(1125,561,561)
	outputs[0] region(1131,564,564)
operator[564]: type(31)
	inputs[0] region(1111,554,554)
	inputs[1] region(1131,564,564)
	outputs[0] region(1133,565,565)
operator[565]: type(1)
	outputs[0] region(1135,566,566)
operator[566]: type(1)
	outputs[0] region(1137,567,567)
operator[567]: type(82)
	inputs[0] region(1133,565,565)
	outputs[0] region(1139,568,568)
operator[568]: type(1)
	outputs[0] region(1141,569,569)
operator[569]: type(1)
	outputs[0] region(1143,570,570)
operator[570]: type(90)
	inputs[0] region(1139,568,568)
	outputs[0] region(1145,571,571)
operator[571]: type(31)
	inputs[0] region(1145,571,571)
	inputs[1] region(1133,565,565)
	outputs[0] region(1147,572,572)
operator[572]: type(1)
	outputs[0] region(1149,573,573)
operator[573]: type(1)
	outputs[0] region(1151,574,574)
operator[574]: type(82)
	inputs[0] region(1147,572,572)
	outputs[0] region(1153,575,575)
operator[575]: type(1)
	outputs[0] region(1155,576,576)
operator[576]: type(1)
	outputs[0] region(1157,577,577)
operator[577]: type(5)
	inputs[0] region(1153,575,575)
	outputs[0] region(1159,578,578)
operator[578]: type(13)
	inputs[0] region(1159,578,578)
	outputs[0] region(1161,579,579)
operator[579]: type(1)
	outputs[0] region(1163,580,580)
operator[580]: type(1)
	outputs[0] region(1165,581,581)
operator[581]: type(5)
	inputs[0] region(1161,579,579)
	outputs[0] region(1167,582,582)
operator[582]: type(31)
	inputs[0] region(1147,572,572)
	inputs[1] region(1167,582,582)
	outputs[0] region(1169,583,583)
operator[583]: type(1)
	outputs[0] region(1171,584,584)
operator[584]: type(1)
	outputs[0] region(1173,585,585)
operator[585]: type(82)
	inputs[0] region(1169,583,583)
	outputs[0] region(1175,586,586)
operator[586]: type(1)
	outputs[0] region(1177,587,587)
operator[587]: type(5)
	inputs[0] region(1175,586,586)
	outputs[0] region(1179,588,588)
operator[588]: type(87)
	inputs[0] region(1179,588,588)
	outputs[0] region(1181,589,589)
[0 - 7efdc8311000]    2.819155 {3}{Offloading}: Cannot find a previous tensor for operator(0) output_idx(0)
[0 - 7efdc8311000]    2.819183 {3}{Offloading}: Cannot find a previous tensor for operator(1) output_idx(0)
[0 - 7efdc8311000]    2.819190 {3}{Offloading}: Cannot find a previous tensor for operator(3) output_idx(0)
[0 - 7efdc8311000]    2.819207 {3}{Offloading}: Cannot find a previous tensor for operator(5) output_idx(0)
[0 - 7efdc8311000]    2.819226 {3}{Offloading}: Cannot find a previous tensor for operator(6) output_idx(0)
[0 - 7efdc8311000]    2.819353 {3}{Offloading}: Cannot find a previous tensor for operator(19) output_idx(0)
[0 - 7efdc8311000]    2.819373 {3}{Offloading}: Cannot find a previous tensor for operator(20) output_idx(0)
[0 - 7efdc8311000]    2.866362 {3}{Offloading}: Cannot find a previous tensor for operator(587) output_idx(0)
[0 - 7efdc8311000]    2.866382 {3}{Offloading}: Cannot find a previous tensor for operator(588) output_idx(0)
load weights: layers_31_fc2_weight
load weights: layers_31_fc2_weight
load weights: layers_31_fc1_weight
load weights: layers_31_fc1_weight
load weights: layers_31_attention_weight
load weights: layers_31_attention_weight
load weights: layers_30_fc2_weight
load weights: layers_30_fc2_weight
load weights: layers_30_fc1_weight
load weights: layers_30_fc1_weight
load weights: layers_30_final_layer_norm_weight
load weights: layers_30_final_layer_norm_weight
load weights: layers_30_attention_weight
load weights: layers_30_attention_weight
load weights: layers_30_attention_layer_norm_weight
load weights: layers_30_attention_layer_norm_weight
load weights: layers_29_fc1_weight
load weights: layers_29_fc1_weight
load weights: layers_29_final_layer_norm_weight
load weights: layers_29_final_layer_norm_weight
load weights: layers_29_attention_weight
load weights: layers_29_attention_weight
load weights: layers_29_fc2_weight
load weights: layers_29_fc2_weight
load weights: layers_28_fc2_weight
load weights: layers_28_fc2_weight
load weights: layers_28_fc1_weight
load weights: layers_28_fc1_weight
load weights: layers_28_final_layer_norm_weight
load weights: layers_28_final_layer_norm_weight
load weights: layers_28_attention_layer_norm_weight
load weights: layers_28_attention_layer_norm_weight
load weights: layers_27_fc2_weight
load weights: layers_27_fc2_weight
load weights: layers_27_attention_layer_norm_weight
load weights: layers_27_attention_layer_norm_weight
load weights: layers_31_attention_layer_norm_weight
load weights: layers_31_attention_layer_norm_weight
load weights: layers_26_fc2_weight
load weights: layers_26_fc2_weight
load weights: layers_26_final_layer_norm_weight
load weights: layers_26_final_layer_norm_weight
load weights: layers_29_attention_layer_norm_weight
load weights: layers_29_attention_layer_norm_weight
load weights: layers_26_attention_weight
load weights: layers_26_attention_weight
load weights: layers_25_fc1_weight
load weights: layers_25_fc1_weight
load weights: layers_25_attention_weight
load weights: layers_25_attention_weight
load weights: layers_25_attention_layer_norm_weight
load weights: layers_25_attention_layer_norm_weight
load weights: layers_11_attention_weight
load weights: layers_11_attention_weight
load weights: layers_10_attention_weight
load weights: layers_10_attention_weight
load weights: layers_9_attention_layer_norm_weight
load weights: layers_9_attention_layer_norm_weight
load weights: layers_16_attention_layer_norm_weight
load weights: layers_16_attention_layer_norm_weight
load weights: layers_14_attention_layer_norm_weight
load weights: layers_14_attention_layer_norm_weight
load weights: layers_8_attention_weight
load weights: layers_8_attention_weight
load weights: layers_7_attention_layer_norm_weight
load weights: layers_7_attention_layer_norm_weight
load weights: layers_6_final_layer_norm_weight
load weights: layers_6_final_layer_norm_weight
load weights: layers_9_final_layer_norm_weight
load weights: layers_9_final_layer_norm_weight
load weights: layers_3_attention_weight
load weights: layers_3_attention_weight
load weights: layers_6_fc1_weight
load weights: layers_6_fc1_weight
load weights: layers_16_attention_weight
load weights: layers_16_attention_weight
load weights: layers_6_attention_weight
load weights: layers_6_attention_weight
load weights: layers_17_fc2_weight
load weights: layers_17_fc2_weight
load weights: layers_5_final_layer_norm_weight
load weights: layers_5_final_layer_norm_weight
load weights: layers_4_fc1_weight
load weights: layers_4_fc1_weight
load weights: layers_7_final_layer_norm_weight
load weights: layers_7_final_layer_norm_weight
load weights: layers_2_attention_layer_norm_weight
load weights: layers_2_attention_layer_norm_weight
load weights: layers_10_fc2_weight
load weights: layers_10_fc2_weight
load weights: layers_15_attention_layer_norm_weight
load weights: layers_15_attention_layer_norm_weight
load weights: layers_5_fc2_weight
load weights: layers_5_fc2_weight
load weights: layers_10_final_layer_norm_weight
load weights: layers_10_final_layer_norm_weight
load weights: layers_25_fc2_weight
load weights: layers_25_fc2_weight
load weights: layers_22_fc1_weight
load weights: layers_22_fc1_weight
load weights: layers_23_fc1_weight
load weights: layers_23_fc1_weight
load weights: layers_0_final_layer_norm_weight
load weights: layers_0_final_layer_norm_weight
load weights: layers_1_fc1_weight
load weights: layers_1_fc1_weight
load weights: layers_0_attention_weight
load weights: layers_0_attention_weight
load weights: layers_9_fc2_weight
load weights: layers_9_fc2_weight
load weights: layers_3_fc2_weight
load weights: layers_3_fc2_weight
load weights: layers_16_fc1_weight
load weights: layers_16_fc1_weight
load weights: layers_15_attention_weight
load weights: layers_15_attention_weight
load weights: layers_13_fc1_weight
load weights: layers_13_fc1_weight
load weights: layers_1_final_layer_norm_weight
load weights: layers_1_final_layer_norm_weight
load weights: layers_10_fc1_weight
load weights: layers_10_fc1_weight
load weights: layers_6_attention_layer_norm_weight
load weights: layers_6_attention_layer_norm_weight
load weights: embed_tokens_weight
load weights: layers_10_attention_layer_norm_weight
load weights: layers_10_attention_layer_norm_weight
load weights: layers_27_attention_weight
load weights: layers_27_attention_weight
load weights: layers_21_attention_layer_norm_weight
load weights: layers_21_attention_layer_norm_weight
load weights: layers_9_fc1_weight
load weights: layers_9_fc1_weight
load weights: layers_6_fc2_weight
load weights: layers_6_fc2_weight
load weights: layers_26_fc1_weight
load weights: layers_26_fc1_weight
load weights: layers_2_attention_weight
load weights: layers_2_attention_weight
load weights: layers_2_fc2_weight
load weights: layers_2_fc2_weight
load weights: layers_27_fc1_weight
load weights: layers_27_fc1_weight
load weights: layers_7_fc2_weight
load weights: layers_7_fc2_weight
load weights: layers_14_attention_weight
load weights: layers_14_attention_weight
load weights: layers_26_attention_layer_norm_weight
load weights: layers_26_attention_layer_norm_weight
load weights: embed_positions_weight
load weights: layers_4_attention_weight
load weights: layers_4_attention_weight
load weights: layers_2_final_layer_norm_weight
load weights: layers_2_final_layer_norm_weight
load weights: layers_21_final_layer_norm_weight
load weights: layers_21_final_layer_norm_weight
load weights: layers_8_final_layer_norm_weight
load weights: layers_8_final_layer_norm_weight
load weights: layers_1_fc2_weight
load weights: layers_1_fc2_weight
load weights: layers_0_fc1_weight
load weights: layers_0_fc1_weight
load weights: layers_5_attention_layer_norm_weight
load weights: layers_5_attention_layer_norm_weight
load weights: layers_2_fc1_weight
load weights: layers_2_fc1_weight
load weights: embed_tokens_weight_lm_head
load weights: layers_0_fc2_weight
load weights: layers_0_fc2_weight
load weights: layers_8_attention_layer_norm_weight
load weights: layers_8_attention_layer_norm_weight
load weights: layers_18_final_layer_norm_weight
load weights: layers_18_final_layer_norm_weight
load weights: layers_9_attention_weight
load weights: layers_9_attention_weight
load weights: layers_7_fc1_weight
load weights: layers_7_fc1_weight
load weights: layers_3_attention_layer_norm_weight
load weights: layers_3_attention_layer_norm_weight
load weights: layers_22_final_layer_norm_weight
load weights: layers_22_final_layer_norm_weight
load weights: layers_23_fc2_weight
load weights: layers_23_fc2_weight
load weights: layers_20_final_layer_norm_weight
load weights: layers_20_final_layer_norm_weight
load weights: layers_1_attention_layer_norm_weight
load weights: layers_1_attention_layer_norm_weight
load weights: layers_5_fc1_weight
load weights: layers_5_fc1_weight
load weights: layers_31_final_layer_norm_weight
load weights: layers_31_final_layer_norm_weight
load weights: layers_17_attention_weight
load weights: layers_17_attention_weight
load weights: layers_28_attention_weight
load weights: layers_28_attention_weight
load weights: layers_20_fc1_weight
load weights: layers_20_fc1_weight
load weights: layers_7_attention_weight
load weights: layers_7_attention_weight
load weights: layers_20_attention_layer_norm_weight
load weights: layers_20_attention_layer_norm_weight
load weights: layers_22_attention_weight
load weights: layers_22_attention_weight
load weights: layers_1_attention_weight
load weights: layers_1_attention_weight
load weights: layers_12_attention_weight
load weights: layers_12_attention_weight
load weights: layers_3_final_layer_norm_weight
load weights: layers_3_final_layer_norm_weight
load weights: layers_3_fc1_weight
load weights: layers_3_fc1_weight
load weights: layers_27_final_layer_norm_weight
load weights: layers_27_final_layer_norm_weight
load weights: layers_4_final_layer_norm_weight
load weights: layers_4_final_layer_norm_weight
load weights: layers_4_fc2_weight
load weights: layers_4_fc2_weight
load weights: layers_18_attention_weight
load weights: layers_18_attention_weight
load weights: layers_23_attention_layer_norm_weight
load weights: layers_23_attention_layer_norm_weight
load weights: layers_11_final_layer_norm_weight
load weights: layers_11_final_layer_norm_weight
load weights: layers_24_fc2_weight
load weights: layers_24_fc2_weight
load weights: layers_11_fc1_weight
load weights: layers_11_fc1_weight
load weights: layers_22_fc2_weight
load weights: layers_22_fc2_weight
load weights: final_layer_norm_weight
load weights: final_layer_norm_weight
load weights: layers_11_fc2_weight
load weights: layers_11_fc2_weight
load weights: layers_15_final_layer_norm_weight
load weights: layers_15_final_layer_norm_weight
load weights: layers_12_final_layer_norm_weight
load weights: layers_12_final_layer_norm_weight
load weights: layers_12_fc1_weight
load weights: layers_12_fc1_weight
load weights: layers_12_fc2_weight
load weights: layers_12_fc2_weight
load weights: layers_13_final_layer_norm_weight
load weights: layers_13_final_layer_norm_weight
load weights: layers_14_final_layer_norm_weight
load weights: layers_14_final_layer_norm_weight
load weights: layers_13_attention_layer_norm_weight
load weights: layers_13_attention_layer_norm_weight
load weights: layers_8_fc1_weight
load weights: layers_8_fc1_weight
load weights: layers_8_fc2_weight
load weights: layers_8_fc2_weight
load weights: layers_23_final_layer_norm_weight
load weights: layers_23_final_layer_norm_weight
load weights: layers_13_attention_weight
load weights: layers_13_attention_weight
load weights: layers_13_fc2_weight
load weights: layers_13_fc2_weight
load weights: layers_14_fc1_weight
load weights: layers_14_fc1_weight
load weights: layers_17_final_layer_norm_weight
load weights: layers_17_final_layer_norm_weight
load weights: layers_18_attention_layer_norm_weight
load weights: layers_18_attention_layer_norm_weight
load weights: layers_14_fc2_weight
load weights: layers_14_fc2_weight
load weights: layers_20_fc2_weight
load weights: layers_20_fc2_weight
load weights: layers_15_fc1_weight
load weights: layers_15_fc1_weight
load weights: layers_15_fc2_weight
load weights: layers_15_fc2_weight
load weights: layers_16_final_layer_norm_weight
load weights: layers_16_final_layer_norm_weight
load weights: layers_16_fc2_weight
load weights: layers_16_fc2_weight
load weights: layers_17_attention_layer_norm_weight
load weights: layers_17_attention_layer_norm_weight
load weights: layers_19_final_layer_norm_weight
load weights: layers_19_final_layer_norm_weight
load weights: layers_20_attention_weight
load weights: layers_20_attention_weight
load weights: layers_17_fc1_weight
load weights: layers_17_fc1_weight
load weights: layers_0_attention_layer_norm_weight
load weights: layers_0_attention_layer_norm_weight
load weights: layers_18_fc1_weight
load weights: layers_18_fc1_weight
load weights: layers_18_fc2_weight
load weights: layers_18_fc2_weight
load weights: layers_21_fc1_weight
load weights: layers_21_fc1_weight
load weights: layers_19_attention_layer_norm_weight
load weights: layers_19_attention_layer_norm_weight
load weights: layers_22_attention_layer_norm_weight
load weights: layers_22_attention_layer_norm_weight
load weights: layers_19_fc1_weight
load weights: layers_19_fc1_weight
load weights: layers_5_attention_weight
load weights: layers_5_attention_weight
load weights: layers_19_fc2_weight
load weights: layers_19_fc2_weight
load weights: layers_25_final_layer_norm_weight
load weights: layers_25_final_layer_norm_weight
load weights: layers_11_attention_layer_norm_weight
load weights: layers_11_attention_layer_norm_weight
load weights: layers_4_attention_layer_norm_weight
load weights: layers_4_attention_layer_norm_weight
load weights: layers_24_attention_weight
load weights: layers_24_attention_weight
load weights: layers_21_attention_weight
load weights: layers_21_attention_weight
load weights: layers_19_attention_weight
load weights: layers_19_attention_weight
load weights: layers_21_fc2_weight
load weights: layers_21_fc2_weight
load weights: layers_23_attention_weight
load weights: layers_23_attention_weight
load weights: layers_12_attention_layer_norm_weight
load weights: layers_12_attention_layer_norm_weight
load weights: layers_24_attention_layer_norm_weight
load weights: layers_24_attention_layer_norm_weight
load weights: layers_24_final_layer_norm_weight
load weights: layers_24_final_layer_norm_weight
load weights: layers_24_fc1_weight
load weights: layers_24_fc1_weight
------finished loading weights----------
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(16384) batch_size(64)
init linear (input): in_dim(16384) out_dim(4096) batch_size(64)
init linear (input): in_dim(4096) out_dim(50272) batch_size(64)
OPT Config:
vocab_size: 50272
word_embed_proj_dim: 768
hidden_size: 768
num_attention_heads: 12
max_position_embeddings: 2048
layer_norm_elementwise_affine: true
dropout: 0.1
ffn_dim: 3072
num_hidden_layers: 12
max_beam_width: 1
batchSize: 8
sentence_len: 100
max_beam_depth: 4
------start compile ----------
spec create operator: SpecIncMultiHeadSelfAttention_1000006
spec create operator: SpecIncMultiHeadSelfAttention_1000014
spec create operator: SpecIncMultiHeadSelfAttention_1000022
spec create operator: SpecIncMultiHeadSelfAttention_1000030
spec create operator: SpecIncMultiHeadSelfAttention_1000038
spec create operator: SpecIncMultiHeadSelfAttention_1000046
spec create operator: SpecIncMultiHeadSelfAttention_1000054
spec create operator: SpecIncMultiHeadSelfAttention_1000062
spec create operator: SpecIncMultiHeadSelfAttention_1000070
spec create operator: SpecIncMultiHeadSelfAttention_1000078
spec create operator: SpecIncMultiHeadSelfAttention_1000086
spec create operator: SpecIncMultiHeadSelfAttention_1000094
num_nodes = 1 num_gpus_per_node = 1
optimal_views.size = 105
views.size() = 105
Deserialized Views...
node[5000164]: type(Dense_5000164) view(1 1 0)  inEdge(node(5000163) idx(0))
node[5000165]: type(Add_5000165) view(1 1 0)  inEdge(node(5000164) idx(0)) inEdge(node(5000160) idx(0))
node[5000166]: type(LayerNorm_5000166) view(1 1 0)  inEdge(node(5000165) idx(0))
node[5000167]: type(SpecIncMultiHeadSelfAttention_5000167) view(1 1 0)  inEdge(node(5000166) idx(0))
node[5000168]: type(Add_5000168) view(1 1 0)  inEdge(node(5000165) idx(0)) inEdge(node(5000167) idx(0))
node[5000169]: type(LayerNorm_5000169) view(1 1 0)  inEdge(node(5000168) idx(0))
node[5000170]: type(Dense_5000170) view(1 1 0)  inEdge(node(5000169) idx(0))
node[5000171]: type(ReLU_5000171) view(1 1 0)  inEdge(node(5000170) idx(0))
node[5000172]: type(Dense_5000172) view(1 1 0)  inEdge(node(5000171) idx(0))
node[5000173]: type(Add_5000173) view(1 1 0)  inEdge(node(5000172) idx(0)) inEdge(node(5000168) idx(0))
node[5000174]: type(LayerNorm_5000174) view(1 1 0)  inEdge(node(5000173) idx(0))
node[5000175]: type(SpecIncMultiHeadSelfAttention_5000175) view(1 1 0)  inEdge(node(5000174) idx(0))
node[5000176]: type(Add_5000176) view(1 1 0)  inEdge(node(5000173) idx(0)) inEdge(node(5000175) idx(0))
node[5000177]: type(LayerNorm_5000177) view(1 1 0)  inEdge(node(5000176) idx(0))
node[5000178]: type(Dense_5000178) view(1 1 0)  inEdge(node(5000177) idx(0))
node[5000179]: type(ReLU_5000179) view(1 1 0)  inEdge(node(5000178) idx(0))
node[5000121]: type(LayerNorm_5000121) view(1 1 0)  inEdge(node(5000120) idx(0))
node[5000180]: type(Dense_5000180) view(1 1 0)  inEdge(node(5000179) idx(0))
node[5000197]: type(Add_5000197) view(1 1 0)  inEdge(node(5000196) idx(0)) inEdge(node(5000192) idx(0))
node[5000198]: type(LayerNorm_5000198) view(1 1 0)  inEdge(node(5000197) idx(0))
node[5000199]: type(SpecIncMultiHeadSelfAttention_5000199) view(1 1 0)  inEdge(node(5000198) idx(0))
node[5000200]: type(Add_5000200) view(1 1 0)  inEdge(node(5000197) idx(0)) inEdge(node(5000199) idx(0))
node[5000201]: type(LayerNorm_5000201) view(1 1 0)  inEdge(node(5000200) idx(0))
node[5000202]: type(Dense_5000202) view(1 1 0)  inEdge(node(5000201) idx(0))
node[5000203]: type(ReLU_5000203) view(1 1 0)  inEdge(node(5000202) idx(0))
node[5000204]: type(Dense_5000204) view(1 1 0)  inEdge(node(5000203) idx(0))
node[5000205]: type(Add_5000205) view(1 1 0)  inEdge(node(5000204) idx(0)) inEdge(node(5000200) idx(0))
node[5000206]: type(LayerNorm_5000206) view(1 1 0)  inEdge(node(5000205) idx(0))
node[5000207]: type(Dense_5000207) view(1 1 0)  inEdge(node(5000206) idx(0))
node[5000208]: type(Softmax_5000208) view(1 1 0)  inEdge(node(5000207) idx(0))
node[5000209]: type(ArgMax_5000209) view(1 1 0)  inEdge(node(5000208) idx(0))
node[5000196]: type(Dense_5000196) view(1 1 0)  inEdge(node(5000195) idx(0))
node[5000195]: type(ReLU_5000195) view(1 1 0)  inEdge(node(5000194) idx(0))
node[5000194]: type(Dense_5000194) view(1 1 0)  inEdge(node(5000193) idx(0))
node[5000193]: type(LayerNorm_5000193) view(1 1 0)  inEdge(node(5000192) idx(0))
node[5000133]: type(Add_5000133) view(1 1 0)  inEdge(node(5000132) idx(0)) inEdge(node(5000128) idx(0))
node[5000192]: type(Add_5000192) view(1 1 0)  inEdge(node(5000189) idx(0)) inEdge(node(5000191) idx(0))
node[5000132]: type(Dense_5000132) view(1 1 0)  inEdge(node(5000131) idx(0))
node[5000191]: type(SpecIncMultiHeadSelfAttention_5000191) view(1 1 0)  inEdge(node(5000190) idx(0))
node[5000131]: type(ReLU_5000131) view(1 1 0)  inEdge(node(5000130) idx(0))
node[5000190]: type(LayerNorm_5000190) view(1 1 0)  inEdge(node(5000189) idx(0))
node[5000130]: type(Dense_5000130) view(1 1 0)  inEdge(node(5000129) idx(0))
node[5000189]: type(Add_5000189) view(1 1 0)  inEdge(node(5000188) idx(0)) inEdge(node(5000184) idx(0))
node[5000129]: type(LayerNorm_5000129) view(1 1 0)  inEdge(node(5000128) idx(0))
node[5000188]: type(Dense_5000188) view(1 1 0)  inEdge(node(5000187) idx(0))
node[5000128]: type(Add_5000128) view(1 1 0)  inEdge(node(5000125) idx(0)) inEdge(node(5000127) idx(0))
node[5000135]: type(SpecIncMultiHeadSelfAttention_5000135) view(1 1 0)  inEdge(node(5000134) idx(0))
node[5000136]: type(Add_5000136) view(1 1 0)  inEdge(node(5000133) idx(0)) inEdge(node(5000135) idx(0))
node[5000137]: type(LayerNorm_5000137) view(1 1 0)  inEdge(node(5000136) idx(0))
node[5000138]: type(Dense_5000138) view(1 1 0)  inEdge(node(5000137) idx(0))
node[5000139]: type(ReLU_5000139) view(1 1 0)  inEdge(node(5000138) idx(0))
node[5000140]: type(Dense_5000140) view(1 1 0)  inEdge(node(5000139) idx(0))
node[5000141]: type(Add_5000141) view(1 1 0)  inEdge(node(5000140) idx(0)) inEdge(node(5000136) idx(0))
node[5000142]: type(LayerNorm_5000142) view(1 1 0)  inEdge(node(5000141) idx(0))
node[5000143]: type(SpecIncMultiHeadSelfAttention_5000143) view(1 1 0)  inEdge(node(5000142) idx(0))
node[5000144]: type(Add_5000144) view(1 1 0)  inEdge(node(5000141) idx(0)) inEdge(node(5000143) idx(0))
node[5000145]: type(LayerNorm_5000145) view(1 1 0)  inEdge(node(5000144) idx(0))
node[5000146]: type(Dense_5000146) view(1 1 0)  inEdge(node(5000145) idx(0))
node[5000147]: type(ReLU_5000147) view(1 1 0)  inEdge(node(5000146) idx(0))
node[5000148]: type(Dense_5000148) view(1 1 0)  inEdge(node(5000147) idx(0))
node[5000149]: type(Add_5000149) view(1 1 0)  inEdge(node(5000148) idx(0)) inEdge(node(5000144) idx(0))
node[5000150]: type(LayerNorm_5000150) view(1 1 0)  inEdge(node(5000149) idx(0))
node[5000163]: type(ReLU_5000163) view(1 1 0)  inEdge(node(5000162) idx(0))
node[5000162]: type(Dense_5000162) view(1 1 0)  inEdge(node(5000161) idx(0))
node[5000161]: type(LayerNorm_5000161) view(1 1 0)  inEdge(node(5000160) idx(0))
node[5000160]: type(Add_5000160) view(1 1 0)  inEdge(node(5000157) idx(0)) inEdge(node(5000159) idx(0))
node[5000159]: type(SpecIncMultiHeadSelfAttention_5000159) view(1 1 0)  inEdge(node(5000158) idx(0))
node[5000158]: type(LayerNorm_5000158) view(1 1 0)  inEdge(node(5000157) idx(0))
node[5000157]: type(Add_5000157) view(1 1 0)  inEdge(node(5000156) idx(0)) inEdge(node(5000152) idx(0))
node[5000156]: type(Dense_5000156) view(1 1 0)  inEdge(node(5000155) idx(0))
node[5000155]: type(ReLU_5000155) view(1 1 0)  inEdge(node(5000154) idx(0))
node[5000154]: type(Dense_5000154) view(1 1 0)  inEdge(node(5000153) idx(0))
node[5000153]: type(LayerNorm_5000153) view(1 1 0)  inEdge(node(5000152) idx(0))
node[5000152]: type(Add_5000152) view(1 1 0)  inEdge(node(5000149) idx(0)) inEdge(node(5000151) idx(0))
node[5000151]: type(SpecIncMultiHeadSelfAttention_5000151) view(1 1 0)  inEdge(node(5000150) idx(0))
node[5000134]: type(LayerNorm_5000134) view(1 1 0)  inEdge(node(5000133) idx(0))
node[5000117]: type(Add_5000117) view(1 1 0)  inEdge(node(5000116) idx(0)) inEdge(node(5000112) idx(0))
node[5000116]: type(Dense_5000116) view(1 1 0)  inEdge(node(5000115) idx(0))
node[5000115]: type(ReLU_5000115) view(1 1 0)  inEdge(node(5000114) idx(0))
node[5000114]: type(Dense_5000114) view(1 1 0)  inEdge(node(5000113) idx(0))
node[5000113]: type(LayerNorm_5000113) view(1 1 0)  inEdge(node(5000112) idx(0))
node[5000112]: type(Add_5000112) view(1 1 0)  inEdge(node(5000109) idx(0)) inEdge(node(5000111) idx(0))
node[5000111]: type(SpecIncMultiHeadSelfAttention_5000111) view(1 1 0)  inEdge(node(5000110) idx(0))
node[5000110]: type(LayerNorm_5000110) view(1 1 0)  inEdge(node(5000109) idx(0))
node[5000109]: type(Add_5000109) view(1 1 0)  inEdge(node(5000108) idx(0)) inEdge(node(5000107) idx(0))
node[5000106]: type(Input_5000106) view(1 1 0) 
node[5000108]: type(Embedding_5000108) view(1 1 0)  inEdge(node(5000106) idx(0))
node[5000105]: type(Input_5000105) view(1 1 0) 
node[5000107]: type(Embedding_5000107) view(1 1 0)  inEdge(node(5000105) idx(0))
node[5000118]: type(LayerNorm_5000118) view(1 1 0)  inEdge(node(5000117) idx(0))
node[5000119]: type(SpecIncMultiHeadSelfAttention_5000119) view(1 1 0)  inEdge(node(5000118) idx(0))
node[5000120]: type(Add_5000120) view(1 1 0)  inEdge(node(5000117) idx(0)) inEdge(node(5000119) idx(0))
node[5000181]: type(Add_5000181) view(1 1 0)  inEdge(node(5000180) idx(0)) inEdge(node(5000176) idx(0))
node[5000122]: type(Dense_5000122) view(1 1 0)  inEdge(node(5000121) idx(0))
node[5000182]: type(LayerNorm_5000182) view(1 1 0)  inEdge(node(5000181) idx(0))
node[5000123]: type(ReLU_5000123) view(1 1 0)  inEdge(node(5000122) idx(0))
node[5000183]: type(SpecIncMultiHeadSelfAttention_5000183) view(1 1 0)  inEdge(node(5000182) idx(0))
node[5000124]: type(Dense_5000124) view(1 1 0)  inEdge(node(5000123) idx(0))
node[5000184]: type(Add_5000184) view(1 1 0)  inEdge(node(5000181) idx(0)) inEdge(node(5000183) idx(0))
node[5000125]: type(Add_5000125) view(1 1 0)  inEdge(node(5000124) idx(0)) inEdge(node(5000120) idx(0))
node[5000185]: type(LayerNorm_5000185) view(1 1 0)  inEdge(node(5000184) idx(0))
node[5000126]: type(LayerNorm_5000126) view(1 1 0)  inEdge(node(5000125) idx(0))
node[5000186]: type(Dense_5000186) view(1 1 0)  inEdge(node(5000185) idx(0))
node[5000127]: type(SpecIncMultiHeadSelfAttention_5000127) view(1 1 0)  inEdge(node(5000126) idx(0))
node[5000187]: type(ReLU_5000187) view(1 1 0)  inEdge(node(5000186) idx(0))
digraph taskgraph {
  node0 [label="{ ReLU_5000163 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node1 -> node0;
  node1 [label="{ Dense_5000162 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node2 -> node1;
  node2 [label="{ LayerNorm_5000161 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node3 -> node2;
  node3 [label="{ Add_5000160 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node4 -> node3;
  node5 -> node3;
  node4 [label="{ SpecIncMultiHeadSelfAttention_5000159 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node6 -> node4;
  node6 [label="{ LayerNorm_5000158 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node5 -> node6;
  node5 [label="{ Add_5000157 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node7 -> node5;
  node8 -> node5;
  node8 [label="{ Dense_5000156 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node9 -> node8;
  node9 [label="{ ReLU_5000155 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node10 -> node9;
  node10 [label="{ Dense_5000154 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node11 -> node10;
  node11 [label="{ LayerNorm_5000153 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node7 -> node11;
  node7 [label="{ Add_5000152 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node12 -> node7;
  node13 -> node7;
  node12 [label="{ SpecIncMultiHeadSelfAttention_5000151 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node14 -> node12;
  node14 [label="{ LayerNorm_5000150 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node13 -> node14;
  node13 [label="{ Add_5000149 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node15 -> node13;
  node16 -> node13;
  node16 [label="{ Dense_5000148 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node17 -> node16;
  node17 [label="{ ReLU_5000147 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node18 -> node17;
  node18 [label="{ Dense_5000146 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node19 -> node18;
  node19 [label="{ LayerNorm_5000145 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node15 -> node19;
  node15 [label="{ Add_5000144 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node20 -> node15;
  node21 -> node15;
  node20 [label="{ SpecIncMultiHeadSelfAttention_5000143 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node22 -> node20;
  node22 [label="{ LayerNorm_5000142 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node21 -> node22;
  node21 [label="{ Add_5000141 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node23 -> node21;
  node24 -> node21;
  node24 [label="{ Dense_5000140 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node25 -> node24;
  node25 [label="{ ReLU_5000139 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node26 -> node25;
  node26 [label="{ Dense_5000138 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node27 -> node26;
  node27 [label="{ LayerNorm_5000137 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node23 -> node27;
  node23 [label="{ Add_5000136 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node28 -> node23;
  node29 -> node23;
  node28 [label="{ SpecIncMultiHeadSelfAttention_5000135 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node30 -> node28;
  node30 [label="{ LayerNorm_5000134 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node29 -> node30;
  node31 [label="{ Add_5000117 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node32 -> node31;
  node33 -> node31;
  node33 [label="{ Dense_5000116 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node34 -> node33;
  node34 [label="{ ReLU_5000115 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node35 -> node34;
  node35 [label="{ Dense_5000114 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node36 -> node35;
  node36 [label="{ LayerNorm_5000113 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node32 -> node36;
  node32 [label="{ Add_5000112 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node37 -> node32;
  node38 -> node32;
  node37 [label="{ SpecIncMultiHeadSelfAttention_5000111 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node39 -> node37;
  node39 [label="{ LayerNorm_5000110 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node38 -> node39;
  node38 [label="{ Add_5000109 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node40 -> node38;
  node41 -> node38;
  node41 [label="{ Embedding_5000108 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node42 -> node41;
  node42 [label="{ Input_5000106 | { shape([ 1/1 64/1 1/1 ]) } }",shape=record];
  node40 [label="{ Embedding_5000107 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node43 -> node40;
  node43 [label="{ Input_5000105 | { shape([ 1/1 64/1 1/1 ]) } }",shape=record];
  node44 [label="{ LayerNorm_5000118 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node31 -> node44;
  node45 [label="{ SpecIncMultiHeadSelfAttention_5000119 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node44 -> node45;
  node46 [label="{ Add_5000120 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node45 -> node46;
  node31 -> node46;
  node47 [label="{ Add_5000181 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node48 -> node47;
  node49 -> node47;
  node50 [label="{ Dense_5000122 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node51 -> node50;
  node52 [label="{ LayerNorm_5000182 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node47 -> node52;
  node53 [label="{ ReLU_5000123 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node50 -> node53;
  node54 [label="{ SpecIncMultiHeadSelfAttention_5000183 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node52 -> node54;
  node55 [label="{ Dense_5000124 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node53 -> node55;
  node56 [label="{ Add_5000184 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node54 -> node56;
  node47 -> node56;
  node57 [label="{ Add_5000125 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node46 -> node57;
  node55 -> node57;
  node58 [label="{ LayerNorm_5000185 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node56 -> node58;
  node59 [label="{ LayerNorm_5000126 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node57 -> node59;
  node60 [label="{ Dense_5000186 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node58 -> node60;
  node61 [label="{ SpecIncMultiHeadSelfAttention_5000127 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node59 -> node61;
  node62 [label="{ ReLU_5000187 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node60 -> node62;
  node63 [label="{ Add_5000128 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node61 -> node63;
  node57 -> node63;
  node64 [label="{ Dense_5000188 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node62 -> node64;
  node65 [label="{ LayerNorm_5000129 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node63 -> node65;
  node66 [label="{ Add_5000189 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node56 -> node66;
  node64 -> node66;
  node67 [label="{ Dense_5000130 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node65 -> node67;
  node68 [label="{ LayerNorm_5000190 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node66 -> node68;
  node69 [label="{ ReLU_5000131 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node67 -> node69;
  node70 [label="{ SpecIncMultiHeadSelfAttention_5000191 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node68 -> node70;
  node71 [label="{ Dense_5000132 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node69 -> node71;
  node72 [label="{ Add_5000192 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node70 -> node72;
  node66 -> node72;
  node29 [label="{ Add_5000133 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node63 -> node29;
  node71 -> node29;
  node73 [label="{ LayerNorm_5000193 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node72 -> node73;
  node74 [label="{ Dense_5000194 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node73 -> node74;
  node75 [label="{ ReLU_5000195 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node74 -> node75;
  node76 [label="{ Dense_5000196 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node75 -> node76;
  node77 [label="{ ArgMax_5000209 }",shape=record];
  node78 -> node77;
  node78 [label="{ Softmax_5000208 | { 50272/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node79 -> node78;
  node79 [label="{ Dense_5000207 | { 50272/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node80 -> node79;
  node80 [label="{ LayerNorm_5000206 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node81 -> node80;
  node81 [label="{ Add_5000205 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node82 -> node81;
  node83 -> node81;
  node83 [label="{ Dense_5000204 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node84 -> node83;
  node84 [label="{ ReLU_5000203 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node85 -> node84;
  node85 [label="{ Dense_5000202 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node86 -> node85;
  node86 [label="{ LayerNorm_5000201 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node82 -> node86;
  node82 [label="{ Add_5000200 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node87 -> node82;
  node88 -> node82;
  node87 [label="{ SpecIncMultiHeadSelfAttention_5000199 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node89 -> node87;
  node89 [label="{ LayerNorm_5000198 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node88 -> node89;
  node88 [label="{ Add_5000197 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node72 -> node88;
  node76 -> node88;
  node49 [label="{ Dense_5000180 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node90 -> node49;
  node51 [label="{ LayerNorm_5000121 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node46 -> node51;
  node90 [label="{ ReLU_5000179 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node91 -> node90;
  node91 [label="{ Dense_5000178 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node92 -> node91;
  node92 [label="{ LayerNorm_5000177 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node48 -> node92;
  node48 [label="{ Add_5000176 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node93 -> node48;
  node94 -> node48;
  node93 [label="{ SpecIncMultiHeadSelfAttention_5000175 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node95 -> node93;
  node95 [label="{ LayerNorm_5000174 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node94 -> node95;
  node94 [label="{ Add_5000173 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node96 -> node94;
  node97 -> node94;
  node97 [label="{ Dense_5000172 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node98 -> node97;
  node98 [label="{ ReLU_5000171 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node99 -> node98;
  node99 [label="{ Dense_5000170 | { 3072/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node100 -> node99;
  node100 [label="{ LayerNorm_5000169 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node96 -> node100;
  node96 [label="{ Add_5000168 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node101 -> node96;
  node102 -> node96;
  node101 [label="{ SpecIncMultiHeadSelfAttention_5000167 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node103 -> node101;
  node103 [label="{ LayerNorm_5000166 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node102 -> node103;
  node102 [label="{ Add_5000165 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node3 -> node102;
  node104 -> node102;
  node104 [label="{ Dense_5000164 | { 768/1 | 1/1 | 64/1 | 1/1 } }",shape=record];
  node0 -> node104;
}
ndim(1) dims[1 0 0 0]
operator[0]: type(0)
	outputs[0] region(1184,590,599)
operator[1]: type(0)
	outputs[0] region(1186,591,600)
operator[2]: type(1)
	outputs[0] region(1188,592,601)
operator[3]: type(23)
	inputs[0] region(1184,590,599)
	outputs[0] region(1190,593,602)
operator[4]: type(1)
	outputs[0] region(1192,594,603)
operator[5]: type(23)
	inputs[0] region(1186,591,600)
	outputs[0] region(1194,595,604)
operator[6]: type(31)
	inputs[0] region(1190,593,602)
	inputs[1] region(1194,595,604)
	outputs[0] region(1196,596,605)
operator[7]: type(1)
	outputs[0] region(1198,597,606)
operator[8]: type(1)
	outputs[0] region(1200,598,607)
operator[9]: type(82)
	inputs[0] region(1196,596,605)
	outputs[0] region(1202,599,608)
operator[10]: type(1)
	outputs[0] region(1204,600,609)
operator[11]: type(1)
	outputs[0] region(1206,601,610)
operator[12]: type(89)
	inputs[0] region(1202,599,608)
	outputs[0] region(1208,602,611)
operator[13]: type(31)
	inputs[0] region(1208,602,611)
	inputs[1] region(1196,596,605)
	outputs[0] region(1210,603,612)
operator[14]: type(1)
	outputs[0] region(1212,604,613)
operator[15]: type(1)
	outputs[0] region(1214,605,614)
operator[16]: type(82)
	inputs[0] region(1210,603,612)
	outputs[0] region(1216,606,615)
operator[17]: type(1)
	outputs[0] region(1218,607,616)
operator[18]: type(1)
	outputs[0] region(1220,608,617)
operator[19]: type(5)
	inputs[0] region(1216,606,615)
	outputs[0] region(1222,609,618)
operator[20]: type(13)
	inputs[0] region(1222,609,618)
	outputs[0] region(1224,610,619)
operator[21]: type(1)
	outputs[0] region(1226,611,620)
operator[22]: type(1)
	outputs[0] region(1228,612,621)
operator[23]: type(5)
	inputs[0] region(1224,610,619)
	outputs[0] region(1230,613,622)
operator[24]: type(31)
	inputs[0] region(1210,603,612)
	inputs[1] region(1230,613,622)
	outputs[0] region(1232,614,623)
operator[25]: type(1)
	outputs[0] region(1234,615,624)
operator[26]: type(1)
	outputs[0] region(1236,616,625)
operator[27]: type(82)
	inputs[0] region(1232,614,623)
	outputs[0] region(1238,617,626)
operator[28]: type(1)
	outputs[0] region(1240,618,627)
operator[29]: type(1)
	outputs[0] region(1242,619,628)
operator[30]: type(89)
	inputs[0] region(1238,617,626)
	outputs[0] region(1244,620,629)
operator[31]: type(31)
	inputs[0] region(1244,620,629)
	inputs[1] region(1232,614,623)
	outputs[0] region(1246,621,630)
operator[32]: type(1)
	outputs[0] region(1248,622,631)
operator[33]: type(1)
	outputs[0] region(1250,623,632)
operator[34]: type(82)
	inputs[0] region(1246,621,630)
	outputs[0] region(1252,624,633)
operator[35]: type(1)
	outputs[0] region(1254,625,634)
operator[36]: type(1)
	outputs[0] region(1256,626,635)
operator[37]: type(5)
	inputs[0] region(1252,624,633)
	outputs[0] region(1258,627,636)
operator[38]: type(13)
	inputs[0] region(1258,627,636)
	outputs[0] region(1260,628,637)
operator[39]: type(1)
	outputs[0] region(1262,629,638)
operator[40]: type(1)
	outputs[0] region(1264,630,639)
operator[41]: type(5)
	inputs[0] region(1260,628,637)
	outputs[0] region(1266,631,640)
operator[42]: type(31)
	inputs[0] region(1246,621,630)
	inputs[1] region(1266,631,640)
	outputs[0] region(1268,632,641)
operator[43]: type(1)
	outputs[0] region(1270,633,642)
operator[44]: type(1)
	outputs[0] region(1272,634,643)
operator[45]: type(82)
	inputs[0] region(1268,632,641)
	outputs[0] region(1274,635,644)
operator[46]: type(1)
	outputs[0] region(1276,636,645)
operator[47]: type(1)
	outputs[0] region(1278,637,646)
operator[48]: type(89)
	inputs[0] region(1274,635,644)
	outputs[0] region(1280,638,647)
operator[49]: type(31)
	inputs[0] region(1280,638,647)
	inputs[1] region(1268,632,641)
	outputs[0] region(1282,639,648)
operator[50]: type(1)
	outputs[0] region(1284,640,649)
operator[51]: type(1)
	outputs[0] region(1286,641,650)
operator[52]: type(82)
	inputs[0] region(1282,639,648)
	outputs[0] region(1288,642,651)
operator[53]: type(1)
	outputs[0] region(1290,643,652)
operator[54]: type(1)
	outputs[0] region(1292,644,653)
operator[55]: type(5)
	inputs[0] region(1288,642,651)
	outputs[0] region(1294,645,654)
operator[56]: type(13)
	inputs[0] region(1294,645,654)
	outputs[0] region(1296,646,655)
operator[57]: type(1)
	outputs[0] region(1298,647,656)
operator[58]: type(1)
	outputs[0] region(1300,648,657)
operator[59]: type(5)
	inputs[0] region(1296,646,655)
	outputs[0] region(1302,649,658)
operator[60]: type(31)
	inputs[0] region(1282,639,648)
	inputs[1] region(1302,649,658)
	outputs[0] region(1304,650,659)
operator[61]: type(1)
	outputs[0] region(1306,651,660)
operator[62]: type(1)
	outputs[0] region(1308,652,661)
operator[63]: type(82)
	inputs[0] region(1304,650,659)
	outputs[0] region(1310,653,662)
operator[64]: type(1)
	outputs[0] region(1312,654,663)
operator[65]: type(1)
	outputs[0] region(1314,655,664)
operator[66]: type(89)
	inputs[0] region(1310,653,662)
	outputs[0] region(1316,656,665)
operator[67]: type(31)
	inputs[0] region(1316,656,665)
	inputs[1] region(1304,650,659)
	outputs[0] region(1318,657,666)
operator[68]: type(1)
	outputs[0] region(1320,658,667)
operator[69]: type(1)
	outputs[0] region(1322,659,668)
operator[70]: type(82)
	inputs[0] region(1318,657,666)
	outputs[0] region(1324,660,669)
operator[71]: type(1)
	outputs[0] region(1326,661,670)
operator[72]: type(1)
	outputs[0] region(1328,662,671)
operator[73]: type(5)
	inputs[0] region(1324,660,669)
	outputs[0] region(1330,663,672)
operator[74]: type(13)
	inputs[0] region(1330,663,672)
	outputs[0] region(1332,664,673)
operator[75]: type(1)
	outputs[0] region(1334,665,674)
operator[76]: type(1)
	outputs[0] region(1336,666,675)
operator[77]: type(5)
	inputs[0] region(1332,664,673)
	outputs[0] region(1338,667,676)
operator[78]: type(31)
	inputs[0] region(1318,657,666)
	inputs[1] region(1338,667,676)
	outputs[0] region(1340,668,677)
operator[79]: type(1)
	outputs[0] region(1342,669,678)
operator[80]: type(1)
	outputs[0] region(1344,670,679)
operator[81]: type(82)
	inputs[0] region(1340,668,677)
	outputs[0] region(1346,671,680)
operator[82]: type(1)
	outputs[0] region(1348,672,681)
operator[83]: type(1)
	outputs[0] region(1350,673,682)
operator[84]: type(89)
	inputs[0] region(1346,671,680)
	outputs[0] region(1352,674,683)
operator[85]: type(31)
	inputs[0] region(1352,674,683)
	inputs[1] region(1340,668,677)
	outputs[0] region(1354,675,684)
operator[86]: type(1)
	outputs[0] region(1356,676,685)
operator[87]: type(1)
	outputs[0] region(1358,677,686)
operator[88]: type(82)
	inputs[0] region(1354,675,684)
	outputs[0] region(1360,678,687)
operator[89]: type(1)
	outputs[0] region(1362,679,688)
operator[90]: type(1)
	outputs[0] region(1364,680,689)
operator[91]: type(5)
	inputs[0] region(1360,678,687)
	outputs[0] region(1366,681,690)
operator[92]: type(13)
	inputs[0] region(1366,681,690)
	outputs[0] region(1368,682,691)
operator[93]: type(1)
	outputs[0] region(1370,683,692)
operator[94]: type(1)
	outputs[0] region(1372,684,693)
operator[95]: type(5)
	inputs[0] region(1368,682,691)
	outputs[0] region(1374,685,694)
operator[96]: type(31)
	inputs[0] region(1354,675,684)
	inputs[1] region(1374,685,694)
	outputs[0] region(1376,686,695)
operator[97]: type(1)
	outputs[0] region(1378,687,696)
operator[98]: type(1)
	outputs[0] region(1380,688,697)
operator[99]: type(82)
	inputs[0] region(1376,686,695)
	outputs[0] region(1382,689,698)
operator[100]: type(1)
	outputs[0] region(1384,690,699)
operator[101]: type(1)
	outputs[0] region(1386,691,700)
operator[102]: type(89)
	inputs[0] region(1382,689,698)
	outputs[0] region(1388,692,701)
operator[103]: type(31)
	inputs[0] region(1388,692,701)
	inputs[1] region(1376,686,695)
	outputs[0] region(1390,693,702)
operator[104]: type(1)
	outputs[0] region(1392,694,703)
operator[105]: type(1)
	outputs[0] region(1394,695,704)
operator[106]: type(82)
	inputs[0] region(1390,693,702)
	outputs[0] region(1396,696,705)
operator[107]: type(1)
	outputs[0] region(1398,697,706)
operator[108]: type(1)
	outputs[0] region(1400,698,707)
operator[109]: type(5)
	inputs[0] region(1396,696,705)
	outputs[0] region(1402,699,708)
operator[110]: type(13)
	inputs[0] region(1402,699,708)
	outputs[0] region(1404,700,709)
operator[111]: type(1)
	outputs[0] region(1406,701,710)
operator[112]: type(1)
	outputs[0] region(1408,702,711)
operator[113]: type(5)
	inputs[0] region(1404,700,709)
	outputs[0] region(1410,703,712)
operator[114]: type(31)
	inputs[0] region(1390,693,702)
	inputs[1] region(1410,703,712)
	outputs[0] region(1412,704,713)
operator[115]: type(1)
	outputs[0] region(1414,705,714)
operator[116]: type(1)
	outputs[0] region(1416,706,715)
operator[117]: type(82)
	inputs[0] region(1412,704,713)
	outputs[0] region(1418,707,716)
operator[118]: type(1)
	outputs[0] region(1420,708,717)
operator[119]: type(1)
	outputs[0] region(1422,709,718)
operator[120]: type(89)
	inputs[0] region(1418,707,716)
	outputs[0] region(1424,710,719)
operator[121]: type(31)
	inputs[0] region(1424,710,719)
	inputs[1] region(1412,704,713)
	outputs[0] region(1426,711,720)
operator[122]: type(1)
	outputs[0] region(1428,712,721)
operator[123]: type(1)
	outputs[0] region(1430,713,722)
operator[124]: type(82)
	inputs[0] region(1426,711,720)
	outputs[0] region(1432,714,723)
operator[125]: type(1)
	outputs[0] region(1434,715,724)
operator[126]: type(1)
	outputs[0] region(1436,716,725)
operator[127]: type(5)
	inputs[0] region(1432,714,723)
	outputs[0] region(1438,717,726)
operator[128]: type(13)
	inputs[0] region(1438,717,726)
	outputs[0] region(1440,718,727)
operator[129]: type(1)
	outputs[0] region(1442,719,728)
operator[130]: type(1)
	outputs[0] region(1444,720,729)
operator[131]: type(5)
	inputs[0] region(1440,718,727)
	outputs[0] region(1446,721,730)
operator[132]: type(31)
	inputs[0] region(1426,711,720)
	inputs[1] region(1446,721,730)
	outputs[0] region(1448,722,731)
operator[133]: type(1)
	outputs[0] region(1450,723,732)
operator[134]: type(1)
	outputs[0] region(1452,724,733)
operator[135]: type(82)
	inputs[0] region(1448,722,731)
	outputs[0] region(1454,725,734)
operator[136]: type(1)
	outputs[0] region(1456,726,735)
operator[137]: type(1)
	outputs[0] region(1458,727,736)
operator[138]: type(89)
	inputs[0] region(1454,725,734)
	outputs[0] region(1460,728,737)
operator[139]: type(31)
	inputs[0] region(1460,728,737)
	inputs[1] region(1448,722,731)
	outputs[0] region(1462,729,738)
operator[140]: type(1)
	outputs[0] region(1464,730,739)
operator[141]: type(1)
	outputs[0] region(1466,731,740)
operator[142]: type(82)
	inputs[0] region(1462,729,738)
	outputs[0] region(1468,732,741)
operator[143]: type(1)
	outputs[0] region(1470,733,742)
operator[144]: type(1)
	outputs[0] region(1472,734,743)
operator[145]: type(5)
	inputs[0] region(1468,732,741)
	outputs[0] region(1474,735,744)
operator[146]: type(13)
	inputs[0] region(1474,735,744)
	outputs[0] region(1476,736,745)
operator[147]: type(1)
	outputs[0] region(1478,737,746)
operator[148]: type(1)
	outputs[0] region(1480,738,747)
operator[149]: type(5)
	inputs[0] region(1476,736,745)
	outputs[0] region(1482,739,748)
operator[150]: type(31)
	inputs[0] region(1462,729,738)
	inputs[1] region(1482,739,748)
	outputs[0] region(1484,740,749)
operator[151]: type(1)
	outputs[0] region(1486,741,750)
operator[152]: type(1)
	outputs[0] region(1488,742,751)
operator[153]: type(82)
	inputs[0] region(1484,740,749)
	outputs[0] region(1490,743,752)
operator[154]: type(1)
	outputs[0] region(1492,744,753)
operator[155]: type(1)
	outputs[0] region(1494,745,754)
operator[156]: type(89)
	inputs[0] region(1490,743,752)
	outputs[0] region(1496,746,755)
operator[157]: type(31)
	inputs[0] region(1496,746,755)
	inputs[1] region(1484,740,749)
	outputs[0] region(1498,747,756)
operator[158]: type(1)
	outputs[0] region(1500,748,757)
operator[159]: type(1)
	outputs[0] region(1502,749,758)
operator[160]: type(82)
	inputs[0] region(1498,747,756)
	outputs[0] region(1504,750,759)
operator[161]: type(1)
	outputs[0] region(1506,751,760)
operator[162]: type(1)
	outputs[0] region(1508,752,761)
operator[163]: type(5)
	inputs[0] region(1504,750,759)
	outputs[0] region(1510,753,762)
operator[164]: type(13)
	inputs[0] region(1510,753,762)
	outputs[0] region(1512,754,763)
operator[165]: type(1)
	outputs[0] region(1514,755,764)
operator[166]: type(1)
	outputs[0] region(1516,756,765)
operator[167]: type(5)
	inputs[0] region(1512,754,763)
	outputs[0] region(1518,757,766)
operator[168]: type(31)
	inputs[0] region(1498,747,756)
	inputs[1] region(1518,757,766)
	outputs[0] region(1520,758,767)
operator[169]: type(1)
	outputs[0] region(1522,759,768)
operator[170]: type(1)
	outputs[0] region(1524,760,769)
operator[171]: type(82)
	inputs[0] region(1520,758,767)
	outputs[0] region(1526,761,770)
operator[172]: type(1)
	outputs[0] region(1528,762,771)
operator[173]: type(1)
	outputs[0] region(1530,763,772)
operator[174]: type(89)
	inputs[0] region(1526,761,770)
	outputs[0] region(1532,764,773)
operator[175]: type(31)
	inputs[0] region(1532,764,773)
	inputs[1] region(1520,758,767)
	outputs[0] region(1534,765,774)
operator[176]: type(1)
	outputs[0] region(1536,766,775)
operator[177]: type(1)
	outputs[0] region(1538,767,776)
operator[178]: type(82)
	inputs[0] region(1534,765,774)
	outputs[0] region(1540,768,777)
operator[179]: type(1)
	outputs[0] region(1542,769,778)
operator[180]: type(1)
	outputs[0] region(1544,770,779)
operator[181]: type(5)
	inputs[0] region(1540,768,777)
	outputs[0] region(1546,771,780)
operator[182]: type(13)
	inputs[0] region(1546,771,780)
	outputs[0] region(1548,772,781)
operator[183]: type(1)
	outputs[0] region(1550,773,782)
operator[184]: type(1)
	outputs[0] region(1552,774,783)
operator[185]: type(5)
	inputs[0] region(1548,772,781)
	outputs[0] region(1554,775,784)
operator[186]: type(31)
	inputs[0] region(1534,765,774)
	inputs[1] region(1554,775,784)
	outputs[0] region(1556,776,785)
operator[187]: type(1)
	outputs[0] region(1558,777,786)
operator[188]: type(1)
	outputs[0] region(1560,778,787)
operator[189]: type(82)
	inputs[0] region(1556,776,785)
	outputs[0] region(1562,779,788)
operator[190]: type(1)
	outputs[0] region(1564,780,789)
operator[191]: type(1)
	outputs[0] region(1566,781,790)
operator[192]: type(89)
	inputs[0] region(1562,779,788)
	outputs[0] region(1568,782,791)
operator[193]: type(31)
	inputs[0] region(1568,782,791)
	inputs[1] region(1556,776,785)
	outputs[0] region(1570,783,792)
operator[194]: type(1)
	outputs[0] region(1572,784,793)
operator[195]: type(1)
	outputs[0] region(1574,785,794)
operator[196]: type(82)
	inputs[0] region(1570,783,792)
	outputs[0] region(1576,786,795)
operator[197]: type(1)
	outputs[0] region(1578,787,796)
operator[198]: type(1)
	outputs[0] region(1580,788,797)
operator[199]: type(5)
	inputs[0] region(1576,786,795)
	outputs[0] region(1582,789,798)
operator[200]: type(13)
	inputs[0] region(1582,789,798)
	outputs[0] region(1584,790,799)
operator[201]: type(1)
	outputs[0] region(1586,791,800)
operator[202]: type(1)
	outputs[0] region(1588,792,801)
operator[203]: type(5)
	inputs[0] region(1584,790,799)
	outputs[0] region(1590,793,802)
operator[204]: type(31)
	inputs[0] region(1570,783,792)
	inputs[1] region(1590,793,802)
	outputs[0] region(1592,794,803)
operator[205]: type(1)
	outputs[0] region(1594,795,804)
operator[206]: type(1)
	outputs[0] region(1596,796,805)
operator[207]: type(82)
	inputs[0] region(1592,794,803)
	outputs[0] region(1598,797,806)
operator[208]: type(1)
	outputs[0] region(1600,798,807)
operator[209]: type(1)
	outputs[0] region(1602,799,808)
operator[210]: type(89)
	inputs[0] region(1598,797,806)
	outputs[0] region(1604,800,809)
operator[211]: type(31)
	inputs[0] region(1604,800,809)
	inputs[1] region(1592,794,803)
	outputs[0] region(1606,801,810)
operator[212]: type(1)
	outputs[0] region(1608,802,811)
operator[213]: type(1)
	outputs[0] region(1610,803,812)
operator[214]: type(82)
	inputs[0] region(1606,801,810)
	outputs[0] region(1612,804,813)
operator[215]: type(1)
	outputs[0] region(1614,805,814)
operator[216]: type(1)
	outputs[0] region(1616,806,815)
operator[217]: type(5)
	inputs[0] region(1612,804,813)
	outputs[0] region(1618,807,816)
operator[218]: type(13)
	inputs[0] region(1618,807,816)
	outputs[0] region(1620,808,817)
operator[219]: type(1)
	outputs[0] region(1622,809,818)
operator[220]: type(1)
	outputs[0] region(1624,810,819)
operator[221]: type(5)
	inputs[0] region(1620,808,817)
	outputs[0] region(1626,811,820)
operator[222]: type(31)
	inputs[0] region(1606,801,810)
	inputs[1] region(1626,811,820)
	outputs[0] region(1628,812,821)
operator[223]: type(1)
	outputs[0] region(1630,813,822)
operator[224]: type(1)
	outputs[0] region(1632,814,823)
operator[225]: type(82)
	inputs[0] region(1628,812,821)
	outputs[0] region(1634,815,824)
operator[226]: type(1)
	outputs[0] region(1636,816,825)
operator[227]: type(5)
	inputs[0] region(1634,815,824)
	outputs[0] region(1638,817,826)
operator[228]: type(19)
	inputs[0] region(1638,817,826)
	outputs[0] region(1640,818,827)
operator[229]: type(87)
	inputs[0] region(1640,818,827)
	outputs[0] region(1642,819,828)
	outputs[1] region(1644,820,829)
load weights: embed_tokens_weight_lm_head
load weights: layers_11_fc2_weight
load weights: layers_11_fc2_weight
load weights: layers_11_fc1_weight
load weights: layers_11_fc1_weight
load weights: layers_11_final_layer_norm_weight
load weights: layers_11_final_layer_norm_weight
load weights: layers_5_attention_weight
load weights: layers_5_attention_weight
load weights: layers_4_fc2_weight
load weights: layers_4_fc2_weight
load weights: layers_4_final_layer_norm_weight
load weights: layers_4_final_layer_norm_weight
load weights: layers_3_fc1_weight
load weights: layers_3_fc1_weight
load weights: layers_3_final_layer_norm_weight
load weights: layers_3_final_layer_norm_weight
load weights: layers_1_attention_weight
load weights: layers_1_attention_weight
load weights: layers_7_attention_weight
load weights: layers_7_attention_weight
load weights: layers_5_fc1_weight
load weights: layers_5_fc1_weight
load weights: layers_4_attention_layer_norm_weight
load weights: layers_4_attention_layer_norm_weight
load weights: layers_3_attention_layer_norm_weight
load weights: layers_3_attention_layer_norm_weight
load weights: layers_7_fc1_weight
load weights: layers_7_fc1_weight
load weights: layers_8_attention_layer_norm_weight
load weights: layers_8_attention_layer_norm_weight
load weights: layers_2_fc1_weight
load weights: layers_2_fc1_weight
load weights: layers_5_attention_layer_norm_weight
load weights: layers_5_attention_layer_norm_weight
load weights: layers_0_fc1_weight
load weights: layers_0_fc1_weight
load weights: layers_1_fc2_weight
load weights: layers_1_fc2_weight
load weights: layers_8_final_layer_norm_weight
load weights: layers_8_final_layer_norm_weight
load weights: layers_2_final_layer_norm_weight
load weights: layers_2_final_layer_norm_weight
load weights: layers_4_attention_weight
load weights: layers_4_attention_weight
load weights: embed_positions_weight
load weights: layers_7_fc2_weight
load weights: layers_7_fc2_weight
load weights: layers_2_fc2_weight
load weights: layers_2_fc2_weight
load weights: layers_2_attention_weight
load weights: layers_2_attention_weight
load weights: layers_6_fc2_weight
load weights: layers_6_fc2_weight
load weights: layers_9_fc1_weight
load weights: layers_9_fc1_weight
load weights: layers_10_attention_layer_norm_weight
load weights: layers_10_attention_layer_norm_weight
load weights: embed_tokens_weight
load weights: layers_0_fc2_weight
load weights: layers_0_fc2_weight
load weights: layers_6_attention_layer_norm_weight
load weights: layers_6_attention_layer_norm_weight
load weights: layers_10_fc1_weight
load weights: layers_10_fc1_weight
load weights: layers_3_fc2_weight
load weights: layers_3_fc2_weight
load weights: layers_0_attention_weight
load weights: layers_0_attention_weight
load weights: layers_1_fc1_weight
load weights: layers_1_fc1_weight
load weights: layers_9_attention_weight
load weights: layers_9_attention_weight
load weights: layers_0_final_layer_norm_weight
load weights: layers_0_final_layer_norm_weight
load weights: layers_10_final_layer_norm_weight
load weights: layers_10_final_layer_norm_weight
load weights: layers_5_fc2_weight
load weights: layers_5_fc2_weight
load weights: final_layer_norm_weight
load weights: final_layer_norm_weight
load weights: layers_10_fc2_weight
load weights: layers_10_fc2_weight
load weights: layers_1_attention_layer_norm_weight
load weights: layers_1_attention_layer_norm_weight
load weights: layers_2_attention_layer_norm_weight
load weights: layers_2_attention_layer_norm_weight
load weights: layers_7_final_layer_norm_weight
load weights: layers_7_final_layer_norm_weight
load weights: layers_4_fc1_weight
load weights: layers_4_fc1_weight
load weights: layers_0_attention_layer_norm_weight
load weights: layers_0_attention_layer_norm_weight
load weights: layers_1_final_layer_norm_weight
load weights: layers_1_final_layer_norm_weight
load weights: layers_9_fc2_weight
load weights: layers_9_fc2_weight
load weights: layers_5_final_layer_norm_weight
load weights: layers_5_final_layer_norm_weight
load weights: layers_6_attention_weight
load weights: layers_6_attention_weight
load weights: layers_6_fc1_weight
load weights: layers_6_fc1_weight
load weights: layers_3_attention_weight
load weights: layers_3_attention_weight
load weights: layers_9_final_layer_norm_weight
load weights: layers_9_final_layer_norm_weight
load weights: layers_6_final_layer_norm_weight
load weights: layers_6_final_layer_norm_weight
load weights: layers_7_attention_layer_norm_weight
load weights: layers_7_attention_layer_norm_weight
load weights: layers_8_attention_weight
load weights: layers_8_attention_weight
load weights: layers_8_fc2_weight
load weights: layers_8_fc2_weight
load weights: layers_9_attention_layer_norm_weight
load weights: layers_9_attention_layer_norm_weight
load weights: layers_10_attention_weight
load weights: layers_10_attention_weight
load weights: layers_11_attention_layer_norm_weight
load weights: layers_11_attention_layer_norm_weight
load weights: layers_8_fc1_weight
load weights: layers_8_fc1_weight
load weights: layers_11_attention_weight
load weights: layers_11_attention_weight
------finished loading weights----------
init linear (input): in_dim(768) out_dim(3072) batch_size(64)
init linear (input): in_dim(3072) out_dim(768) batch_size(64)
init linear (input): in_dim(768) out_dim(3072) batch_size(64)
init linear (input): in_dim(3072) out_dim(768) batch_size(64)
init linear (input): in_dim(768) out_dim(3072) batch_size(64)
init linear (input): in_dim(3072) out_dim(768) batch_size(64)
init linear (input): in_dim(768) out_dim(3072) batch_size(64)
init linear (input): in_dim(3072) out_dim(768) batch_size(64)
init linear (input): in_dim(768) out_dim(3072) batch_size(64)
init linear (input): in_dim(3072) out_dim(768) batch_size(64)
init linear (input): in_dim(768) out_dim(3072) batch_size(64)
init linear (input): in_dim(3072) out_dim(768) batch_size(64)
init linear (input): in_dim(768) out_dim(3072) batch_size(64)
init linear (input): in_dim(3072) out_dim(768) batch_size(64)
init linear (input): in_dim(768) out_dim(3072) batch_size(64)
init linear (input): in_dim(3072) out_dim(768) batch_size(64)
init linear (input): in_dim(768) out_dim(3072) batch_size(64)
init linear (input): in_dim(3072) out_dim(768) batch_size(64)
init linear (input): in_dim(768) out_dim(3072) batch_size(64)
init linear (input): in_dim(3072) out_dim(768) batch_size(64)
init linear (input): in_dim(768) out_dim(3072) batch_size(64)
init linear (input): in_dim(3072) out_dim(768) batch_size(64)
init linear (input): in_dim(768) out_dim(3072) batch_size(64)
init linear (input): in_dim(3072) out_dim(768) batch_size(64)
init linear (input): in_dim(768) out_dim(50272) batch_size(64)
Register new model with id: 0
Prompt[0]: Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.
[0]45714
[1]10
[2]4271
[3]1152
[4]8194
[5]13
[6]10
[7]689
[8]14310
[9]5961
[10]3944
[11]14
[12]8382
[13]47
[14]27804
[15]12849
[16]8
[17]8942
[18]4
Num of models: 1
[0 - 7efdc8311000]   32.330358 {3}{RequestManager}: New request tokens: 2 45714 10 4271 1152 8194 13 10 689 14310 5961 3944 14 8382 47 27804 12849 8 8942 4
[0]45714
[1]10
[2]4271
[3]1152
[4]8194
[5]13
[6]10
[7]689
[8]14310
[9]5961
[10]3944
[11]14
[12]8382
[13]47
[14]27804
[15]12849
[16]8
[17]8942
[18]4
Num of models: 1
[0 - 7efdc8311000]   32.330402 {3}{RequestManager}: New request tokens: 2 45714 10 4271 1152 8194 13 10 689 14310 5961 3944 14 8382 47 27804 12849 8 8942 4
[0]45714
[1]10
[2]4271
[3]1152
[4]8194
[5]13
[6]10
[7]689
[8]14310
[9]5961
[10]3944
[11]14
[12]8382
[13]47
[14]27804
[15]12849
[16]8
[17]8942
[18]4
Num of models: 1
[0 - 7efdc8311000]   32.330435 {3}{RequestManager}: New request tokens: 2 45714 10 4271 1152 8194 13 10 689 14310 5961 3944 14 8382 47 27804 12849 8 8942 4
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 20
new_bc.num_tokens: 28
request.beam_trees.size(): 1


new_bc.num_tokens: 48
new_bc.num_tokens: 56
[0 - 7efdc8311000]   34.883334 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   34.883342 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   34.883344 {3}{RequestManager}: (4, 19)
[0 - 7efdc8311000]   34.883346 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]   34.883347 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]   34.883349 {3}{RequestManager}: (133, 22)
[0 - 7efdc8311000]   34.883350 {3}{RequestManager}: (92, 23)
[0 - 7efdc8311000]   34.883351 {3}{RequestManager}: (92, 24)
[0 - 7efdc8311000]   34.883353 {3}{RequestManager}: (92, 25)
[0 - 7efdc8311000]   34.883354 {3}{RequestManager}: (92, 26)
[0 - 7efdc8311000]   34.883355 {3}{RequestManager}: (92, 27)
[0 - 7efdc8311000]   34.883356 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   34.883358 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]   34.883359 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]   34.883360 {3}{RequestManager}: (45714, 22)
[0 - 7efdc8311000]   34.883361 {3}{RequestManager}: (1152, 23)
[0 - 7efdc8311000]   34.883362 {3}{RequestManager}: (689, 24)
[0 - 7efdc8311000]   34.883364 {3}{RequestManager}: (689, 25)
[0 - 7efdc8311000]   34.883365 {3}{RequestManager}: (92, 26)
[0 - 7efdc8311000]   34.883366 {3}{RequestManager}: (92, 27)
[0 - 7efdc8311000]   34.883367 {3}{RequestManager}: (92, 28)
[0 - 7efdc8311000]   34.883368 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   34.883370 {3}{RequestManager}: (19, 19)
[0 - 7efdc8311000]   34.883371 {3}{RequestManager}: (20, 20)
[0 - 7efdc8311000]   34.883372 {3}{RequestManager}: (21, 21)
[0 - 7efdc8311000]   34.883373 {3}{RequestManager}: (22, 22)
[0 - 7efdc8311000]   34.883374 {3}{RequestManager}: (23, 23)
[0 - 7efdc8311000]   34.883376 {3}{RequestManager}: (24, 24)
[0 - 7efdc8311000]   34.883377 {3}{RequestManager}: (25, 25)
[0 - 7efdc8311000]   34.883378 {3}{RequestManager}: (26, 26)
[0 - 7efdc8311000]   34.883379 {3}{RequestManager}: (27, 27)
[0 - 7efdc8311000]   34.883383 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   34.883384 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]   34.883385 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]   34.883386 {3}{RequestManager}: (45714, 22)
[0 - 7efdc8311000]   34.883388 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   34.883389 {3}{RequestManager}: (19, 19)
[0 - 7efdc8311000]   34.883390 {3}{RequestManager}: (20, 20)
[0 - 7efdc8311000]   34.883391 {3}{RequestManager}: (21, 21)
[0 - 7efdc8311000]   34.883392 {3}{RequestManager}: Number of Verified Tokens = 3
[0 - 7efdc8311000]   34.883470 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write
[0 - 7efdc8311000]   34.883473 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   34.883474 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   34.883476 {3}{RequestManager}: (4, 19)
[0 - 7efdc8311000]   34.883477 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]   34.883478 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]   34.883480 {3}{RequestManager}: (45714, 22)
[0 - 7efdc8311000]   34.883481 {3}{RequestManager}: (10, 23)
[0 - 7efdc8311000]   34.883482 {3}{RequestManager}: (4271, 24)
[0 - 7efdc8311000]   34.883484 {3}{RequestManager}: (1152, 25)
[0 - 7efdc8311000]   34.883485 {3}{RequestManager}: (8194, 26)
[0 - 7efdc8311000]   34.883486 {3}{RequestManager}: (13, 27)
[0 - 7efdc8311000]   34.883487 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   34.883488 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]   34.883490 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]   34.883491 {3}{RequestManager}: (45714, 22)
[0 - 7efdc8311000]   34.883492 {3}{RequestManager}: (10, 23)
[0 - 7efdc8311000]   34.883493 {3}{RequestManager}: (4271, 24)
[0 - 7efdc8311000]   34.883494 {3}{RequestManager}: (1152, 25)
[0 - 7efdc8311000]   34.883496 {3}{RequestManager}: (8194, 26)
[0 - 7efdc8311000]   34.883497 {3}{RequestManager}: (13, 27)
[0 - 7efdc8311000]   34.883498 {3}{RequestManager}: (10, 28)
[0 - 7efdc8311000]   34.883531 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   34.883532 {3}{RequestManager}: (19, 47)
[0 - 7efdc8311000]   34.883533 {3}{RequestManager}: (20, 48)
[0 - 7efdc8311000]   34.883535 {3}{RequestManager}: (21, 49)
[0 - 7efdc8311000]   34.883536 {3}{RequestManager}: (22, 50)
[0 - 7efdc8311000]   34.883537 {3}{RequestManager}: (23, 51)
[0 - 7efdc8311000]   34.883538 {3}{RequestManager}: (24, 52)
[0 - 7efdc8311000]   34.883539 {3}{RequestManager}: (25, 53)
[0 - 7efdc8311000]   34.883541 {3}{RequestManager}: (26, 54)
[0 - 7efdc8311000]   34.883542 {3}{RequestManager}: (27, 55)
[0 - 7efdc8311000]   34.883545 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   34.883546 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]   34.883547 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]   34.883549 {3}{RequestManager}: (45714, 22)
[0 - 7efdc8311000]   34.883550 {3}{RequestManager}: (10, 23)
[0 - 7efdc8311000]   34.883551 {3}{RequestManager}: (4271, 24)
[0 - 7efdc8311000]   34.883552 {3}{RequestManager}: (1152, 25)
[0 - 7efdc8311000]   34.883553 {3}{RequestManager}: (8194, 26)
[0 - 7efdc8311000]   34.883555 {3}{RequestManager}: (13, 27)
[0 - 7efdc8311000]   34.883556 {3}{RequestManager}: (10, 28)
[0 - 7efdc8311000]   34.883557 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   34.883558 {3}{RequestManager}: (19, 47)
[0 - 7efdc8311000]   34.883559 {3}{RequestManager}: (20, 48)
[0 - 7efdc8311000]   34.883561 {3}{RequestManager}: (21, 49)
[0 - 7efdc8311000]   34.883562 {3}{RequestManager}: (22, 50)
[0 - 7efdc8311000]   34.883563 {3}{RequestManager}: (23, 51)
[0 - 7efdc8311000]   34.883564 {3}{RequestManager}: (24, 52)
[0 - 7efdc8311000]   34.883565 {3}{RequestManager}: (25, 53)
[0 - 7efdc8311000]   34.883567 {3}{RequestManager}: (26, 54)
[0 - 7efdc8311000]   34.883568 {3}{RequestManager}: (27, 55)
[0 - 7efdc8311000]   34.883569 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   34.883584 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   37.321917 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   37.321925 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   37.321927 {3}{RequestManager}: (45714, 22)
[0 - 7efdc8311000]   37.321928 {3}{RequestManager}: (10, 23)
[0 - 7efdc8311000]   37.321930 {3}{RequestManager}: (8194, 24)
[0 - 7efdc8311000]   37.321931 {3}{RequestManager}: (50118, 25)
[0 - 7efdc8311000]   37.321932 {3}{RequestManager}: (50118, 26)
[0 - 7efdc8311000]   37.321933 {3}{RequestManager}: (50118, 27)
[0 - 7efdc8311000]   37.321934 {3}{RequestManager}: (50118, 28)
[0 - 7efdc8311000]   37.321935 {3}{RequestManager}: (50118, 29)
[0 - 7efdc8311000]   37.321937 {3}{RequestManager}: (50118, 30)
[0 - 7efdc8311000]   37.321938 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   37.321939 {3}{RequestManager}: (10, 23)
[0 - 7efdc8311000]   37.321940 {3}{RequestManager}: (4271, 24)
[0 - 7efdc8311000]   37.321941 {3}{RequestManager}: (9, 25)
[0 - 7efdc8311000]   37.321942 {3}{RequestManager}: (50118, 26)
[0 - 7efdc8311000]   37.321943 {3}{RequestManager}: (45714, 27)
[0 - 7efdc8311000]   37.321944 {3}{RequestManager}: (45714, 28)
[0 - 7efdc8311000]   37.321945 {3}{RequestManager}: (45714, 29)
[0 - 7efdc8311000]   37.321946 {3}{RequestManager}: (45714, 30)
[0 - 7efdc8311000]   37.321947 {3}{RequestManager}: (45714, 31)
[0 - 7efdc8311000]   37.321948 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   37.321950 {3}{RequestManager}: (22, 0)
[0 - 7efdc8311000]   37.321951 {3}{RequestManager}: (23, 1)
[0 - 7efdc8311000]   37.321952 {3}{RequestManager}: (24, 2)
[0 - 7efdc8311000]   37.321953 {3}{RequestManager}: (25, 3)
[0 - 7efdc8311000]   37.321954 {3}{RequestManager}: (26, 4)
[0 - 7efdc8311000]   37.321955 {3}{RequestManager}: (27, 5)
[0 - 7efdc8311000]   37.321956 {3}{RequestManager}: (28, 6)
[0 - 7efdc8311000]   37.321957 {3}{RequestManager}: (29, 7)
[0 - 7efdc8311000]   37.321958 {3}{RequestManager}: (30, 8)
[0 - 7efdc8311000]   37.321961 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   37.321962 {3}{RequestManager}: (10, 23)
[0 - 7efdc8311000]   37.321963 {3}{RequestManager}: (4271, 24)
[0 - 7efdc8311000]   37.321964 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   37.321965 {3}{RequestManager}: (22, 0)
[0 - 7efdc8311000]   37.321966 {3}{RequestManager}: (23, 1)
[0 - 7efdc8311000]   37.321968 {3}{RequestManager}: Number of Verified Tokens = 2
[0 - 7efdc8311000]   37.321995 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed
[0 - 7efdc8311000]   37.321997 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   37.321998 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   37.321999 {3}{RequestManager}: (10, 28)
[0 - 7efdc8311000]   37.322001 {3}{RequestManager}: (689, 29)
[0 - 7efdc8311000]   37.322002 {3}{RequestManager}: (14310, 30)
[0 - 7efdc8311000]   37.322003 {3}{RequestManager}: (5961, 31)
[0 - 7efdc8311000]   37.322005 {3}{RequestManager}: (3944, 32)
[0 - 7efdc8311000]   37.322006 {3}{RequestManager}: (14, 33)
[0 - 7efdc8311000]   37.322007 {3}{RequestManager}: (8382, 34)
[0 - 7efdc8311000]   37.322008 {3}{RequestManager}: (47, 35)
[0 - 7efdc8311000]   37.322009 {3}{RequestManager}: (27804, 36)
[0 - 7efdc8311000]   37.322010 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   37.322011 {3}{RequestManager}: (689, 29)
[0 - 7efdc8311000]   37.322012 {3}{RequestManager}: (14310, 30)
[0 - 7efdc8311000]   37.322013 {3}{RequestManager}: (5961, 31)
[0 - 7efdc8311000]   37.322014 {3}{RequestManager}: (3944, 32)
[0 - 7efdc8311000]   37.322015 {3}{RequestManager}: (14, 33)
[0 - 7efdc8311000]   37.322016 {3}{RequestManager}: (8382, 34)
[0 - 7efdc8311000]   37.322018 {3}{RequestManager}: (47, 35)
[0 - 7efdc8311000]   37.322019 {3}{RequestManager}: (27804, 36)
[0 - 7efdc8311000]   37.322020 {3}{RequestManager}: (12849, 37)
[0 - 7efdc8311000]   37.322021 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   37.322054 {3}{RequestManager}: (28, 9)
[0 - 7efdc8311000]   37.322055 {3}{RequestManager}: (29, 10)
[0 - 7efdc8311000]   37.322056 {3}{RequestManager}: (30, 11)
[0 - 7efdc8311000]   37.322057 {3}{RequestManager}: (31, 12)
[0 - 7efdc8311000]   37.322058 {3}{RequestManager}: (32, 13)
[0 - 7efdc8311000]   37.322059 {3}{RequestManager}: (33, 14)
[0 - 7efdc8311000]   37.322060 {3}{RequestManager}: (34, 15)
[0 - 7efdc8311000]   37.322061 {3}{RequestManager}: (35, 16)
[0 - 7efdc8311000]   37.322062 {3}{RequestManager}: (36, 17)
[0 - 7efdc8311000]   37.322065 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   37.322066 {3}{RequestManager}: (689, 29)
[0 - 7efdc8311000]   37.322067 {3}{RequestManager}: (14310, 30)
[0 - 7efdc8311000]   37.322068 {3}{RequestManager}: (5961, 31)
[0 - 7efdc8311000]   37.322069 {3}{RequestManager}: (3944, 32)
[0 - 7efdc8311000]   37.322070 {3}{RequestManager}: (14, 33)
[0 - 7efdc8311000]   37.322072 {3}{RequestManager}: (8382, 34)
[0 - 7efdc8311000]   37.322073 {3}{RequestManager}: (47, 35)
[0 - 7efdc8311000]   37.322074 {3}{RequestManager}: (27804, 36)
[0 - 7efdc8311000]   37.322075 {3}{RequestManager}: (12849, 37)
[0 - 7efdc8311000]   37.322076 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   37.322093 {3}{RequestManager}: (28, 9)
[0 - 7efdc8311000]   37.322094 {3}{RequestManager}: (29, 10)
[0 - 7efdc8311000]   37.322095 {3}{RequestManager}: (30, 11)
[0 - 7efdc8311000]   37.322096 {3}{RequestManager}: (31, 12)
[0 - 7efdc8311000]   37.322098 {3}{RequestManager}: (32, 13)
[0 - 7efdc8311000]   37.322099 {3}{RequestManager}: (33, 14)
[0 - 7efdc8311000]   37.322100 {3}{RequestManager}: (34, 15)
[0 - 7efdc8311000]   37.322101 {3}{RequestManager}: (35, 16)
[0 - 7efdc8311000]   37.322102 {3}{RequestManager}: (36, 17)
[0 - 7efdc8311000]   37.322103 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   37.322118 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   39.722038 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   39.722045 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   39.722046 {3}{RequestManager}: (4271, 24)
[0 - 7efdc8311000]   39.722048 {3}{RequestManager}: (8194, 25)
[0 - 7efdc8311000]   39.722049 {3}{RequestManager}: (59, 26)
[0 - 7efdc8311000]   39.722050 {3}{RequestManager}: (10, 27)
[0 - 7efdc8311000]   39.722051 {3}{RequestManager}: (689, 28)
[0 - 7efdc8311000]   39.722053 {3}{RequestManager}: (14310, 29)
[0 - 7efdc8311000]   39.722054 {3}{RequestManager}: (5961, 30)
[0 - 7efdc8311000]   39.722055 {3}{RequestManager}: (3944, 31)
[0 - 7efdc8311000]   39.722056 {3}{RequestManager}: (14, 32)
[0 - 7efdc8311000]   39.722057 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   39.722058 {3}{RequestManager}: (1152, 25)
[0 - 7efdc8311000]   39.722059 {3}{RequestManager}: (13, 26)
[0 - 7efdc8311000]   39.722060 {3}{RequestManager}: (10, 27)
[0 - 7efdc8311000]   39.722061 {3}{RequestManager}: (689, 28)
[0 - 7efdc8311000]   39.722062 {3}{RequestManager}: (14310, 29)
[0 - 7efdc8311000]   39.722063 {3}{RequestManager}: (5961, 30)
[0 - 7efdc8311000]   39.722064 {3}{RequestManager}: (3944, 31)
[0 - 7efdc8311000]   39.722066 {3}{RequestManager}: (14, 32)
[0 - 7efdc8311000]   39.722067 {3}{RequestManager}: (8382, 33)
[0 - 7efdc8311000]   39.722068 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   39.722069 {3}{RequestManager}: (24, 0)
[0 - 7efdc8311000]   39.722070 {3}{RequestManager}: (25, 1)
[0 - 7efdc8311000]   39.722071 {3}{RequestManager}: (26, 2)
[0 - 7efdc8311000]   39.722072 {3}{RequestManager}: (27, 3)
[0 - 7efdc8311000]   39.722073 {3}{RequestManager}: (28, 4)
[0 - 7efdc8311000]   39.722074 {3}{RequestManager}: (29, 5)
[0 - 7efdc8311000]   39.722075 {3}{RequestManager}: (30, 6)
[0 - 7efdc8311000]   39.722076 {3}{RequestManager}: (31, 7)
[0 - 7efdc8311000]   39.722077 {3}{RequestManager}: (32, 8)
[0 - 7efdc8311000]   39.722080 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   39.722081 {3}{RequestManager}: (1152, 25)
[0 - 7efdc8311000]   39.722082 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   39.722083 {3}{RequestManager}: (24, 0)
[0 - 7efdc8311000]   39.722084 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]   39.722113 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product
[0 - 7efdc8311000]   39.722115 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   39.722116 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   39.722117 {3}{RequestManager}: (12849, 37)
[0 - 7efdc8311000]   39.722118 {3}{RequestManager}: (8, 38)
[0 - 7efdc8311000]   39.722119 {3}{RequestManager}: (8942, 39)
[0 - 7efdc8311000]   39.722121 {3}{RequestManager}: (4, 40)
[0 - 7efdc8311000]   39.722122 {3}{RequestManager}: (50118, 41)
[0 - 7efdc8311000]   39.722123 {3}{RequestManager}: (50118, 42)
[0 - 7efdc8311000]   39.722124 {3}{RequestManager}: (45714, 43)
[0 - 7efdc8311000]   39.722125 {3}{RequestManager}: (10, 44)
[0 - 7efdc8311000]   39.722126 {3}{RequestManager}: (4271, 45)
[0 - 7efdc8311000]   39.722128 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   39.722129 {3}{RequestManager}: (8, 38)
[0 - 7efdc8311000]   39.722130 {3}{RequestManager}: (8942, 39)
[0 - 7efdc8311000]   39.722131 {3}{RequestManager}: (4, 40)
[0 - 7efdc8311000]   39.722132 {3}{RequestManager}: (50118, 41)
[0 - 7efdc8311000]   39.722133 {3}{RequestManager}: (50118, 42)
[0 - 7efdc8311000]   39.722134 {3}{RequestManager}: (45714, 43)
[0 - 7efdc8311000]   39.722135 {3}{RequestManager}: (10, 44)
[0 - 7efdc8311000]   39.722136 {3}{RequestManager}: (4271, 45)
[0 - 7efdc8311000]   39.722137 {3}{RequestManager}: (1152, 46)
[0 - 7efdc8311000]   39.722138 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   39.722139 {3}{RequestManager}: (37, 9)
[0 - 7efdc8311000]   39.722141 {3}{RequestManager}: (38, 10)
[0 - 7efdc8311000]   39.722165 {3}{RequestManager}: (39, 11)
[0 - 7efdc8311000]   39.722166 {3}{RequestManager}: (40, 12)
[0 - 7efdc8311000]   39.722167 {3}{RequestManager}: (41, 13)
[0 - 7efdc8311000]   39.722168 {3}{RequestManager}: (42, 14)
[0 - 7efdc8311000]   39.722169 {3}{RequestManager}: (43, 15)
[0 - 7efdc8311000]   39.722171 {3}{RequestManager}: (44, 16)
[0 - 7efdc8311000]   39.722172 {3}{RequestManager}: (45, 17)
[0 - 7efdc8311000]   39.722174 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   39.722175 {3}{RequestManager}: (8, 38)
[0 - 7efdc8311000]   39.722176 {3}{RequestManager}: (8942, 39)
[0 - 7efdc8311000]   39.722177 {3}{RequestManager}: (4, 40)
[0 - 7efdc8311000]   39.722178 {3}{RequestManager}: (50118, 41)
[0 - 7efdc8311000]   39.722179 {3}{RequestManager}: (50118, 42)
[0 - 7efdc8311000]   39.722181 {3}{RequestManager}: (45714, 43)
[0 - 7efdc8311000]   39.722182 {3}{RequestManager}: (10, 44)
[0 - 7efdc8311000]   39.722183 {3}{RequestManager}: (4271, 45)
[0 - 7efdc8311000]   39.722184 {3}{RequestManager}: (1152, 46)
[0 - 7efdc8311000]   39.722185 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   39.722186 {3}{RequestManager}: (37, 9)
[0 - 7efdc8311000]   39.722204 {3}{RequestManager}: (38, 10)
[0 - 7efdc8311000]   39.722205 {3}{RequestManager}: (39, 11)
[0 - 7efdc8311000]   39.722206 {3}{RequestManager}: (40, 12)
[0 - 7efdc8311000]   39.722207 {3}{RequestManager}: (41, 13)
[0 - 7efdc8311000]   39.722208 {3}{RequestManager}: (42, 14)
[0 - 7efdc8311000]   39.722209 {3}{RequestManager}: (43, 15)
[0 - 7efdc8311000]   39.722210 {3}{RequestManager}: (44, 16)
[0 - 7efdc8311000]   39.722212 {3}{RequestManager}: (45, 17)
[0 - 7efdc8311000]   39.722213 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   39.722231 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   42.077957 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   42.077965 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   42.077966 {3}{RequestManager}: (1152, 25)
[0 - 7efdc8311000]   42.077968 {3}{RequestManager}: (8194, 26)
[0 - 7efdc8311000]   42.077969 {3}{RequestManager}: (50118, 27)
[0 - 7efdc8311000]   42.077970 {3}{RequestManager}: (50118, 28)
[0 - 7efdc8311000]   42.077971 {3}{RequestManager}: (50118, 29)
[0 - 7efdc8311000]   42.077973 {3}{RequestManager}: (50118, 30)
[0 - 7efdc8311000]   42.077974 {3}{RequestManager}: (50118, 31)
[0 - 7efdc8311000]   42.077975 {3}{RequestManager}: (50118, 32)
[0 - 7efdc8311000]   42.077976 {3}{RequestManager}: (50118, 33)
[0 - 7efdc8311000]   42.077977 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   42.077978 {3}{RequestManager}: (8194, 26)
[0 - 7efdc8311000]   42.077979 {3}{RequestManager}: (13, 27)
[0 - 7efdc8311000]   42.077980 {3}{RequestManager}: (50118, 28)
[0 - 7efdc8311000]   42.077981 {3}{RequestManager}: (45714, 29)
[0 - 7efdc8311000]   42.077982 {3}{RequestManager}: (45714, 30)
[0 - 7efdc8311000]   42.077983 {3}{RequestManager}: (45714, 31)
[0 - 7efdc8311000]   42.077984 {3}{RequestManager}: (45714, 32)
[0 - 7efdc8311000]   42.077985 {3}{RequestManager}: (45714, 33)
[0 - 7efdc8311000]   42.077987 {3}{RequestManager}: (45714, 34)
[0 - 7efdc8311000]   42.077988 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   42.077989 {3}{RequestManager}: (25, 0)
[0 - 7efdc8311000]   42.077990 {3}{RequestManager}: (26, 1)
[0 - 7efdc8311000]   42.077991 {3}{RequestManager}: (27, 2)
[0 - 7efdc8311000]   42.077992 {3}{RequestManager}: (28, 3)
[0 - 7efdc8311000]   42.077993 {3}{RequestManager}: (29, 4)
[0 - 7efdc8311000]   42.077994 {3}{RequestManager}: (30, 5)
[0 - 7efdc8311000]   42.077995 {3}{RequestManager}: (31, 6)
[0 - 7efdc8311000]   42.077996 {3}{RequestManager}: (32, 7)
[0 - 7efdc8311000]   42.077997 {3}{RequestManager}: (33, 8)
[0 - 7efdc8311000]   42.077999 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   42.078001 {3}{RequestManager}: (8194, 26)
[0 - 7efdc8311000]   42.078002 {3}{RequestManager}: (13, 27)
[0 - 7efdc8311000]   42.078003 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   42.078004 {3}{RequestManager}: (25, 0)
[0 - 7efdc8311000]   42.078005 {3}{RequestManager}: (26, 1)
[0 - 7efdc8311000]   42.078006 {3}{RequestManager}: Number of Verified Tokens = 2
[0 - 7efdc8311000]   42.078035 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for
[0 - 7efdc8311000]   42.078037 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   42.078038 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   42.078039 {3}{RequestManager}: (1152, 46)
[0 - 7efdc8311000]   42.078040 {3}{RequestManager}: (8194, 47)
[0 - 7efdc8311000]   42.078042 {3}{RequestManager}: (13, 48)
[0 - 7efdc8311000]   42.078043 {3}{RequestManager}: (10, 49)
[0 - 7efdc8311000]   42.078044 {3}{RequestManager}: (689, 50)
[0 - 7efdc8311000]   42.078045 {3}{RequestManager}: (14310, 51)
[0 - 7efdc8311000]   42.078046 {3}{RequestManager}: (5961, 52)
[0 - 7efdc8311000]   42.078047 {3}{RequestManager}: (3944, 53)
[0 - 7efdc8311000]   42.078048 {3}{RequestManager}: (14, 54)
[0 - 7efdc8311000]   42.078049 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   42.078050 {3}{RequestManager}: (8194, 47)
[0 - 7efdc8311000]   42.078052 {3}{RequestManager}: (13, 48)
[0 - 7efdc8311000]   42.078053 {3}{RequestManager}: (10, 49)
[0 - 7efdc8311000]   42.078054 {3}{RequestManager}: (689, 50)
[0 - 7efdc8311000]   42.078055 {3}{RequestManager}: (14310, 51)
[0 - 7efdc8311000]   42.078056 {3}{RequestManager}: (5961, 52)
[0 - 7efdc8311000]   42.078057 {3}{RequestManager}: (3944, 53)
[0 - 7efdc8311000]   42.078058 {3}{RequestManager}: (14, 54)
[0 - 7efdc8311000]   42.078059 {3}{RequestManager}: (8382, 55)
[0 - 7efdc8311000]   42.078060 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   42.078084 {3}{RequestManager}: (46, 9)
[0 - 7efdc8311000]   42.078085 {3}{RequestManager}: (47, 10)
[0 - 7efdc8311000]   42.078086 {3}{RequestManager}: (48, 11)
[0 - 7efdc8311000]   42.078087 {3}{RequestManager}: (49, 12)
[0 - 7efdc8311000]   42.078088 {3}{RequestManager}: (50, 13)
[0 - 7efdc8311000]   42.078089 {3}{RequestManager}: (51, 14)
[0 - 7efdc8311000]   42.078090 {3}{RequestManager}: (52, 15)
[0 - 7efdc8311000]   42.078091 {3}{RequestManager}: (53, 16)
[0 - 7efdc8311000]   42.078092 {3}{RequestManager}: (54, 17)
[0 - 7efdc8311000]   42.078094 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   42.078095 {3}{RequestManager}: (8194, 47)
[0 - 7efdc8311000]   42.078096 {3}{RequestManager}: (13, 48)
[0 - 7efdc8311000]   42.078097 {3}{RequestManager}: (10, 49)
[0 - 7efdc8311000]   42.078099 {3}{RequestManager}: (689, 50)
[0 - 7efdc8311000]   42.078100 {3}{RequestManager}: (14310, 51)
[0 - 7efdc8311000]   42.078101 {3}{RequestManager}: (5961, 52)
[0 - 7efdc8311000]   42.078102 {3}{RequestManager}: (3944, 53)
[0 - 7efdc8311000]   42.078103 {3}{RequestManager}: (14, 54)
[0 - 7efdc8311000]   42.078104 {3}{RequestManager}: (8382, 55)
[0 - 7efdc8311000]   42.078105 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   42.078122 {3}{RequestManager}: (46, 9)
[0 - 7efdc8311000]   42.078123 {3}{RequestManager}: (47, 10)
[0 - 7efdc8311000]   42.078124 {3}{RequestManager}: (48, 11)
[0 - 7efdc8311000]   42.078126 {3}{RequestManager}: (49, 12)
[0 - 7efdc8311000]   42.078127 {3}{RequestManager}: (50, 13)
[0 - 7efdc8311000]   42.078128 {3}{RequestManager}: (51, 14)
[0 - 7efdc8311000]   42.078129 {3}{RequestManager}: (52, 15)
[0 - 7efdc8311000]   42.078130 {3}{RequestManager}: (53, 16)
[0 - 7efdc8311000]   42.078131 {3}{RequestManager}: (54, 17)
[0 - 7efdc8311000]   42.078132 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   42.078153 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   44.433511 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   44.433519 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   44.433520 {3}{RequestManager}: (13, 27)
[0 - 7efdc8311000]   44.433522 {3}{RequestManager}: (10, 28)
[0 - 7efdc8311000]   44.433523 {3}{RequestManager}: (689, 29)
[0 - 7efdc8311000]   44.433524 {3}{RequestManager}: (14310, 30)
[0 - 7efdc8311000]   44.433525 {3}{RequestManager}: (5961, 31)
[0 - 7efdc8311000]   44.433527 {3}{RequestManager}: (3944, 32)
[0 - 7efdc8311000]   44.433528 {3}{RequestManager}: (14, 33)
[0 - 7efdc8311000]   44.433529 {3}{RequestManager}: (8382, 34)
[0 - 7efdc8311000]   44.433530 {3}{RequestManager}: (47, 35)
[0 - 7efdc8311000]   44.433531 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   44.433532 {3}{RequestManager}: (10, 28)
[0 - 7efdc8311000]   44.433534 {3}{RequestManager}: (689, 29)
[0 - 7efdc8311000]   44.433535 {3}{RequestManager}: (14310, 30)
[0 - 7efdc8311000]   44.433536 {3}{RequestManager}: (5961, 31)
[0 - 7efdc8311000]   44.433537 {3}{RequestManager}: (3944, 32)
[0 - 7efdc8311000]   44.433538 {3}{RequestManager}: (14, 33)
[0 - 7efdc8311000]   44.433539 {3}{RequestManager}: (8382, 34)
[0 - 7efdc8311000]   44.433540 {3}{RequestManager}: (47, 35)
[0 - 7efdc8311000]   44.433541 {3}{RequestManager}: (27804, 36)
[0 - 7efdc8311000]   44.433543 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   44.433544 {3}{RequestManager}: (27, 0)
[0 - 7efdc8311000]   44.433545 {3}{RequestManager}: (28, 1)
[0 - 7efdc8311000]   44.433546 {3}{RequestManager}: (29, 2)
[0 - 7efdc8311000]   44.433547 {3}{RequestManager}: (30, 3)
[0 - 7efdc8311000]   44.433548 {3}{RequestManager}: (31, 4)
[0 - 7efdc8311000]   44.433549 {3}{RequestManager}: (32, 5)
[0 - 7efdc8311000]   44.433551 {3}{RequestManager}: (33, 6)
[0 - 7efdc8311000]   44.433552 {3}{RequestManager}: (34, 7)
[0 - 7efdc8311000]   44.433553 {3}{RequestManager}: (35, 8)
[0 - 7efdc8311000]   44.433556 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   44.433557 {3}{RequestManager}: (10, 28)
[0 - 7efdc8311000]   44.433558 {3}{RequestManager}: (689, 29)
[0 - 7efdc8311000]   44.433559 {3}{RequestManager}: (14310, 30)
[0 - 7efdc8311000]   44.433560 {3}{RequestManager}: (5961, 31)
[0 - 7efdc8311000]   44.433562 {3}{RequestManager}: (3944, 32)
[0 - 7efdc8311000]   44.433563 {3}{RequestManager}: (14, 33)
[0 - 7efdc8311000]   44.433564 {3}{RequestManager}: (8382, 34)
[0 - 7efdc8311000]   44.433565 {3}{RequestManager}: (47, 35)
[0 - 7efdc8311000]   44.433566 {3}{RequestManager}: (27804, 36)
[0 - 7efdc8311000]   44.433567 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   44.433569 {3}{RequestManager}: (27, 0)
[0 - 7efdc8311000]   44.433570 {3}{RequestManager}: (28, 1)
[0 - 7efdc8311000]   44.433571 {3}{RequestManager}: (29, 2)
[0 - 7efdc8311000]   44.433572 {3}{RequestManager}: (30, 3)
[0 - 7efdc8311000]   44.433573 {3}{RequestManager}: (31, 4)
[0 - 7efdc8311000]   44.433575 {3}{RequestManager}: (32, 5)
[0 - 7efdc8311000]   44.433576 {3}{RequestManager}: (33, 6)
[0 - 7efdc8311000]   44.433577 {3}{RequestManager}: (34, 7)
[0 - 7efdc8311000]   44.433578 {3}{RequestManager}: (35, 8)
[0 - 7efdc8311000]   44.433580 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   44.433611 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop
[0 - 7efdc8311000]   44.433613 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   44.433614 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   44.433615 {3}{RequestManager}: (8382, 55)
[0 - 7efdc8311000]   44.433617 {3}{RequestManager}: (47, 56)
[0 - 7efdc8311000]   44.433618 {3}{RequestManager}: (27804, 57)
[0 - 7efdc8311000]   44.433619 {3}{RequestManager}: (12849, 58)
[0 - 7efdc8311000]   44.433620 {3}{RequestManager}: (8, 59)
[0 - 7efdc8311000]   44.433621 {3}{RequestManager}: (8942, 60)
[0 - 7efdc8311000]   44.433645 {3}{RequestManager}: (4, 61)
[0 - 7efdc8311000]   44.433646 {3}{RequestManager}: (50118, 62)
[0 - 7efdc8311000]   44.433647 {3}{RequestManager}: (50118, 63)
[0 - 7efdc8311000]   44.433648 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   44.433649 {3}{RequestManager}: (47, 56)
[0 - 7efdc8311000]   44.433650 {3}{RequestManager}: (27804, 57)
[0 - 7efdc8311000]   44.433652 {3}{RequestManager}: (12849, 58)
[0 - 7efdc8311000]   44.433653 {3}{RequestManager}: (8, 59)
[0 - 7efdc8311000]   44.433654 {3}{RequestManager}: (8942, 60)
[0 - 7efdc8311000]   44.433655 {3}{RequestManager}: (4, 61)
[0 - 7efdc8311000]   44.433656 {3}{RequestManager}: (50118, 62)
[0 - 7efdc8311000]   44.433657 {3}{RequestManager}: (50118, 63)
[0 - 7efdc8311000]   44.433658 {3}{RequestManager}: (45714, 64)
[0 - 7efdc8311000]   44.433659 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   44.433660 {3}{RequestManager}: (55, 9)
[0 - 7efdc8311000]   44.433661 {3}{RequestManager}: (56, 10)
[0 - 7efdc8311000]   44.433662 {3}{RequestManager}: (57, 11)
[0 - 7efdc8311000]   44.433664 {3}{RequestManager}: (58, 12)
[0 - 7efdc8311000]   44.433665 {3}{RequestManager}: (59, 13)
[0 - 7efdc8311000]   44.433666 {3}{RequestManager}: (60, 14)
[0 - 7efdc8311000]   44.433683 {3}{RequestManager}: (61, 15)
[0 - 7efdc8311000]   44.433684 {3}{RequestManager}: (62, 16)
[0 - 7efdc8311000]   44.433686 {3}{RequestManager}: (63, 17)
[0 - 7efdc8311000]   44.433688 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   44.433689 {3}{RequestManager}: (47, 56)
[0 - 7efdc8311000]   44.433690 {3}{RequestManager}: (27804, 57)
[0 - 7efdc8311000]   44.433691 {3}{RequestManager}: (12849, 58)
[0 - 7efdc8311000]   44.433692 {3}{RequestManager}: (8, 59)
[0 - 7efdc8311000]   44.433693 {3}{RequestManager}: (8942, 60)
[0 - 7efdc8311000]   44.433695 {3}{RequestManager}: (4, 61)
[0 - 7efdc8311000]   44.433696 {3}{RequestManager}: (50118, 62)
[0 - 7efdc8311000]   44.433697 {3}{RequestManager}: (50118, 63)
[0 - 7efdc8311000]   44.433698 {3}{RequestManager}: (45714, 64)
[0 - 7efdc8311000]   44.433699 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   44.433700 {3}{RequestManager}: (55, 9)
[0 - 7efdc8311000]   44.433702 {3}{RequestManager}: (56, 10)
[0 - 7efdc8311000]   44.433703 {3}{RequestManager}: (57, 11)
[0 - 7efdc8311000]   44.433704 {3}{RequestManager}: (58, 12)
[0 - 7efdc8311000]   44.433705 {3}{RequestManager}: (59, 13)
[0 - 7efdc8311000]   44.433706 {3}{RequestManager}: (60, 14)
[0 - 7efdc8311000]   44.433707 {3}{RequestManager}: (61, 15)
[0 - 7efdc8311000]   44.433708 {3}{RequestManager}: (62, 16)
[0 - 7efdc8311000]   44.433709 {3}{RequestManager}: (63, 17)
[0 - 7efdc8311000]   44.433711 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   44.433731 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   46.792447 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   46.792453 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   46.792455 {3}{RequestManager}: (27804, 36)
[0 - 7efdc8311000]   46.792456 {3}{RequestManager}: (10, 37)
[0 - 7efdc8311000]   46.792457 {3}{RequestManager}: (319, 38)
[0 - 7efdc8311000]   46.792459 {3}{RequestManager}: (9, 39)
[0 - 7efdc8311000]   46.792460 {3}{RequestManager}: (383, 40)
[0 - 7efdc8311000]   46.792461 {3}{RequestManager}: (4, 41)
[0 - 7efdc8311000]   46.792462 {3}{RequestManager}: (50118, 42)
[0 - 7efdc8311000]   46.792463 {3}{RequestManager}: (50118, 43)
[0 - 7efdc8311000]   46.792465 {3}{RequestManager}: (133, 44)
[0 - 7efdc8311000]   46.792466 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   46.792467 {3}{RequestManager}: (12849, 37)
[0 - 7efdc8311000]   46.792468 {3}{RequestManager}: (3143, 38)
[0 - 7efdc8311000]   46.792469 {3}{RequestManager}: (9, 39)
[0 - 7efdc8311000]   46.792470 {3}{RequestManager}: (430, 40)
[0 - 7efdc8311000]   46.792471 {3}{RequestManager}: (23, 41)
[0 - 7efdc8311000]   46.792472 {3}{RequestManager}: (50118, 42)
[0 - 7efdc8311000]   46.792473 {3}{RequestManager}: (50118, 43)
[0 - 7efdc8311000]   46.792475 {3}{RequestManager}: (45714, 44)
[0 - 7efdc8311000]   46.792476 {3}{RequestManager}: (1152, 45)
[0 - 7efdc8311000]   46.792477 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   46.792478 {3}{RequestManager}: (36, 0)
[0 - 7efdc8311000]   46.792479 {3}{RequestManager}: (37, 1)
[0 - 7efdc8311000]   46.792480 {3}{RequestManager}: (38, 2)
[0 - 7efdc8311000]   46.792481 {3}{RequestManager}: (39, 3)
[0 - 7efdc8311000]   46.792482 {3}{RequestManager}: (40, 4)
[0 - 7efdc8311000]   46.792483 {3}{RequestManager}: (41, 5)
[0 - 7efdc8311000]   46.792484 {3}{RequestManager}: (42, 6)
[0 - 7efdc8311000]   46.792485 {3}{RequestManager}: (43, 7)
[0 - 7efdc8311000]   46.792487 {3}{RequestManager}: (44, 8)
[0 - 7efdc8311000]   46.792489 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   46.792490 {3}{RequestManager}: (12849, 37)
[0 - 7efdc8311000]   46.792491 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   46.792492 {3}{RequestManager}: (36, 0)
[0 - 7efdc8311000]   46.792494 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]   46.792525 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits
[0 - 7efdc8311000]   46.792527 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   46.792528 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   46.792530 {3}{RequestManager}: (45714, 64)
[0 - 7efdc8311000]   46.792531 {3}{RequestManager}: (10, 65)
[0 - 7efdc8311000]   46.792532 {3}{RequestManager}: (4271, 66)
[0 - 7efdc8311000]   46.792533 {3}{RequestManager}: (1152, 67)
[0 - 7efdc8311000]   46.792534 {3}{RequestManager}: (8194, 68)
[0 - 7efdc8311000]   46.792535 {3}{RequestManager}: (13, 69)
[0 - 7efdc8311000]   46.792536 {3}{RequestManager}: (10, 70)
[0 - 7efdc8311000]   46.792538 {3}{RequestManager}: (689, 71)
[0 - 7efdc8311000]   46.792539 {3}{RequestManager}: (14310, 72)
[0 - 7efdc8311000]   46.792540 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   46.792541 {3}{RequestManager}: (10, 65)
[0 - 7efdc8311000]   46.792542 {3}{RequestManager}: (4271, 66)
[0 - 7efdc8311000]   46.792543 {3}{RequestManager}: (1152, 67)
[0 - 7efdc8311000]   46.792545 {3}{RequestManager}: (8194, 68)
[0 - 7efdc8311000]   46.792546 {3}{RequestManager}: (13, 69)
[0 - 7efdc8311000]   46.792547 {3}{RequestManager}: (10, 70)
[0 - 7efdc8311000]   46.792548 {3}{RequestManager}: (689, 71)
[0 - 7efdc8311000]   46.792549 {3}{RequestManager}: (14310, 72)
[0 - 7efdc8311000]   46.792550 {3}{RequestManager}: (5961, 73)
[0 - 7efdc8311000]   46.792551 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   46.792552 {3}{RequestManager}: (64, 9)
[0 - 7efdc8311000]   46.792576 {3}{RequestManager}: (65, 10)
[0 - 7efdc8311000]   46.792578 {3}{RequestManager}: (66, 11)
[0 - 7efdc8311000]   46.792579 {3}{RequestManager}: (67, 12)
[0 - 7efdc8311000]   46.792580 {3}{RequestManager}: (68, 13)
[0 - 7efdc8311000]   46.792581 {3}{RequestManager}: (69, 14)
[0 - 7efdc8311000]   46.792582 {3}{RequestManager}: (70, 15)
[0 - 7efdc8311000]   46.792583 {3}{RequestManager}: (71, 16)
[0 - 7efdc8311000]   46.792584 {3}{RequestManager}: (72, 17)
[0 - 7efdc8311000]   46.792587 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   46.792588 {3}{RequestManager}: (10, 65)
[0 - 7efdc8311000]   46.792589 {3}{RequestManager}: (4271, 66)
[0 - 7efdc8311000]   46.792590 {3}{RequestManager}: (1152, 67)
[0 - 7efdc8311000]   46.792591 {3}{RequestManager}: (8194, 68)
[0 - 7efdc8311000]   46.792592 {3}{RequestManager}: (13, 69)
[0 - 7efdc8311000]   46.792593 {3}{RequestManager}: (10, 70)
[0 - 7efdc8311000]   46.792594 {3}{RequestManager}: (689, 71)
[0 - 7efdc8311000]   46.792595 {3}{RequestManager}: (14310, 72)
[0 - 7efdc8311000]   46.792596 {3}{RequestManager}: (5961, 73)
[0 - 7efdc8311000]   46.792598 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   46.792599 {3}{RequestManager}: (64, 9)
[0 - 7efdc8311000]   46.792600 {3}{RequestManager}: (65, 10)
[0 - 7efdc8311000]   46.792601 {3}{RequestManager}: (66, 11)
[0 - 7efdc8311000]   46.792602 {3}{RequestManager}: (67, 12)
[0 - 7efdc8311000]   46.792603 {3}{RequestManager}: (68, 13)
[0 - 7efdc8311000]   46.792604 {3}{RequestManager}: (69, 14)
[0 - 7efdc8311000]   46.792605 {3}{RequestManager}: (70, 15)
[0 - 7efdc8311000]   46.792623 {3}{RequestManager}: (71, 16)
[0 - 7efdc8311000]   46.792624 {3}{RequestManager}: (72, 17)
[0 - 7efdc8311000]   46.792625 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   46.792649 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   49.151132 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   49.151138 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   49.151139 {3}{RequestManager}: (12849, 37)
[0 - 7efdc8311000]   49.151141 {3}{RequestManager}: (8, 38)
[0 - 7efdc8311000]   49.151142 {3}{RequestManager}: (8942, 39)
[0 - 7efdc8311000]   49.151144 {3}{RequestManager}: (4, 40)
[0 - 7efdc8311000]   49.151145 {3}{RequestManager}: (50118, 41)
[0 - 7efdc8311000]   49.151146 {3}{RequestManager}: (50118, 42)
[0 - 7efdc8311000]   49.151147 {3}{RequestManager}: (41602, 43)
[0 - 7efdc8311000]   49.151148 {3}{RequestManager}: (50118, 44)
[0 - 7efdc8311000]   49.151150 {3}{RequestManager}: (50118, 45)
[0 - 7efdc8311000]   49.151151 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   49.151152 {3}{RequestManager}: (8, 38)
[0 - 7efdc8311000]   49.151153 {3}{RequestManager}: (8942, 39)
[0 - 7efdc8311000]   49.151154 {3}{RequestManager}: (4, 40)
[0 - 7efdc8311000]   49.151155 {3}{RequestManager}: (50118, 41)
[0 - 7efdc8311000]   49.151156 {3}{RequestManager}: (50118, 42)
[0 - 7efdc8311000]   49.151158 {3}{RequestManager}: (45714, 43)
[0 - 7efdc8311000]   49.151159 {3}{RequestManager}: (50118, 44)
[0 - 7efdc8311000]   49.151160 {3}{RequestManager}: (50118, 45)
[0 - 7efdc8311000]   49.151161 {3}{RequestManager}: (45714, 46)
[0 - 7efdc8311000]   49.151162 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   49.151163 {3}{RequestManager}: (37, 0)
[0 - 7efdc8311000]   49.151165 {3}{RequestManager}: (38, 1)
[0 - 7efdc8311000]   49.151166 {3}{RequestManager}: (39, 2)
[0 - 7efdc8311000]   49.151167 {3}{RequestManager}: (40, 3)
[0 - 7efdc8311000]   49.151168 {3}{RequestManager}: (41, 4)
[0 - 7efdc8311000]   49.151169 {3}{RequestManager}: (42, 5)
[0 - 7efdc8311000]   49.151170 {3}{RequestManager}: (43, 6)
[0 - 7efdc8311000]   49.151171 {3}{RequestManager}: (44, 7)
[0 - 7efdc8311000]   49.151173 {3}{RequestManager}: (45, 8)
[0 - 7efdc8311000]   49.151175 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   49.151177 {3}{RequestManager}: (8, 38)
[0 - 7efdc8311000]   49.151178 {3}{RequestManager}: (8942, 39)
[0 - 7efdc8311000]   49.151179 {3}{RequestManager}: (4, 40)
[0 - 7efdc8311000]   49.151180 {3}{RequestManager}: (50118, 41)
[0 - 7efdc8311000]   49.151181 {3}{RequestManager}: (50118, 42)
[0 - 7efdc8311000]   49.151182 {3}{RequestManager}: (45714, 43)
[0 - 7efdc8311000]   49.151184 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   49.151185 {3}{RequestManager}: (37, 0)
[0 - 7efdc8311000]   49.151186 {3}{RequestManager}: (38, 1)
[0 - 7efdc8311000]   49.151187 {3}{RequestManager}: (39, 2)
[0 - 7efdc8311000]   49.151188 {3}{RequestManager}: (40, 3)
[0 - 7efdc8311000]   49.151189 {3}{RequestManager}: (41, 4)
[0 - 7efdc8311000]   49.151191 {3}{RequestManager}: (42, 5)
[0 - 7efdc8311000]   49.151192 {3}{RequestManager}: Number of Verified Tokens = 6
[0 - 7efdc8311000]   49.151229 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write
[0 - 7efdc8311000]   49.151231 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   49.151233 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   49.151234 {3}{RequestManager}: (5961, 73)
[0 - 7efdc8311000]   49.151235 {3}{RequestManager}: (3944, 74)
[0 - 7efdc8311000]   49.151237 {3}{RequestManager}: (14, 75)
[0 - 7efdc8311000]   49.151238 {3}{RequestManager}: (8382, 76)
[0 - 7efdc8311000]   49.151239 {3}{RequestManager}: (47, 77)
[0 - 7efdc8311000]   49.151240 {3}{RequestManager}: (27804, 78)
[0 - 7efdc8311000]   49.151241 {3}{RequestManager}: (12849, 79)
[0 - 7efdc8311000]   49.151243 {3}{RequestManager}: (8, 80)
[0 - 7efdc8311000]   49.151244 {3}{RequestManager}: (8942, 81)
[0 - 7efdc8311000]   49.151245 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   49.151246 {3}{RequestManager}: (3944, 74)
[0 - 7efdc8311000]   49.151272 {3}{RequestManager}: (14, 75)
[0 - 7efdc8311000]   49.151274 {3}{RequestManager}: (8382, 76)
[0 - 7efdc8311000]   49.151275 {3}{RequestManager}: (47, 77)
[0 - 7efdc8311000]   49.151276 {3}{RequestManager}: (27804, 78)
[0 - 7efdc8311000]   49.151277 {3}{RequestManager}: (12849, 79)
[0 - 7efdc8311000]   49.151278 {3}{RequestManager}: (8, 80)
[0 - 7efdc8311000]   49.151280 {3}{RequestManager}: (8942, 81)
[0 - 7efdc8311000]   49.151281 {3}{RequestManager}: (4, 82)
[0 - 7efdc8311000]   49.151282 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   49.151283 {3}{RequestManager}: (73, 9)
[0 - 7efdc8311000]   49.151284 {3}{RequestManager}: (74, 10)
[0 - 7efdc8311000]   49.151285 {3}{RequestManager}: (75, 11)
[0 - 7efdc8311000]   49.151286 {3}{RequestManager}: (76, 12)
[0 - 7efdc8311000]   49.151288 {3}{RequestManager}: (77, 13)
[0 - 7efdc8311000]   49.151289 {3}{RequestManager}: (78, 14)
[0 - 7efdc8311000]   49.151290 {3}{RequestManager}: (79, 15)
[0 - 7efdc8311000]   49.151291 {3}{RequestManager}: (80, 16)
[0 - 7efdc8311000]   49.151292 {3}{RequestManager}: (81, 17)
[0 - 7efdc8311000]   49.151295 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   49.151296 {3}{RequestManager}: (3944, 74)
[0 - 7efdc8311000]   49.151297 {3}{RequestManager}: (14, 75)
[0 - 7efdc8311000]   49.151299 {3}{RequestManager}: (8382, 76)
[0 - 7efdc8311000]   49.151300 {3}{RequestManager}: (47, 77)
[0 - 7efdc8311000]   49.151301 {3}{RequestManager}: (27804, 78)
[0 - 7efdc8311000]   49.151302 {3}{RequestManager}: (12849, 79)
[0 - 7efdc8311000]   49.151303 {3}{RequestManager}: (8, 80)
[0 - 7efdc8311000]   49.151304 {3}{RequestManager}: (8942, 81)
[0 - 7efdc8311000]   49.151306 {3}{RequestManager}: (4, 82)
[0 - 7efdc8311000]   49.151307 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   49.151308 {3}{RequestManager}: (73, 9)
[0 - 7efdc8311000]   49.151309 {3}{RequestManager}: (74, 10)
[0 - 7efdc8311000]   49.151310 {3}{RequestManager}: (75, 11)
[0 - 7efdc8311000]   49.151311 {3}{RequestManager}: (76, 12)
[0 - 7efdc8311000]   49.151313 {3}{RequestManager}: (77, 13)
[0 - 7efdc8311000]   49.151314 {3}{RequestManager}: (78, 14)
[0 - 7efdc8311000]   49.151315 {3}{RequestManager}: (79, 15)
[0 - 7efdc8311000]   49.151316 {3}{RequestManager}: (80, 16)
[0 - 7efdc8311000]   49.151317 {3}{RequestManager}: (81, 17)
[0 - 7efdc8311000]   49.151319 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   49.151346 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   51.511998 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   51.512004 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   51.512005 {3}{RequestManager}: (45714, 43)
[0 - 7efdc8311000]   51.512007 {3}{RequestManager}: (10, 44)
[0 - 7efdc8311000]   51.512008 {3}{RequestManager}: (8194, 45)
[0 - 7efdc8311000]   51.512009 {3}{RequestManager}: (50118, 46)
[0 - 7efdc8311000]   51.512010 {3}{RequestManager}: (50118, 47)
[0 - 7efdc8311000]   51.512011 {3}{RequestManager}: (50118, 48)
[0 - 7efdc8311000]   51.512012 {3}{RequestManager}: (50118, 49)
[0 - 7efdc8311000]   51.512013 {3}{RequestManager}: (50118, 50)
[0 - 7efdc8311000]   51.512014 {3}{RequestManager}: (50118, 51)
[0 - 7efdc8311000]   51.512015 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   51.512016 {3}{RequestManager}: (10, 44)
[0 - 7efdc8311000]   51.512017 {3}{RequestManager}: (4271, 45)
[0 - 7efdc8311000]   51.512018 {3}{RequestManager}: (13, 46)
[0 - 7efdc8311000]   51.512019 {3}{RequestManager}: (50118, 47)
[0 - 7efdc8311000]   51.512020 {3}{RequestManager}: (45714, 48)
[0 - 7efdc8311000]   51.512021 {3}{RequestManager}: (45714, 49)
[0 - 7efdc8311000]   51.512022 {3}{RequestManager}: (45714, 50)
[0 - 7efdc8311000]   51.512023 {3}{RequestManager}: (45714, 51)
[0 - 7efdc8311000]   51.512024 {3}{RequestManager}: (45714, 52)
[0 - 7efdc8311000]   51.512025 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   51.512026 {3}{RequestManager}: (43, 0)
[0 - 7efdc8311000]   51.512027 {3}{RequestManager}: (44, 1)
[0 - 7efdc8311000]   51.512028 {3}{RequestManager}: (45, 2)
[0 - 7efdc8311000]   51.512029 {3}{RequestManager}: (46, 3)
[0 - 7efdc8311000]   51.512030 {3}{RequestManager}: (47, 4)
[0 - 7efdc8311000]   51.512031 {3}{RequestManager}: (48, 5)
[0 - 7efdc8311000]   51.512032 {3}{RequestManager}: (49, 6)
[0 - 7efdc8311000]   51.512033 {3}{RequestManager}: (50, 7)
[0 - 7efdc8311000]   51.512034 {3}{RequestManager}: (51, 8)
[0 - 7efdc8311000]   51.512036 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   51.512037 {3}{RequestManager}: (10, 44)
[0 - 7efdc8311000]   51.512038 {3}{RequestManager}: (4271, 45)
[0 - 7efdc8311000]   51.512039 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   51.512040 {3}{RequestManager}: (43, 0)
[0 - 7efdc8311000]   51.512041 {3}{RequestManager}: (44, 1)
[0 - 7efdc8311000]   51.512043 {3}{RequestManager}: Number of Verified Tokens = 2
[0 - 7efdc8311000]   51.512077 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed
[0 - 7efdc8311000]   51.512079 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   51.512080 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   51.512081 {3}{RequestManager}: (4, 82)
[0 - 7efdc8311000]   51.512082 {3}{RequestManager}: (50118, 83)
[0 - 7efdc8311000]   51.512083 {3}{RequestManager}: (50118, 84)
[0 - 7efdc8311000]   51.512084 {3}{RequestManager}: (45714, 85)
[0 - 7efdc8311000]   51.512085 {3}{RequestManager}: (10, 86)
[0 - 7efdc8311000]   51.512086 {3}{RequestManager}: (4271, 87)
[0 - 7efdc8311000]   51.512088 {3}{RequestManager}: (1152, 88)
[0 - 7efdc8311000]   51.512089 {3}{RequestManager}: (8194, 89)
[0 - 7efdc8311000]   51.512090 {3}{RequestManager}: (13, 90)
[0 - 7efdc8311000]   51.512091 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   51.512092 {3}{RequestManager}: (50118, 83)
[0 - 7efdc8311000]   51.512093 {3}{RequestManager}: (50118, 84)
[0 - 7efdc8311000]   51.512094 {3}{RequestManager}: (45714, 85)
[0 - 7efdc8311000]   51.512095 {3}{RequestManager}: (10, 86)
[0 - 7efdc8311000]   51.512096 {3}{RequestManager}: (4271, 87)
[0 - 7efdc8311000]   51.512097 {3}{RequestManager}: (1152, 88)
[0 - 7efdc8311000]   51.512098 {3}{RequestManager}: (8194, 89)
[0 - 7efdc8311000]   51.512099 {3}{RequestManager}: (13, 90)
[0 - 7efdc8311000]   51.512100 {3}{RequestManager}: (10, 91)
[0 - 7efdc8311000]   51.512123 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   51.512124 {3}{RequestManager}: (82, 9)
[0 - 7efdc8311000]   51.512125 {3}{RequestManager}: (83, 10)
[0 - 7efdc8311000]   51.512126 {3}{RequestManager}: (84, 11)
[0 - 7efdc8311000]   51.512127 {3}{RequestManager}: (85, 12)
[0 - 7efdc8311000]   51.512128 {3}{RequestManager}: (86, 13)
[0 - 7efdc8311000]   51.512129 {3}{RequestManager}: (87, 14)
[0 - 7efdc8311000]   51.512130 {3}{RequestManager}: (88, 15)
[0 - 7efdc8311000]   51.512131 {3}{RequestManager}: (89, 16)
[0 - 7efdc8311000]   51.512132 {3}{RequestManager}: (90, 17)
[0 - 7efdc8311000]   51.512135 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   51.512136 {3}{RequestManager}: (50118, 83)
[0 - 7efdc8311000]   51.512137 {3}{RequestManager}: (50118, 84)
[0 - 7efdc8311000]   51.512138 {3}{RequestManager}: (45714, 85)
[0 - 7efdc8311000]   51.512139 {3}{RequestManager}: (10, 86)
[0 - 7efdc8311000]   51.512140 {3}{RequestManager}: (4271, 87)
[0 - 7efdc8311000]   51.512141 {3}{RequestManager}: (1152, 88)
[0 - 7efdc8311000]   51.512142 {3}{RequestManager}: (8194, 89)
[0 - 7efdc8311000]   51.512143 {3}{RequestManager}: (13, 90)
[0 - 7efdc8311000]   51.512144 {3}{RequestManager}: (10, 91)
[0 - 7efdc8311000]   51.512161 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   51.512163 {3}{RequestManager}: (82, 9)
[0 - 7efdc8311000]   51.512164 {3}{RequestManager}: (83, 10)
[0 - 7efdc8311000]   51.512165 {3}{RequestManager}: (84, 11)
[0 - 7efdc8311000]   51.512166 {3}{RequestManager}: (85, 12)
[0 - 7efdc8311000]   51.512167 {3}{RequestManager}: (86, 13)
[0 - 7efdc8311000]   51.512168 {3}{RequestManager}: (87, 14)
[0 - 7efdc8311000]   51.512169 {3}{RequestManager}: (88, 15)
[0 - 7efdc8311000]   51.512170 {3}{RequestManager}: (89, 16)
[0 - 7efdc8311000]   51.512171 {3}{RequestManager}: (90, 17)
[0 - 7efdc8311000]   51.512172 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   51.512200 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   53.868834 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   53.868841 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   53.868843 {3}{RequestManager}: (4271, 45)
[0 - 7efdc8311000]   53.868844 {3}{RequestManager}: (8194, 46)
[0 - 7efdc8311000]   53.868846 {3}{RequestManager}: (59, 47)
[0 - 7efdc8311000]   53.868847 {3}{RequestManager}: (10, 48)
[0 - 7efdc8311000]   53.868848 {3}{RequestManager}: (689, 49)
[0 - 7efdc8311000]   53.868849 {3}{RequestManager}: (14310, 50)
[0 - 7efdc8311000]   53.868851 {3}{RequestManager}: (5961, 51)
[0 - 7efdc8311000]   53.868852 {3}{RequestManager}: (3944, 52)
[0 - 7efdc8311000]   53.868853 {3}{RequestManager}: (14, 53)
[0 - 7efdc8311000]   53.868854 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   53.868855 {3}{RequestManager}: (1152, 46)
[0 - 7efdc8311000]   53.868857 {3}{RequestManager}: (13, 47)
[0 - 7efdc8311000]   53.868858 {3}{RequestManager}: (10, 48)
[0 - 7efdc8311000]   53.868859 {3}{RequestManager}: (689, 49)
[0 - 7efdc8311000]   53.868860 {3}{RequestManager}: (14310, 50)
[0 - 7efdc8311000]   53.868861 {3}{RequestManager}: (5961, 51)
[0 - 7efdc8311000]   53.868863 {3}{RequestManager}: (3944, 52)
[0 - 7efdc8311000]   53.868864 {3}{RequestManager}: (14, 53)
[0 - 7efdc8311000]   53.868865 {3}{RequestManager}: (8382, 54)
[0 - 7efdc8311000]   53.868866 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   53.868867 {3}{RequestManager}: (45, 0)
[0 - 7efdc8311000]   53.868868 {3}{RequestManager}: (46, 1)
[0 - 7efdc8311000]   53.868870 {3}{RequestManager}: (47, 2)
[0 - 7efdc8311000]   53.868871 {3}{RequestManager}: (48, 3)
[0 - 7efdc8311000]   53.868872 {3}{RequestManager}: (49, 4)
[0 - 7efdc8311000]   53.868873 {3}{RequestManager}: (50, 5)
[0 - 7efdc8311000]   53.868874 {3}{RequestManager}: (51, 6)
[0 - 7efdc8311000]   53.868875 {3}{RequestManager}: (52, 7)
[0 - 7efdc8311000]   53.868876 {3}{RequestManager}: (53, 8)
[0 - 7efdc8311000]   53.868879 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   53.868880 {3}{RequestManager}: (1152, 46)
[0 - 7efdc8311000]   53.868881 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   53.868882 {3}{RequestManager}: (45, 0)
[0 - 7efdc8311000]   53.868884 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]   53.868918 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product
[0 - 7efdc8311000]   53.868921 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   53.868922 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   53.868923 {3}{RequestManager}: (10, 91)
[0 - 7efdc8311000]   53.868925 {3}{RequestManager}: (689, 92)
[0 - 7efdc8311000]   53.868926 {3}{RequestManager}: (14310, 93)
[0 - 7efdc8311000]   53.868927 {3}{RequestManager}: (5961, 94)
[0 - 7efdc8311000]   53.868928 {3}{RequestManager}: (3944, 95)
[0 - 7efdc8311000]   53.868930 {3}{RequestManager}: (14, 96)
[0 - 7efdc8311000]   53.868931 {3}{RequestManager}: (8382, 97)
[0 - 7efdc8311000]   53.868932 {3}{RequestManager}: (47, 98)
[0 - 7efdc8311000]   53.868933 {3}{RequestManager}: (27804, 99)
[0 - 7efdc8311000]   53.868935 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   53.868936 {3}{RequestManager}: (689, 92)
[0 - 7efdc8311000]   53.868937 {3}{RequestManager}: (14310, 93)
[0 - 7efdc8311000]   53.868938 {3}{RequestManager}: (5961, 94)
[0 - 7efdc8311000]   53.868939 {3}{RequestManager}: (3944, 95)
[0 - 7efdc8311000]   53.868940 {3}{RequestManager}: (14, 96)
[0 - 7efdc8311000]   53.868941 {3}{RequestManager}: (8382, 97)
[0 - 7efdc8311000]   53.868943 {3}{RequestManager}: (47, 98)
[0 - 7efdc8311000]   53.868944 {3}{RequestManager}: (27804, 99)
[0 - 7efdc8311000]   53.868945 {3}{RequestManager}: (12849, 100)
[0 - 7efdc8311000]   53.868946 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   53.868970 {3}{RequestManager}: (91, 9)
[0 - 7efdc8311000]   53.868972 {3}{RequestManager}: (92, 10)
[0 - 7efdc8311000]   53.868973 {3}{RequestManager}: (93, 11)
[0 - 7efdc8311000]   53.868974 {3}{RequestManager}: (94, 12)
[0 - 7efdc8311000]   53.868975 {3}{RequestManager}: (95, 13)
[0 - 7efdc8311000]   53.868976 {3}{RequestManager}: (96, 14)
[0 - 7efdc8311000]   53.868977 {3}{RequestManager}: (97, 15)
[0 - 7efdc8311000]   53.868978 {3}{RequestManager}: (98, 16)
[0 - 7efdc8311000]   53.868980 {3}{RequestManager}: (99, 17)
[0 - 7efdc8311000]   53.868982 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   53.868983 {3}{RequestManager}: (689, 92)
[0 - 7efdc8311000]   53.868984 {3}{RequestManager}: (14310, 93)
[0 - 7efdc8311000]   53.868986 {3}{RequestManager}: (5961, 94)
[0 - 7efdc8311000]   53.868987 {3}{RequestManager}: (3944, 95)
[0 - 7efdc8311000]   53.868988 {3}{RequestManager}: (14, 96)
[0 - 7efdc8311000]   53.868989 {3}{RequestManager}: (8382, 97)
[0 - 7efdc8311000]   53.868990 {3}{RequestManager}: (47, 98)
[0 - 7efdc8311000]   53.868991 {3}{RequestManager}: (27804, 99)
[0 - 7efdc8311000]   53.868993 {3}{RequestManager}: (12849, 100)
[0 - 7efdc8311000]   53.868994 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   53.868995 {3}{RequestManager}: (91, 9)
[0 - 7efdc8311000]   53.868996 {3}{RequestManager}: (92, 10)
[0 - 7efdc8311000]   53.868997 {3}{RequestManager}: (93, 11)
[0 - 7efdc8311000]   53.868998 {3}{RequestManager}: (94, 12)
[0 - 7efdc8311000]   53.869000 {3}{RequestManager}: (95, 13)
[0 - 7efdc8311000]   53.869001 {3}{RequestManager}: (96, 14)
[0 - 7efdc8311000]   53.869002 {3}{RequestManager}: (97, 15)
[0 - 7efdc8311000]   53.869003 {3}{RequestManager}: (98, 16)
[0 - 7efdc8311000]   53.869004 {3}{RequestManager}: (99, 17)
[0 - 7efdc8311000]   53.869005 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   53.869037 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   56.231071 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   56.231077 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   56.231078 {3}{RequestManager}: (1152, 46)
[0 - 7efdc8311000]   56.231080 {3}{RequestManager}: (8194, 47)
[0 - 7efdc8311000]   56.231081 {3}{RequestManager}: (8194, 48)
[0 - 7efdc8311000]   56.231082 {3}{RequestManager}: (59, 49)
[0 - 7efdc8311000]   56.231084 {3}{RequestManager}: (10, 50)
[0 - 7efdc8311000]   56.231085 {3}{RequestManager}: (689, 51)
[0 - 7efdc8311000]   56.231086 {3}{RequestManager}: (14310, 52)
[0 - 7efdc8311000]   56.231088 {3}{RequestManager}: (5961, 53)
[0 - 7efdc8311000]   56.231089 {3}{RequestManager}: (3944, 54)
[0 - 7efdc8311000]   56.231090 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   56.231091 {3}{RequestManager}: (8194, 47)
[0 - 7efdc8311000]   56.231092 {3}{RequestManager}: (13, 48)
[0 - 7efdc8311000]   56.231093 {3}{RequestManager}: (13, 49)
[0 - 7efdc8311000]   56.231095 {3}{RequestManager}: (10, 50)
[0 - 7efdc8311000]   56.231096 {3}{RequestManager}: (689, 51)
[0 - 7efdc8311000]   56.231097 {3}{RequestManager}: (14310, 52)
[0 - 7efdc8311000]   56.231098 {3}{RequestManager}: (5961, 53)
[0 - 7efdc8311000]   56.231099 {3}{RequestManager}: (3944, 54)
[0 - 7efdc8311000]   56.231100 {3}{RequestManager}: (14, 55)
[0 - 7efdc8311000]   56.231101 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   56.231103 {3}{RequestManager}: (46, 0)
[0 - 7efdc8311000]   56.231104 {3}{RequestManager}: (47, 1)
[0 - 7efdc8311000]   56.231105 {3}{RequestManager}: (48, 2)
[0 - 7efdc8311000]   56.231106 {3}{RequestManager}: (49, 3)
[0 - 7efdc8311000]   56.231107 {3}{RequestManager}: (50, 4)
[0 - 7efdc8311000]   56.231108 {3}{RequestManager}: (51, 5)
[0 - 7efdc8311000]   56.231109 {3}{RequestManager}: (52, 6)
[0 - 7efdc8311000]   56.231111 {3}{RequestManager}: (53, 7)
[0 - 7efdc8311000]   56.231112 {3}{RequestManager}: (54, 8)
[0 - 7efdc8311000]   56.231115 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   56.231116 {3}{RequestManager}: (8194, 47)
[0 - 7efdc8311000]   56.231117 {3}{RequestManager}: (13, 48)
[0 - 7efdc8311000]   56.231118 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   56.231119 {3}{RequestManager}: (46, 0)
[0 - 7efdc8311000]   56.231121 {3}{RequestManager}: (47, 1)
[0 - 7efdc8311000]   56.231122 {3}{RequestManager}: Number of Verified Tokens = 2
[0 - 7efdc8311000]   56.231159 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for
[0 - 7efdc8311000]   56.231161 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   56.231162 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   56.231164 {3}{RequestManager}: (12849, 100)
[0 - 7efdc8311000]   56.231165 {3}{RequestManager}: (8, 101)
[0 - 7efdc8311000]   56.231166 {3}{RequestManager}: (8942, 102)
[0 - 7efdc8311000]   56.231168 {3}{RequestManager}: (4, 103)
[0 - 7efdc8311000]   56.231169 {3}{RequestManager}: (50118, 104)
[0 - 7efdc8311000]   56.231170 {3}{RequestManager}: (50118, 105)
[0 - 7efdc8311000]   56.231172 {3}{RequestManager}: (45714, 106)
[0 - 7efdc8311000]   56.231173 {3}{RequestManager}: (10, 107)
[0 - 7efdc8311000]   56.231174 {3}{RequestManager}: (4271, 108)
[0 - 7efdc8311000]   56.231175 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   56.231176 {3}{RequestManager}: (8, 101)
[0 - 7efdc8311000]   56.231178 {3}{RequestManager}: (8942, 102)
[0 - 7efdc8311000]   56.231179 {3}{RequestManager}: (4, 103)
[0 - 7efdc8311000]   56.231180 {3}{RequestManager}: (50118, 104)
[0 - 7efdc8311000]   56.231181 {3}{RequestManager}: (50118, 105)
[0 - 7efdc8311000]   56.231182 {3}{RequestManager}: (45714, 106)
[0 - 7efdc8311000]   56.231184 {3}{RequestManager}: (10, 107)
[0 - 7efdc8311000]   56.231185 {3}{RequestManager}: (4271, 108)
[0 - 7efdc8311000]   56.231211 {3}{RequestManager}: (1152, 109)
[0 - 7efdc8311000]   56.231212 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   56.231214 {3}{RequestManager}: (100, 9)
[0 - 7efdc8311000]   56.231215 {3}{RequestManager}: (101, 10)
[0 - 7efdc8311000]   56.231216 {3}{RequestManager}: (102, 11)
[0 - 7efdc8311000]   56.231217 {3}{RequestManager}: (103, 12)
[0 - 7efdc8311000]   56.231218 {3}{RequestManager}: (104, 13)
[0 - 7efdc8311000]   56.231220 {3}{RequestManager}: (105, 14)
[0 - 7efdc8311000]   56.231221 {3}{RequestManager}: (106, 15)
[0 - 7efdc8311000]   56.231222 {3}{RequestManager}: (107, 16)
[0 - 7efdc8311000]   56.231223 {3}{RequestManager}: (108, 17)
[0 - 7efdc8311000]   56.231226 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   56.231227 {3}{RequestManager}: (8, 101)
[0 - 7efdc8311000]   56.231228 {3}{RequestManager}: (8942, 102)
[0 - 7efdc8311000]   56.231229 {3}{RequestManager}: (4, 103)
[0 - 7efdc8311000]   56.231230 {3}{RequestManager}: (50118, 104)
[0 - 7efdc8311000]   56.231232 {3}{RequestManager}: (50118, 105)
[0 - 7efdc8311000]   56.231233 {3}{RequestManager}: (45714, 106)
[0 - 7efdc8311000]   56.231234 {3}{RequestManager}: (10, 107)
[0 - 7efdc8311000]   56.231235 {3}{RequestManager}: (4271, 108)
[0 - 7efdc8311000]   56.231236 {3}{RequestManager}: (1152, 109)
[0 - 7efdc8311000]   56.231238 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   56.231239 {3}{RequestManager}: (100, 9)
[0 - 7efdc8311000]   56.231240 {3}{RequestManager}: (101, 10)
[0 - 7efdc8311000]   56.231241 {3}{RequestManager}: (102, 11)
[0 - 7efdc8311000]   56.231242 {3}{RequestManager}: (103, 12)
[0 - 7efdc8311000]   56.231243 {3}{RequestManager}: (104, 13)
[0 - 7efdc8311000]   56.231245 {3}{RequestManager}: (105, 14)
[0 - 7efdc8311000]   56.231246 {3}{RequestManager}: (106, 15)
[0 - 7efdc8311000]   56.231247 {3}{RequestManager}: (107, 16)
[0 - 7efdc8311000]   56.231248 {3}{RequestManager}: (108, 17)
[0 - 7efdc8311000]   56.231249 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   56.231285 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   58.589454 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   58.589461 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   58.589463 {3}{RequestManager}: (13, 48)
[0 - 7efdc8311000]   58.589464 {3}{RequestManager}: (10, 49)
[0 - 7efdc8311000]   58.589465 {3}{RequestManager}: (689, 50)
[0 - 7efdc8311000]   58.589467 {3}{RequestManager}: (14310, 51)
[0 - 7efdc8311000]   58.589468 {3}{RequestManager}: (5961, 52)
[0 - 7efdc8311000]   58.589469 {3}{RequestManager}: (3944, 53)
[0 - 7efdc8311000]   58.589470 {3}{RequestManager}: (14, 54)
[0 - 7efdc8311000]   58.589472 {3}{RequestManager}: (8382, 55)
[0 - 7efdc8311000]   58.589473 {3}{RequestManager}: (47, 56)
[0 - 7efdc8311000]   58.589474 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   58.589475 {3}{RequestManager}: (10, 49)
[0 - 7efdc8311000]   58.589476 {3}{RequestManager}: (689, 50)
[0 - 7efdc8311000]   58.589478 {3}{RequestManager}: (14310, 51)
[0 - 7efdc8311000]   58.589479 {3}{RequestManager}: (5961, 52)
[0 - 7efdc8311000]   58.589480 {3}{RequestManager}: (3944, 53)
[0 - 7efdc8311000]   58.589481 {3}{RequestManager}: (14, 54)
[0 - 7efdc8311000]   58.589482 {3}{RequestManager}: (8382, 55)
[0 - 7efdc8311000]   58.589483 {3}{RequestManager}: (47, 56)
[0 - 7efdc8311000]   58.589485 {3}{RequestManager}: (27804, 57)
[0 - 7efdc8311000]   58.589486 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   58.589487 {3}{RequestManager}: (48, 0)
[0 - 7efdc8311000]   58.589488 {3}{RequestManager}: (49, 1)
[0 - 7efdc8311000]   58.589489 {3}{RequestManager}: (50, 2)
[0 - 7efdc8311000]   58.589491 {3}{RequestManager}: (51, 3)
[0 - 7efdc8311000]   58.589492 {3}{RequestManager}: (52, 4)
[0 - 7efdc8311000]   58.589493 {3}{RequestManager}: (53, 5)
[0 - 7efdc8311000]   58.589494 {3}{RequestManager}: (54, 6)
[0 - 7efdc8311000]   58.589495 {3}{RequestManager}: (55, 7)
[0 - 7efdc8311000]   58.589496 {3}{RequestManager}: (56, 8)
[0 - 7efdc8311000]   58.589499 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   58.589501 {3}{RequestManager}: (10, 49)
[0 - 7efdc8311000]   58.589502 {3}{RequestManager}: (689, 50)
[0 - 7efdc8311000]   58.589503 {3}{RequestManager}: (14310, 51)
[0 - 7efdc8311000]   58.589504 {3}{RequestManager}: (5961, 52)
[0 - 7efdc8311000]   58.589505 {3}{RequestManager}: (3944, 53)
[0 - 7efdc8311000]   58.589506 {3}{RequestManager}: (14, 54)
[0 - 7efdc8311000]   58.589508 {3}{RequestManager}: (8382, 55)
[0 - 7efdc8311000]   58.589509 {3}{RequestManager}: (47, 56)
[0 - 7efdc8311000]   58.589510 {3}{RequestManager}: (27804, 57)
[0 - 7efdc8311000]   58.589511 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   58.589512 {3}{RequestManager}: (48, 0)
[0 - 7efdc8311000]   58.589514 {3}{RequestManager}: (49, 1)
[0 - 7efdc8311000]   58.589515 {3}{RequestManager}: (50, 2)
[0 - 7efdc8311000]   58.589516 {3}{RequestManager}: (51, 3)
[0 - 7efdc8311000]   58.589517 {3}{RequestManager}: (52, 4)
[0 - 7efdc8311000]   58.589518 {3}{RequestManager}: (53, 5)
[0 - 7efdc8311000]   58.589520 {3}{RequestManager}: (54, 6)
[0 - 7efdc8311000]   58.589521 {3}{RequestManager}: (55, 7)
[0 - 7efdc8311000]   58.589522 {3}{RequestManager}: (56, 8)
[0 - 7efdc8311000]   58.589524 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   58.589560 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop
[0 - 7efdc8311000]   58.589562 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   58.589564 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   58.589565 {3}{RequestManager}: (1152, 109)
[0 - 7efdc8311000]   58.589566 {3}{RequestManager}: (8194, 110)
[0 - 7efdc8311000]   58.589568 {3}{RequestManager}: (13, 111)
[0 - 7efdc8311000]   58.589569 {3}{RequestManager}: (10, 112)
[0 - 7efdc8311000]   58.589593 {3}{RequestManager}: (689, 113)
[0 - 7efdc8311000]   58.589594 {3}{RequestManager}: (14310, 114)
[0 - 7efdc8311000]   58.589595 {3}{RequestManager}: (5961, 115)
[0 - 7efdc8311000]   58.589596 {3}{RequestManager}: (3944, 116)
[0 - 7efdc8311000]   58.589598 {3}{RequestManager}: (14, 117)
[0 - 7efdc8311000]   58.589599 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   58.589600 {3}{RequestManager}: (8194, 110)
[0 - 7efdc8311000]   58.589601 {3}{RequestManager}: (13, 111)
[0 - 7efdc8311000]   58.589602 {3}{RequestManager}: (10, 112)
[0 - 7efdc8311000]   58.589603 {3}{RequestManager}: (689, 113)
[0 - 7efdc8311000]   58.589604 {3}{RequestManager}: (14310, 114)
[0 - 7efdc8311000]   58.589605 {3}{RequestManager}: (5961, 115)
[0 - 7efdc8311000]   58.589606 {3}{RequestManager}: (3944, 116)
[0 - 7efdc8311000]   58.589608 {3}{RequestManager}: (14, 117)
[0 - 7efdc8311000]   58.589609 {3}{RequestManager}: (8382, 118)
[0 - 7efdc8311000]   58.589610 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   58.589611 {3}{RequestManager}: (109, 9)
[0 - 7efdc8311000]   58.589612 {3}{RequestManager}: (110, 10)
[0 - 7efdc8311000]   58.589613 {3}{RequestManager}: (111, 11)
[0 - 7efdc8311000]   58.589614 {3}{RequestManager}: (112, 12)
[0 - 7efdc8311000]   58.589615 {3}{RequestManager}: (113, 13)
[0 - 7efdc8311000]   58.589633 {3}{RequestManager}: (114, 14)
[0 - 7efdc8311000]   58.589634 {3}{RequestManager}: (115, 15)
[0 - 7efdc8311000]   58.589635 {3}{RequestManager}: (116, 16)
[0 - 7efdc8311000]   58.589636 {3}{RequestManager}: (117, 17)
[0 - 7efdc8311000]   58.589639 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   58.589640 {3}{RequestManager}: (8194, 110)
[0 - 7efdc8311000]   58.589641 {3}{RequestManager}: (13, 111)
[0 - 7efdc8311000]   58.589642 {3}{RequestManager}: (10, 112)
[0 - 7efdc8311000]   58.589643 {3}{RequestManager}: (689, 113)
[0 - 7efdc8311000]   58.589645 {3}{RequestManager}: (14310, 114)
[0 - 7efdc8311000]   58.589646 {3}{RequestManager}: (5961, 115)
[0 - 7efdc8311000]   58.589647 {3}{RequestManager}: (3944, 116)
[0 - 7efdc8311000]   58.589648 {3}{RequestManager}: (14, 117)
[0 - 7efdc8311000]   58.589649 {3}{RequestManager}: (8382, 118)
[0 - 7efdc8311000]   58.589650 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   58.589652 {3}{RequestManager}: (109, 9)
[0 - 7efdc8311000]   58.589653 {3}{RequestManager}: (110, 10)
[0 - 7efdc8311000]   58.589654 {3}{RequestManager}: (111, 11)
[0 - 7efdc8311000]   58.589655 {3}{RequestManager}: (112, 12)
[0 - 7efdc8311000]   58.589656 {3}{RequestManager}: (113, 13)
[0 - 7efdc8311000]   58.589657 {3}{RequestManager}: (114, 14)
[0 - 7efdc8311000]   58.589659 {3}{RequestManager}: (115, 15)
[0 - 7efdc8311000]   58.589660 {3}{RequestManager}: (116, 16)
[0 - 7efdc8311000]   58.589661 {3}{RequestManager}: (117, 17)
[0 - 7efdc8311000]   58.589662 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   58.589699 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   60.953157 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   60.953163 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   60.953164 {3}{RequestManager}: (27804, 57)
[0 - 7efdc8311000]   60.953166 {3}{RequestManager}: (12849, 58)
[0 - 7efdc8311000]   60.953167 {3}{RequestManager}: (8, 59)
[0 - 7efdc8311000]   60.953168 {3}{RequestManager}: (8942, 60)
[0 - 7efdc8311000]   60.953170 {3}{RequestManager}: (4, 61)
[0 - 7efdc8311000]   60.953171 {3}{RequestManager}: (50118, 62)
[0 - 7efdc8311000]   60.953172 {3}{RequestManager}: (50118, 63)
[0 - 7efdc8311000]   60.953173 {3}{RequestManager}: (41602, 64)
[0 - 7efdc8311000]   60.953175 {3}{RequestManager}: (50118, 65)
[0 - 7efdc8311000]   60.953176 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   60.953177 {3}{RequestManager}: (12849, 58)
[0 - 7efdc8311000]   60.953178 {3}{RequestManager}: (8, 59)
[0 - 7efdc8311000]   60.953179 {3}{RequestManager}: (8942, 60)
[0 - 7efdc8311000]   60.953180 {3}{RequestManager}: (4, 61)
[0 - 7efdc8311000]   60.953181 {3}{RequestManager}: (50118, 62)
[0 - 7efdc8311000]   60.953182 {3}{RequestManager}: (50118, 63)
[0 - 7efdc8311000]   60.953184 {3}{RequestManager}: (45714, 64)
[0 - 7efdc8311000]   60.953185 {3}{RequestManager}: (50118, 65)
[0 - 7efdc8311000]   60.953186 {3}{RequestManager}: (50118, 66)
[0 - 7efdc8311000]   60.953187 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   60.953188 {3}{RequestManager}: (57, 0)
[0 - 7efdc8311000]   60.953189 {3}{RequestManager}: (58, 1)
[0 - 7efdc8311000]   60.953190 {3}{RequestManager}: (59, 2)
[0 - 7efdc8311000]   60.953191 {3}{RequestManager}: (60, 3)
[0 - 7efdc8311000]   60.953192 {3}{RequestManager}: (61, 4)
[0 - 7efdc8311000]   60.953194 {3}{RequestManager}: (62, 5)
[0 - 7efdc8311000]   60.953195 {3}{RequestManager}: (63, 6)
[0 - 7efdc8311000]   60.953196 {3}{RequestManager}: (64, 7)
[0 - 7efdc8311000]   60.953197 {3}{RequestManager}: (65, 8)
[0 - 7efdc8311000]   60.953200 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   60.953201 {3}{RequestManager}: (12849, 58)
[0 - 7efdc8311000]   60.953202 {3}{RequestManager}: (8, 59)
[0 - 7efdc8311000]   60.953203 {3}{RequestManager}: (8942, 60)
[0 - 7efdc8311000]   60.953204 {3}{RequestManager}: (4, 61)
[0 - 7efdc8311000]   60.953205 {3}{RequestManager}: (50118, 62)
[0 - 7efdc8311000]   60.953206 {3}{RequestManager}: (50118, 63)
[0 - 7efdc8311000]   60.953207 {3}{RequestManager}: (45714, 64)
[0 - 7efdc8311000]   60.953209 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   60.953210 {3}{RequestManager}: (57, 0)
[0 - 7efdc8311000]   60.953211 {3}{RequestManager}: (58, 1)
[0 - 7efdc8311000]   60.953212 {3}{RequestManager}: (59, 2)
[0 - 7efdc8311000]   60.953213 {3}{RequestManager}: (60, 3)
[0 - 7efdc8311000]   60.953214 {3}{RequestManager}: (61, 4)
[0 - 7efdc8311000]   60.953216 {3}{RequestManager}: (62, 5)
[0 - 7efdc8311000]   60.953217 {3}{RequestManager}: (63, 6)
[0 - 7efdc8311000]   60.953218 {3}{RequestManager}: Number of Verified Tokens = 7
[0 - 7efdc8311000]   60.953259 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write
[0 - 7efdc8311000]   60.953262 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   60.953263 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   60.953265 {3}{RequestManager}: (8382, 118)
[0 - 7efdc8311000]   60.953266 {3}{RequestManager}: (47, 119)
[0 - 7efdc8311000]   60.953267 {3}{RequestManager}: (27804, 120)
[0 - 7efdc8311000]   60.953268 {3}{RequestManager}: (12849, 121)
[0 - 7efdc8311000]   60.953269 {3}{RequestManager}: (8, 122)
[0 - 7efdc8311000]   60.953271 {3}{RequestManager}: (8942, 123)
[0 - 7efdc8311000]   60.953272 {3}{RequestManager}: (4, 124)
[0 - 7efdc8311000]   60.953273 {3}{RequestManager}: (50118, 125)
[0 - 7efdc8311000]   60.953300 {3}{RequestManager}: (50118, 126)
[0 - 7efdc8311000]   60.953301 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   60.953302 {3}{RequestManager}: (47, 119)
[0 - 7efdc8311000]   60.953303 {3}{RequestManager}: (27804, 120)
[0 - 7efdc8311000]   60.953304 {3}{RequestManager}: (12849, 121)
[0 - 7efdc8311000]   60.953306 {3}{RequestManager}: (8, 122)
[0 - 7efdc8311000]   60.953307 {3}{RequestManager}: (8942, 123)
[0 - 7efdc8311000]   60.953308 {3}{RequestManager}: (4, 124)
[0 - 7efdc8311000]   60.953309 {3}{RequestManager}: (50118, 125)
[0 - 7efdc8311000]   60.953310 {3}{RequestManager}: (50118, 126)
[0 - 7efdc8311000]   60.953311 {3}{RequestManager}: (45714, 127)
[0 - 7efdc8311000]   60.953312 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   60.953313 {3}{RequestManager}: (118, 9)
[0 - 7efdc8311000]   60.953314 {3}{RequestManager}: (119, 10)
[0 - 7efdc8311000]   60.953315 {3}{RequestManager}: (120, 11)
[0 - 7efdc8311000]   60.953316 {3}{RequestManager}: (121, 12)
[0 - 7efdc8311000]   60.953318 {3}{RequestManager}: (122, 13)
[0 - 7efdc8311000]   60.953319 {3}{RequestManager}: (123, 14)
[0 - 7efdc8311000]   60.953320 {3}{RequestManager}: (124, 15)
[0 - 7efdc8311000]   60.953321 {3}{RequestManager}: (125, 16)
[0 - 7efdc8311000]   60.953322 {3}{RequestManager}: (126, 17)
[0 - 7efdc8311000]   60.953324 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   60.953325 {3}{RequestManager}: (47, 119)
[0 - 7efdc8311000]   60.953327 {3}{RequestManager}: (27804, 120)
[0 - 7efdc8311000]   60.953328 {3}{RequestManager}: (12849, 121)
[0 - 7efdc8311000]   60.953329 {3}{RequestManager}: (8, 122)
[0 - 7efdc8311000]   60.953330 {3}{RequestManager}: (8942, 123)
[0 - 7efdc8311000]   60.953331 {3}{RequestManager}: (4, 124)
[0 - 7efdc8311000]   60.953332 {3}{RequestManager}: (50118, 125)
[0 - 7efdc8311000]   60.953333 {3}{RequestManager}: (50118, 126)
[0 - 7efdc8311000]   60.953334 {3}{RequestManager}: (45714, 127)
[0 - 7efdc8311000]   60.953335 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   60.953337 {3}{RequestManager}: (118, 9)
[0 - 7efdc8311000]   60.953338 {3}{RequestManager}: (119, 10)
[0 - 7efdc8311000]   60.953339 {3}{RequestManager}: (120, 11)
[0 - 7efdc8311000]   60.953340 {3}{RequestManager}: (121, 12)
[0 - 7efdc8311000]   60.953341 {3}{RequestManager}: (122, 13)
[0 - 7efdc8311000]   60.953342 {3}{RequestManager}: (123, 14)
[0 - 7efdc8311000]   60.953359 {3}{RequestManager}: (124, 15)
[0 - 7efdc8311000]   60.953361 {3}{RequestManager}: (125, 16)
[0 - 7efdc8311000]   60.953362 {3}{RequestManager}: (126, 17)
[0 - 7efdc8311000]   60.953363 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   60.953365 {3}{RequestManager}: [Done] guid(1000001) with final length(128)
[0 - 7efdc8311000]   60.953405 {3}{RequestManager}: Final output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write
[0 - 7efdc8311000]   60.953410 {3}{RequestManager}: [Profile] guid(1000001) decoding_steps(12) start(32381127.0) finish(60953406.0) latency(28572279.0) acc_latency(28572279.0)
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 29
new_bc.num_tokens: 37
[0 - 7efdc8311000]   63.310887 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   63.310892 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   63.310894 {3}{RequestManager}: (45714, 64)
[0 - 7efdc8311000]   63.310895 {3}{RequestManager}: (6, 65)
[0 - 7efdc8311000]   63.310896 {3}{RequestManager}: (50118, 66)
[0 - 7efdc8311000]   63.310897 {3}{RequestManager}: (50118, 67)
[0 - 7efdc8311000]   63.310898 {3}{RequestManager}: (45714, 68)
[0 - 7efdc8311000]   63.310900 {3}{RequestManager}: (6, 69)
[0 - 7efdc8311000]   63.310901 {3}{RequestManager}: (50118, 70)
[0 - 7efdc8311000]   63.310902 {3}{RequestManager}: (50118, 71)
[0 - 7efdc8311000]   63.310903 {3}{RequestManager}: (45714, 72)
[0 - 7efdc8311000]   63.310904 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   63.310905 {3}{RequestManager}: (10, 65)
[0 - 7efdc8311000]   63.310906 {3}{RequestManager}: (17668, 66)
[0 - 7efdc8311000]   63.310907 {3}{RequestManager}: (50118, 67)
[0 - 7efdc8311000]   63.310908 {3}{RequestManager}: (45714, 68)
[0 - 7efdc8311000]   63.310909 {3}{RequestManager}: (10, 69)
[0 - 7efdc8311000]   63.310910 {3}{RequestManager}: (50118, 70)
[0 - 7efdc8311000]   63.310911 {3}{RequestManager}: (50118, 71)
[0 - 7efdc8311000]   63.310912 {3}{RequestManager}: (45714, 72)
[0 - 7efdc8311000]   63.310913 {3}{RequestManager}: (6, 73)
[0 - 7efdc8311000]   63.310914 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   63.310915 {3}{RequestManager}: (64, 0)
[0 - 7efdc8311000]   63.310916 {3}{RequestManager}: (65, 1)
[0 - 7efdc8311000]   63.310917 {3}{RequestManager}: (66, 2)
[0 - 7efdc8311000]   63.310918 {3}{RequestManager}: (67, 3)
[0 - 7efdc8311000]   63.310919 {3}{RequestManager}: (68, 4)
[0 - 7efdc8311000]   63.310920 {3}{RequestManager}: (69, 5)
[0 - 7efdc8311000]   63.310921 {3}{RequestManager}: (70, 6)
[0 - 7efdc8311000]   63.310922 {3}{RequestManager}: (71, 7)
[0 - 7efdc8311000]   63.310923 {3}{RequestManager}: (72, 8)
[0 - 7efdc8311000]   63.310925 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   63.310926 {3}{RequestManager}: (10, 65)
[0 - 7efdc8311000]   63.310927 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   63.310928 {3}{RequestManager}: (64, 0)
[0 - 7efdc8311000]   63.310929 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]   63.310968 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a
[0 - 7efdc8311000]   63.310970 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   63.310972 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   63.310973 {3}{RequestManager}: (4, 19)
[0 - 7efdc8311000]   63.310974 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]   63.310975 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]   63.310976 {3}{RequestManager}: (45714, 22)
[0 - 7efdc8311000]   63.310978 {3}{RequestManager}: (10, 23)
[0 - 7efdc8311000]   63.310979 {3}{RequestManager}: (4271, 24)
[0 - 7efdc8311000]   63.310980 {3}{RequestManager}: (1152, 25)
[0 - 7efdc8311000]   63.310981 {3}{RequestManager}: (8194, 26)
[0 - 7efdc8311000]   63.310982 {3}{RequestManager}: (13, 27)
[0 - 7efdc8311000]   63.310983 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   63.310984 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]   63.310985 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]   63.310987 {3}{RequestManager}: (45714, 22)
[0 - 7efdc8311000]   63.310988 {3}{RequestManager}: (10, 23)
[0 - 7efdc8311000]   63.310989 {3}{RequestManager}: (4271, 24)
[0 - 7efdc8311000]   63.310990 {3}{RequestManager}: (1152, 25)
[0 - 7efdc8311000]   63.310991 {3}{RequestManager}: (8194, 26)
[0 - 7efdc8311000]   63.310992 {3}{RequestManager}: (13, 27)
[0 - 7efdc8311000]   63.310993 {3}{RequestManager}: (10, 28)
[0 - 7efdc8311000]   63.311018 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   63.311019 {3}{RequestManager}: (19, 28)
[0 - 7efdc8311000]   63.311021 {3}{RequestManager}: (20, 29)
[0 - 7efdc8311000]   63.311022 {3}{RequestManager}: (21, 30)
[0 - 7efdc8311000]   63.311023 {3}{RequestManager}: (22, 31)
[0 - 7efdc8311000]   63.311024 {3}{RequestManager}: (23, 32)
[0 - 7efdc8311000]   63.311025 {3}{RequestManager}: (24, 33)
[0 - 7efdc8311000]   63.311026 {3}{RequestManager}: (25, 34)
[0 - 7efdc8311000]   63.311027 {3}{RequestManager}: (26, 35)
[0 - 7efdc8311000]   63.311028 {3}{RequestManager}: (27, 36)
[0 - 7efdc8311000]   63.311030 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   63.311031 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]   63.311032 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]   63.311033 {3}{RequestManager}: (45714, 22)
[0 - 7efdc8311000]   63.311034 {3}{RequestManager}: (10, 23)
[0 - 7efdc8311000]   63.311035 {3}{RequestManager}: (4271, 24)
[0 - 7efdc8311000]   63.311036 {3}{RequestManager}: (1152, 25)
[0 - 7efdc8311000]   63.311037 {3}{RequestManager}: (8194, 26)
[0 - 7efdc8311000]   63.311038 {3}{RequestManager}: (13, 27)
[0 - 7efdc8311000]   63.311039 {3}{RequestManager}: (10, 28)
[0 - 7efdc8311000]   63.311056 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   63.311057 {3}{RequestManager}: (19, 28)
[0 - 7efdc8311000]   63.311059 {3}{RequestManager}: (20, 29)
[0 - 7efdc8311000]   63.311060 {3}{RequestManager}: (21, 30)
[0 - 7efdc8311000]   63.311061 {3}{RequestManager}: (22, 31)
[0 - 7efdc8311000]   63.311062 {3}{RequestManager}: (23, 32)
[0 - 7efdc8311000]   63.311063 {3}{RequestManager}: (24, 33)
[0 - 7efdc8311000]   63.311064 {3}{RequestManager}: (25, 34)
[0 - 7efdc8311000]   63.311065 {3}{RequestManager}: (26, 35)
[0 - 7efdc8311000]   63.311066 {3}{RequestManager}: (27, 36)
[0 - 7efdc8311000]   63.311067 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   63.311079 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   65.667300 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   65.667305 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   65.667307 {3}{RequestManager}: (10, 65)
[0 - 7efdc8311000]   65.667309 {3}{RequestManager}: (3116, 66)
[0 - 7efdc8311000]   65.667310 {3}{RequestManager}: (3116, 67)
[0 - 7efdc8311000]   65.667311 {3}{RequestManager}: (3116, 68)
[0 - 7efdc8311000]   65.667312 {3}{RequestManager}: (3116, 69)
[0 - 7efdc8311000]   65.667313 {3}{RequestManager}: (3116, 70)
[0 - 7efdc8311000]   65.667315 {3}{RequestManager}: (3116, 71)
[0 - 7efdc8311000]   65.667316 {3}{RequestManager}: (3116, 72)
[0 - 7efdc8311000]   65.667317 {3}{RequestManager}: (3116, 73)
[0 - 7efdc8311000]   65.667318 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   65.667319 {3}{RequestManager}: (4271, 66)
[0 - 7efdc8311000]   65.667321 {3}{RequestManager}: (10, 67)
[0 - 7efdc8311000]   65.667322 {3}{RequestManager}: (10, 68)
[0 - 7efdc8311000]   65.667323 {3}{RequestManager}: (3116, 69)
[0 - 7efdc8311000]   65.667324 {3}{RequestManager}: (3116, 70)
[0 - 7efdc8311000]   65.667325 {3}{RequestManager}: (3116, 71)
[0 - 7efdc8311000]   65.667326 {3}{RequestManager}: (3116, 72)
[0 - 7efdc8311000]   65.667327 {3}{RequestManager}: (3116, 73)
[0 - 7efdc8311000]   65.667329 {3}{RequestManager}: (3116, 74)
[0 - 7efdc8311000]   65.667330 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   65.667331 {3}{RequestManager}: (65, 0)
[0 - 7efdc8311000]   65.667332 {3}{RequestManager}: (66, 1)
[0 - 7efdc8311000]   65.667333 {3}{RequestManager}: (67, 2)
[0 - 7efdc8311000]   65.667334 {3}{RequestManager}: (68, 3)
[0 - 7efdc8311000]   65.667336 {3}{RequestManager}: (69, 4)
[0 - 7efdc8311000]   65.667337 {3}{RequestManager}: (70, 5)
[0 - 7efdc8311000]   65.667338 {3}{RequestManager}: (71, 6)
[0 - 7efdc8311000]   65.667339 {3}{RequestManager}: (72, 7)
[0 - 7efdc8311000]   65.667340 {3}{RequestManager}: (73, 8)
[0 - 7efdc8311000]   65.667342 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   65.667344 {3}{RequestManager}: (4271, 66)
[0 - 7efdc8311000]   65.667345 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   65.667346 {3}{RequestManager}: (65, 0)
[0 - 7efdc8311000]   65.667347 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]   65.667387 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed
[0 - 7efdc8311000]   65.667389 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   65.667390 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   65.667392 {3}{RequestManager}: (10, 28)
[0 - 7efdc8311000]   65.667393 {3}{RequestManager}: (689, 29)
[0 - 7efdc8311000]   65.667394 {3}{RequestManager}: (14310, 30)
[0 - 7efdc8311000]   65.667396 {3}{RequestManager}: (5961, 31)
[0 - 7efdc8311000]   65.667397 {3}{RequestManager}: (3944, 32)
[0 - 7efdc8311000]   65.667398 {3}{RequestManager}: (14, 33)
[0 - 7efdc8311000]   65.667399 {3}{RequestManager}: (8382, 34)
[0 - 7efdc8311000]   65.667401 {3}{RequestManager}: (47, 35)
[0 - 7efdc8311000]   65.667402 {3}{RequestManager}: (27804, 36)
[0 - 7efdc8311000]   65.667403 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   65.667404 {3}{RequestManager}: (4271, 29)
[0 - 7efdc8311000]   65.667405 {3}{RequestManager}: (14310, 30)
[0 - 7efdc8311000]   65.667406 {3}{RequestManager}: (5961, 31)
[0 - 7efdc8311000]   65.667407 {3}{RequestManager}: (8194, 32)
[0 - 7efdc8311000]   65.667408 {3}{RequestManager}: (8194, 33)
[0 - 7efdc8311000]   65.667409 {3}{RequestManager}: (16, 34)
[0 - 7efdc8311000]   65.667411 {3}{RequestManager}: (47, 35)
[0 - 7efdc8311000]   65.667412 {3}{RequestManager}: (27804, 36)
[0 - 7efdc8311000]   65.667413 {3}{RequestManager}: (6, 37)
[0 - 7efdc8311000]   65.667438 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   65.667440 {3}{RequestManager}: (28, 9)
[0 - 7efdc8311000]   65.667441 {3}{RequestManager}: (29, 10)
[0 - 7efdc8311000]   65.667442 {3}{RequestManager}: (30, 11)
[0 - 7efdc8311000]   65.667443 {3}{RequestManager}: (31, 12)
[0 - 7efdc8311000]   65.667444 {3}{RequestManager}: (32, 13)
[0 - 7efdc8311000]   65.667446 {3}{RequestManager}: (33, 14)
[0 - 7efdc8311000]   65.667447 {3}{RequestManager}: (34, 15)
[0 - 7efdc8311000]   65.667448 {3}{RequestManager}: (35, 16)
[0 - 7efdc8311000]   65.667449 {3}{RequestManager}: (36, 17)
[0 - 7efdc8311000]   65.667450 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   65.667452 {3}{RequestManager}: (4271, 29)
[0 - 7efdc8311000]   65.667453 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   65.667454 {3}{RequestManager}: (28, 9)
[0 - 7efdc8311000]   65.667455 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]   65.667483 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a detailed
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   68.023830 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   68.023836 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   68.023838 {3}{RequestManager}: (4271, 66)
[0 - 7efdc8311000]   68.023839 {3}{RequestManager}: (8194, 67)
[0 - 7efdc8311000]   68.023840 {3}{RequestManager}: (13, 68)
[0 - 7efdc8311000]   68.023841 {3}{RequestManager}: (10, 69)
[0 - 7efdc8311000]   68.023843 {3}{RequestManager}: (689, 70)
[0 - 7efdc8311000]   68.023844 {3}{RequestManager}: (689, 71)
[0 - 7efdc8311000]   68.023845 {3}{RequestManager}: (689, 72)
[0 - 7efdc8311000]   68.023846 {3}{RequestManager}: (689, 73)
[0 - 7efdc8311000]   68.023847 {3}{RequestManager}: (689, 74)
[0 - 7efdc8311000]   68.023848 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   68.023849 {3}{RequestManager}: (1152, 67)
[0 - 7efdc8311000]   68.023850 {3}{RequestManager}: (13, 68)
[0 - 7efdc8311000]   68.023851 {3}{RequestManager}: (10, 69)
[0 - 7efdc8311000]   68.023852 {3}{RequestManager}: (689, 70)
[0 - 7efdc8311000]   68.023853 {3}{RequestManager}: (14310, 71)
[0 - 7efdc8311000]   68.023855 {3}{RequestManager}: (14310, 72)
[0 - 7efdc8311000]   68.023856 {3}{RequestManager}: (14310, 73)
[0 - 7efdc8311000]   68.023857 {3}{RequestManager}: (689, 74)
[0 - 7efdc8311000]   68.023858 {3}{RequestManager}: (689, 75)
[0 - 7efdc8311000]   68.023859 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   68.023860 {3}{RequestManager}: (66, 0)
[0 - 7efdc8311000]   68.023861 {3}{RequestManager}: (67, 1)
[0 - 7efdc8311000]   68.023862 {3}{RequestManager}: (68, 2)
[0 - 7efdc8311000]   68.023863 {3}{RequestManager}: (69, 3)
[0 - 7efdc8311000]   68.023864 {3}{RequestManager}: (70, 4)
[0 - 7efdc8311000]   68.023865 {3}{RequestManager}: (71, 5)
[0 - 7efdc8311000]   68.023866 {3}{RequestManager}: (72, 6)
[0 - 7efdc8311000]   68.023868 {3}{RequestManager}: (73, 7)
[0 - 7efdc8311000]   68.023869 {3}{RequestManager}: (74, 8)
[0 - 7efdc8311000]   68.023871 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   68.023872 {3}{RequestManager}: (1152, 67)
[0 - 7efdc8311000]   68.023873 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   68.023874 {3}{RequestManager}: (66, 0)
[0 - 7efdc8311000]   68.023875 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]   68.023913 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product
[0 - 7efdc8311000]   68.023916 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   68.023917 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   68.023918 {3}{RequestManager}: (4271, 29)
[0 - 7efdc8311000]   68.023919 {3}{RequestManager}: (689, 30)
[0 - 7efdc8311000]   68.023921 {3}{RequestManager}: (14310, 31)
[0 - 7efdc8311000]   68.023922 {3}{RequestManager}: (5961, 32)
[0 - 7efdc8311000]   68.023923 {3}{RequestManager}: (3944, 33)
[0 - 7efdc8311000]   68.023924 {3}{RequestManager}: (14, 34)
[0 - 7efdc8311000]   68.023925 {3}{RequestManager}: (8382, 35)
[0 - 7efdc8311000]   68.023926 {3}{RequestManager}: (47, 36)
[0 - 7efdc8311000]   68.023927 {3}{RequestManager}: (27804, 37)
[0 - 7efdc8311000]   68.023928 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   68.023930 {3}{RequestManager}: (1152, 30)
[0 - 7efdc8311000]   68.023931 {3}{RequestManager}: (14310, 31)
[0 - 7efdc8311000]   68.023932 {3}{RequestManager}: (5961, 32)
[0 - 7efdc8311000]   68.023933 {3}{RequestManager}: (1152, 33)
[0 - 7efdc8311000]   68.023934 {3}{RequestManager}: (8194, 34)
[0 - 7efdc8311000]   68.023935 {3}{RequestManager}: (40, 35)
[0 - 7efdc8311000]   68.023936 {3}{RequestManager}: (47, 36)
[0 - 7efdc8311000]   68.023937 {3}{RequestManager}: (27804, 37)
[0 - 7efdc8311000]   68.023938 {3}{RequestManager}: (6, 38)
[0 - 7efdc8311000]   68.023964 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   68.023966 {3}{RequestManager}: (29, 9)
[0 - 7efdc8311000]   68.023967 {3}{RequestManager}: (30, 10)
[0 - 7efdc8311000]   68.023968 {3}{RequestManager}: (31, 11)
[0 - 7efdc8311000]   68.023969 {3}{RequestManager}: (32, 12)
[0 - 7efdc8311000]   68.023970 {3}{RequestManager}: (33, 13)
[0 - 7efdc8311000]   68.023971 {3}{RequestManager}: (34, 14)
[0 - 7efdc8311000]   68.023972 {3}{RequestManager}: (35, 15)
[0 - 7efdc8311000]   68.023973 {3}{RequestManager}: (36, 16)
[0 - 7efdc8311000]   68.023974 {3}{RequestManager}: (37, 17)
[0 - 7efdc8311000]   68.023975 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   68.023977 {3}{RequestManager}: (1152, 30)
[0 - 7efdc8311000]   68.023978 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   68.023979 {3}{RequestManager}: (29, 9)
[0 - 7efdc8311000]   68.023980 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]   68.024008 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a detailed product
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   70.380149 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   70.380155 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   70.380157 {3}{RequestManager}: (1152, 67)
[0 - 7efdc8311000]   70.380159 {3}{RequestManager}: (8194, 68)
[0 - 7efdc8311000]   70.380160 {3}{RequestManager}: (8194, 69)
[0 - 7efdc8311000]   70.380161 {3}{RequestManager}: (50118, 70)
[0 - 7efdc8311000]   70.380163 {3}{RequestManager}: (50118, 71)
[0 - 7efdc8311000]   70.380164 {3}{RequestManager}: (45714, 72)
[0 - 7efdc8311000]   70.380165 {3}{RequestManager}: (6, 73)
[0 - 7efdc8311000]   70.380166 {3}{RequestManager}: (45714, 74)
[0 - 7efdc8311000]   70.380167 {3}{RequestManager}: (6, 75)
[0 - 7efdc8311000]   70.380168 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   70.380170 {3}{RequestManager}: (8194, 68)
[0 - 7efdc8311000]   70.380171 {3}{RequestManager}: (13, 69)
[0 - 7efdc8311000]   70.380172 {3}{RequestManager}: (13, 70)
[0 - 7efdc8311000]   70.380173 {3}{RequestManager}: (50118, 71)
[0 - 7efdc8311000]   70.380174 {3}{RequestManager}: (45714, 72)
[0 - 7efdc8311000]   70.380175 {3}{RequestManager}: (10, 73)
[0 - 7efdc8311000]   70.380176 {3}{RequestManager}: (17668, 74)
[0 - 7efdc8311000]   70.380178 {3}{RequestManager}: (6, 75)
[0 - 7efdc8311000]   70.380179 {3}{RequestManager}: (45714, 76)
[0 - 7efdc8311000]   70.380180 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   70.380181 {3}{RequestManager}: (67, 0)
[0 - 7efdc8311000]   70.380182 {3}{RequestManager}: (68, 1)
[0 - 7efdc8311000]   70.380183 {3}{RequestManager}: (69, 2)
[0 - 7efdc8311000]   70.380184 {3}{RequestManager}: (70, 3)
[0 - 7efdc8311000]   70.380186 {3}{RequestManager}: (71, 4)
[0 - 7efdc8311000]   70.380187 {3}{RequestManager}: (72, 5)
[0 - 7efdc8311000]   70.380188 {3}{RequestManager}: (73, 6)
[0 - 7efdc8311000]   70.380189 {3}{RequestManager}: (74, 7)
[0 - 7efdc8311000]   70.380190 {3}{RequestManager}: (75, 8)
[0 - 7efdc8311000]   70.380193 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   70.380194 {3}{RequestManager}: (8194, 68)
[0 - 7efdc8311000]   70.380195 {3}{RequestManager}: (13, 69)
[0 - 7efdc8311000]   70.380196 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   70.380197 {3}{RequestManager}: (67, 0)
[0 - 7efdc8311000]   70.380198 {3}{RequestManager}: (68, 1)
[0 - 7efdc8311000]   70.380200 {3}{RequestManager}: Number of Verified Tokens = 2
[0 - 7efdc8311000]   70.380244 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for
[0 - 7efdc8311000]   70.380247 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   70.380248 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   70.380249 {3}{RequestManager}: (1152, 30)
[0 - 7efdc8311000]   70.380251 {3}{RequestManager}: (8194, 31)
[0 - 7efdc8311000]   70.380252 {3}{RequestManager}: (13, 32)
[0 - 7efdc8311000]   70.380253 {3}{RequestManager}: (10, 33)
[0 - 7efdc8311000]   70.380254 {3}{RequestManager}: (689, 34)
[0 - 7efdc8311000]   70.380256 {3}{RequestManager}: (14310, 35)
[0 - 7efdc8311000]   70.380257 {3}{RequestManager}: (5961, 36)
[0 - 7efdc8311000]   70.380258 {3}{RequestManager}: (3944, 37)
[0 - 7efdc8311000]   70.380259 {3}{RequestManager}: (14, 38)
[0 - 7efdc8311000]   70.380260 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   70.380261 {3}{RequestManager}: (8194, 31)
[0 - 7efdc8311000]   70.380263 {3}{RequestManager}: (13, 32)
[0 - 7efdc8311000]   70.380264 {3}{RequestManager}: (10, 33)
[0 - 7efdc8311000]   70.380265 {3}{RequestManager}: (689, 34)
[0 - 7efdc8311000]   70.380266 {3}{RequestManager}: (14310, 35)
[0 - 7efdc8311000]   70.380267 {3}{RequestManager}: (5961, 36)
[0 - 7efdc8311000]   70.380268 {3}{RequestManager}: (4, 37)
[0 - 7efdc8311000]   70.380296 {3}{RequestManager}: (4, 38)
[0 - 7efdc8311000]   70.380297 {3}{RequestManager}: (16, 39)
[0 - 7efdc8311000]   70.380298 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   70.380299 {3}{RequestManager}: (30, 9)
[0 - 7efdc8311000]   70.380300 {3}{RequestManager}: (31, 10)
[0 - 7efdc8311000]   70.380301 {3}{RequestManager}: (32, 11)
[0 - 7efdc8311000]   70.380302 {3}{RequestManager}: (33, 12)
[0 - 7efdc8311000]   70.380304 {3}{RequestManager}: (34, 13)
[0 - 7efdc8311000]   70.380305 {3}{RequestManager}: (35, 14)
[0 - 7efdc8311000]   70.380306 {3}{RequestManager}: (36, 15)
[0 - 7efdc8311000]   70.380307 {3}{RequestManager}: (37, 16)
[0 - 7efdc8311000]   70.380308 {3}{RequestManager}: (38, 17)
[0 - 7efdc8311000]   70.380310 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   70.380311 {3}{RequestManager}: (8194, 31)
[0 - 7efdc8311000]   70.380312 {3}{RequestManager}: (13, 32)
[0 - 7efdc8311000]   70.380313 {3}{RequestManager}: (10, 33)
[0 - 7efdc8311000]   70.380314 {3}{RequestManager}: (689, 34)
[0 - 7efdc8311000]   70.380315 {3}{RequestManager}: (14310, 35)
[0 - 7efdc8311000]   70.380317 {3}{RequestManager}: (5961, 36)
[0 - 7efdc8311000]   70.380318 {3}{RequestManager}: (4, 37)
[0 - 7efdc8311000]   70.380319 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   70.380320 {3}{RequestManager}: (30, 9)
[0 - 7efdc8311000]   70.380321 {3}{RequestManager}: (31, 10)
[0 - 7efdc8311000]   70.380322 {3}{RequestManager}: (32, 11)
[0 - 7efdc8311000]   70.380323 {3}{RequestManager}: (33, 12)
[0 - 7efdc8311000]   70.380324 {3}{RequestManager}: (34, 13)
[0 - 7efdc8311000]   70.380326 {3}{RequestManager}: (35, 14)
[0 - 7efdc8311000]   70.380327 {3}{RequestManager}: (36, 15)
[0 - 7efdc8311000]   70.380328 {3}{RequestManager}: Number of Verified Tokens = 7
[0 - 7efdc8311000]   70.380342 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a detailed product description for a food chopper.
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   72.738340 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   72.738346 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   72.738348 {3}{RequestManager}: (13, 69)
[0 - 7efdc8311000]   72.738349 {3}{RequestManager}: (10, 70)
[0 - 7efdc8311000]   72.738350 {3}{RequestManager}: (689, 71)
[0 - 7efdc8311000]   72.738352 {3}{RequestManager}: (689, 72)
[0 - 7efdc8311000]   72.738353 {3}{RequestManager}: (689, 73)
[0 - 7efdc8311000]   72.738354 {3}{RequestManager}: (689, 74)
[0 - 7efdc8311000]   72.738355 {3}{RequestManager}: (689, 75)
[0 - 7efdc8311000]   72.738356 {3}{RequestManager}: (689, 76)
[0 - 7efdc8311000]   72.738357 {3}{RequestManager}: (689, 77)
[0 - 7efdc8311000]   72.738358 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   72.738360 {3}{RequestManager}: (10, 70)
[0 - 7efdc8311000]   72.738361 {3}{RequestManager}: (689, 71)
[0 - 7efdc8311000]   72.738362 {3}{RequestManager}: (14310, 72)
[0 - 7efdc8311000]   72.738363 {3}{RequestManager}: (14310, 73)
[0 - 7efdc8311000]   72.738364 {3}{RequestManager}: (14310, 74)
[0 - 7efdc8311000]   72.738365 {3}{RequestManager}: (689, 75)
[0 - 7efdc8311000]   72.738366 {3}{RequestManager}: (689, 76)
[0 - 7efdc8311000]   72.738367 {3}{RequestManager}: (689, 77)
[0 - 7efdc8311000]   72.738368 {3}{RequestManager}: (689, 78)
[0 - 7efdc8311000]   72.738370 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   72.738371 {3}{RequestManager}: (69, 0)
[0 - 7efdc8311000]   72.738372 {3}{RequestManager}: (70, 1)
[0 - 7efdc8311000]   72.738373 {3}{RequestManager}: (71, 2)
[0 - 7efdc8311000]   72.738374 {3}{RequestManager}: (72, 3)
[0 - 7efdc8311000]   72.738375 {3}{RequestManager}: (73, 4)
[0 - 7efdc8311000]   72.738376 {3}{RequestManager}: (74, 5)
[0 - 7efdc8311000]   72.738377 {3}{RequestManager}: (75, 6)
[0 - 7efdc8311000]   72.738379 {3}{RequestManager}: (76, 7)
[0 - 7efdc8311000]   72.738380 {3}{RequestManager}: (77, 8)
[0 - 7efdc8311000]   72.738382 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   72.738383 {3}{RequestManager}: (10, 70)
[0 - 7efdc8311000]   72.738384 {3}{RequestManager}: (689, 71)
[0 - 7efdc8311000]   72.738385 {3}{RequestManager}: (14310, 72)
[0 - 7efdc8311000]   72.738386 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   72.738388 {3}{RequestManager}: (69, 0)
[0 - 7efdc8311000]   72.738389 {3}{RequestManager}: (70, 1)
[0 - 7efdc8311000]   72.738390 {3}{RequestManager}: (71, 2)
[0 - 7efdc8311000]   72.738391 {3}{RequestManager}: Number of Verified Tokens = 3
[0 - 7efdc8311000]   72.738435 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food cho
[0 - 7efdc8311000]   72.738437 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   72.738438 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   72.738439 {3}{RequestManager}: (4, 37)
[0 - 7efdc8311000]   72.738440 {3}{RequestManager}: (50118, 38)
[0 - 7efdc8311000]   72.738442 {3}{RequestManager}: (50118, 39)
[0 - 7efdc8311000]   72.738443 {3}{RequestManager}: (45714, 40)
[0 - 7efdc8311000]   72.738444 {3}{RequestManager}: (10, 41)
[0 - 7efdc8311000]   72.738445 {3}{RequestManager}: (4271, 42)
[0 - 7efdc8311000]   72.738446 {3}{RequestManager}: (1152, 43)
[0 - 7efdc8311000]   72.738447 {3}{RequestManager}: (8194, 44)
[0 - 7efdc8311000]   72.738448 {3}{RequestManager}: (13, 45)
[0 - 7efdc8311000]   72.738449 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   72.738451 {3}{RequestManager}: (50118, 38)
[0 - 7efdc8311000]   72.738452 {3}{RequestManager}: (50118, 39)
[0 - 7efdc8311000]   72.738453 {3}{RequestManager}: (45714, 40)
[0 - 7efdc8311000]   72.738454 {3}{RequestManager}: (10, 41)
[0 - 7efdc8311000]   72.738455 {3}{RequestManager}: (4271, 42)
[0 - 7efdc8311000]   72.738476 {3}{RequestManager}: (1152, 43)
[0 - 7efdc8311000]   72.738478 {3}{RequestManager}: (8194, 44)
[0 - 7efdc8311000]   72.738479 {3}{RequestManager}: (13, 45)
[0 - 7efdc8311000]   72.738480 {3}{RequestManager}: (10, 46)
[0 - 7efdc8311000]   72.738481 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   72.738482 {3}{RequestManager}: (37, 9)
[0 - 7efdc8311000]   72.738483 {3}{RequestManager}: (38, 10)
[0 - 7efdc8311000]   72.738484 {3}{RequestManager}: (39, 11)
[0 - 7efdc8311000]   72.738485 {3}{RequestManager}: (40, 12)
[0 - 7efdc8311000]   72.738486 {3}{RequestManager}: (41, 13)
[0 - 7efdc8311000]   72.738487 {3}{RequestManager}: (42, 14)
[0 - 7efdc8311000]   72.738488 {3}{RequestManager}: (43, 15)
[0 - 7efdc8311000]   72.738489 {3}{RequestManager}: (44, 16)
[0 - 7efdc8311000]   72.738490 {3}{RequestManager}: (45, 17)
[0 - 7efdc8311000]   72.738492 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   72.738494 {3}{RequestManager}: (50118, 38)
[0 - 7efdc8311000]   72.738495 {3}{RequestManager}: (50118, 39)
[0 - 7efdc8311000]   72.738496 {3}{RequestManager}: (45714, 40)
[0 - 7efdc8311000]   72.738497 {3}{RequestManager}: (10, 41)
[0 - 7efdc8311000]   72.738514 {3}{RequestManager}: (4271, 42)
[0 - 7efdc8311000]   72.738515 {3}{RequestManager}: (1152, 43)
[0 - 7efdc8311000]   72.738516 {3}{RequestManager}: (8194, 44)
[0 - 7efdc8311000]   72.738518 {3}{RequestManager}: (13, 45)
[0 - 7efdc8311000]   72.738519 {3}{RequestManager}: (10, 46)
[0 - 7efdc8311000]   72.738520 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   72.738521 {3}{RequestManager}: (37, 9)
[0 - 7efdc8311000]   72.738522 {3}{RequestManager}: (38, 10)
[0 - 7efdc8311000]   72.738523 {3}{RequestManager}: (39, 11)
[0 - 7efdc8311000]   72.738524 {3}{RequestManager}: (40, 12)
[0 - 7efdc8311000]   72.738526 {3}{RequestManager}: (41, 13)
[0 - 7efdc8311000]   72.738527 {3}{RequestManager}: (42, 14)
[0 - 7efdc8311000]   72.738528 {3}{RequestManager}: (43, 15)
[0 - 7efdc8311000]   72.738529 {3}{RequestManager}: (44, 16)
[0 - 7efdc8311000]   72.738530 {3}{RequestManager}: (45, 17)
[0 - 7efdc8311000]   72.738531 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   72.738548 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a detailed product description for a food chopper.

Write a detailed product description for a
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   75.096190 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   75.096195 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   75.096197 {3}{RequestManager}: (14310, 72)
[0 - 7efdc8311000]   75.096199 {3}{RequestManager}: (5961, 73)
[0 - 7efdc8311000]   75.096200 {3}{RequestManager}: (3944, 74)
[0 - 7efdc8311000]   75.096201 {3}{RequestManager}: (14, 75)
[0 - 7efdc8311000]   75.096202 {3}{RequestManager}: (8382, 76)
[0 - 7efdc8311000]   75.096204 {3}{RequestManager}: (47, 77)
[0 - 7efdc8311000]   75.096205 {3}{RequestManager}: (3116, 78)
[0 - 7efdc8311000]   75.096206 {3}{RequestManager}: (10, 79)
[0 - 7efdc8311000]   75.096207 {3}{RequestManager}: (3116, 80)
[0 - 7efdc8311000]   75.096208 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   75.096210 {3}{RequestManager}: (5961, 73)
[0 - 7efdc8311000]   75.096211 {3}{RequestManager}: (3944, 74)
[0 - 7efdc8311000]   75.096212 {3}{RequestManager}: (14, 75)
[0 - 7efdc8311000]   75.096213 {3}{RequestManager}: (8382, 76)
[0 - 7efdc8311000]   75.096214 {3}{RequestManager}: (47, 77)
[0 - 7efdc8311000]   75.096215 {3}{RequestManager}: (27804, 78)
[0 - 7efdc8311000]   75.096216 {3}{RequestManager}: (10, 79)
[0 - 7efdc8311000]   75.096217 {3}{RequestManager}: (4271, 80)
[0 - 7efdc8311000]   75.096219 {3}{RequestManager}: (10, 81)
[0 - 7efdc8311000]   75.096220 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   75.096221 {3}{RequestManager}: (72, 0)
[0 - 7efdc8311000]   75.096222 {3}{RequestManager}: (73, 1)
[0 - 7efdc8311000]   75.096223 {3}{RequestManager}: (74, 2)
[0 - 7efdc8311000]   75.096225 {3}{RequestManager}: (75, 3)
[0 - 7efdc8311000]   75.096226 {3}{RequestManager}: (76, 4)
[0 - 7efdc8311000]   75.096227 {3}{RequestManager}: (77, 5)
[0 - 7efdc8311000]   75.096228 {3}{RequestManager}: (78, 6)
[0 - 7efdc8311000]   75.096229 {3}{RequestManager}: (79, 7)
[0 - 7efdc8311000]   75.096230 {3}{RequestManager}: (80, 8)
[0 - 7efdc8311000]   75.096233 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   75.096234 {3}{RequestManager}: (5961, 73)
[0 - 7efdc8311000]   75.096236 {3}{RequestManager}: (3944, 74)
[0 - 7efdc8311000]   75.096237 {3}{RequestManager}: (14, 75)
[0 - 7efdc8311000]   75.096238 {3}{RequestManager}: (8382, 76)
[0 - 7efdc8311000]   75.096239 {3}{RequestManager}: (47, 77)
[0 - 7efdc8311000]   75.096240 {3}{RequestManager}: (27804, 78)
[0 - 7efdc8311000]   75.096242 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   75.096243 {3}{RequestManager}: (72, 0)
[0 - 7efdc8311000]   75.096244 {3}{RequestManager}: (73, 1)
[0 - 7efdc8311000]   75.096245 {3}{RequestManager}: (74, 2)
[0 - 7efdc8311000]   75.096246 {3}{RequestManager}: (75, 3)
[0 - 7efdc8311000]   75.096247 {3}{RequestManager}: (76, 4)
[0 - 7efdc8311000]   75.096249 {3}{RequestManager}: (77, 5)
[0 - 7efdc8311000]   75.096250 {3}{RequestManager}: Number of Verified Tokens = 6
[0 - 7efdc8311000]   75.096294 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop
[0 - 7efdc8311000]   75.096297 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   75.096298 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   75.096299 {3}{RequestManager}: (10, 46)
[0 - 7efdc8311000]   75.096300 {3}{RequestManager}: (689, 47)
[0 - 7efdc8311000]   75.096302 {3}{RequestManager}: (14310, 48)
[0 - 7efdc8311000]   75.096303 {3}{RequestManager}: (5961, 49)
[0 - 7efdc8311000]   75.096304 {3}{RequestManager}: (3944, 50)
[0 - 7efdc8311000]   75.096305 {3}{RequestManager}: (14, 51)
[0 - 7efdc8311000]   75.096306 {3}{RequestManager}: (8382, 52)
[0 - 7efdc8311000]   75.096307 {3}{RequestManager}: (47, 53)
[0 - 7efdc8311000]   75.096309 {3}{RequestManager}: (27804, 54)
[0 - 7efdc8311000]   75.096336 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   75.096338 {3}{RequestManager}: (689, 47)
[0 - 7efdc8311000]   75.096339 {3}{RequestManager}: (14310, 48)
[0 - 7efdc8311000]   75.096340 {3}{RequestManager}: (5961, 49)
[0 - 7efdc8311000]   75.096341 {3}{RequestManager}: (4, 50)
[0 - 7efdc8311000]   75.096342 {3}{RequestManager}: (4, 51)
[0 - 7efdc8311000]   75.096344 {3}{RequestManager}: (16, 52)
[0 - 7efdc8311000]   75.096345 {3}{RequestManager}: (47, 53)
[0 - 7efdc8311000]   75.096346 {3}{RequestManager}: (27804, 54)
[0 - 7efdc8311000]   75.096347 {3}{RequestManager}: (6, 55)
[0 - 7efdc8311000]   75.096348 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   75.096349 {3}{RequestManager}: (46, 9)
[0 - 7efdc8311000]   75.096350 {3}{RequestManager}: (47, 10)
[0 - 7efdc8311000]   75.096352 {3}{RequestManager}: (48, 11)
[0 - 7efdc8311000]   75.096353 {3}{RequestManager}: (49, 12)
[0 - 7efdc8311000]   75.096354 {3}{RequestManager}: (50, 13)
[0 - 7efdc8311000]   75.096355 {3}{RequestManager}: (51, 14)
[0 - 7efdc8311000]   75.096356 {3}{RequestManager}: (52, 15)
[0 - 7efdc8311000]   75.096357 {3}{RequestManager}: (53, 16)
[0 - 7efdc8311000]   75.096358 {3}{RequestManager}: (54, 17)
[0 - 7efdc8311000]   75.096360 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   75.096361 {3}{RequestManager}: (689, 47)
[0 - 7efdc8311000]   75.096362 {3}{RequestManager}: (14310, 48)
[0 - 7efdc8311000]   75.096364 {3}{RequestManager}: (5961, 49)
[0 - 7efdc8311000]   75.096365 {3}{RequestManager}: (4, 50)
[0 - 7efdc8311000]   75.096366 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   75.096367 {3}{RequestManager}: (46, 9)
[0 - 7efdc8311000]   75.096368 {3}{RequestManager}: (47, 10)
[0 - 7efdc8311000]   75.096369 {3}{RequestManager}: (48, 11)
[0 - 7efdc8311000]   75.096370 {3}{RequestManager}: (49, 12)
[0 - 7efdc8311000]   75.096372 {3}{RequestManager}: Number of Verified Tokens = 4
[0 - 7efdc8311000]   75.096388 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a detailed product description for a food chopper.

Write a detailed product description for a food chopper.
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   77.454212 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   77.454218 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   77.454220 {3}{RequestManager}: (27804, 78)
[0 - 7efdc8311000]   77.454221 {3}{RequestManager}: (12849, 79)
[0 - 7efdc8311000]   77.454223 {3}{RequestManager}: (8, 80)
[0 - 7efdc8311000]   77.454224 {3}{RequestManager}: (8942, 81)
[0 - 7efdc8311000]   77.454225 {3}{RequestManager}: (4, 82)
[0 - 7efdc8311000]   77.454226 {3}{RequestManager}: (50118, 83)
[0 - 7efdc8311000]   77.454227 {3}{RequestManager}: (50118, 84)
[0 - 7efdc8311000]   77.454228 {3}{RequestManager}: (45714, 85)
[0 - 7efdc8311000]   77.454230 {3}{RequestManager}: (10, 86)
[0 - 7efdc8311000]   77.454231 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   77.454232 {3}{RequestManager}: (12849, 79)
[0 - 7efdc8311000]   77.454233 {3}{RequestManager}: (8, 80)
[0 - 7efdc8311000]   77.454234 {3}{RequestManager}: (8942, 81)
[0 - 7efdc8311000]   77.454235 {3}{RequestManager}: (4, 82)
[0 - 7efdc8311000]   77.454236 {3}{RequestManager}: (50118, 83)
[0 - 7efdc8311000]   77.454237 {3}{RequestManager}: (50118, 84)
[0 - 7efdc8311000]   77.454238 {3}{RequestManager}: (45714, 85)
[0 - 7efdc8311000]   77.454239 {3}{RequestManager}: (10, 86)
[0 - 7efdc8311000]   77.454241 {3}{RequestManager}: (4271, 87)
[0 - 7efdc8311000]   77.454242 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   77.454243 {3}{RequestManager}: (78, 0)
[0 - 7efdc8311000]   77.454244 {3}{RequestManager}: (79, 1)
[0 - 7efdc8311000]   77.454245 {3}{RequestManager}: (80, 2)
[0 - 7efdc8311000]   77.454246 {3}{RequestManager}: (81, 3)
[0 - 7efdc8311000]   77.454247 {3}{RequestManager}: (82, 4)
[0 - 7efdc8311000]   77.454248 {3}{RequestManager}: (83, 5)
[0 - 7efdc8311000]   77.454249 {3}{RequestManager}: (84, 6)
[0 - 7efdc8311000]   77.454250 {3}{RequestManager}: (85, 7)
[0 - 7efdc8311000]   77.454251 {3}{RequestManager}: (86, 8)
[0 - 7efdc8311000]   77.454254 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   77.454255 {3}{RequestManager}: (12849, 79)
[0 - 7efdc8311000]   77.454256 {3}{RequestManager}: (8, 80)
[0 - 7efdc8311000]   77.454257 {3}{RequestManager}: (8942, 81)
[0 - 7efdc8311000]   77.454259 {3}{RequestManager}: (4, 82)
[0 - 7efdc8311000]   77.454260 {3}{RequestManager}: (50118, 83)
[0 - 7efdc8311000]   77.454261 {3}{RequestManager}: (50118, 84)
[0 - 7efdc8311000]   77.454262 {3}{RequestManager}: (45714, 85)
[0 - 7efdc8311000]   77.454263 {3}{RequestManager}: (10, 86)
[0 - 7efdc8311000]   77.454264 {3}{RequestManager}: (4271, 87)
[0 - 7efdc8311000]   77.454265 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   77.454266 {3}{RequestManager}: (78, 0)
[0 - 7efdc8311000]   77.454267 {3}{RequestManager}: (79, 1)
[0 - 7efdc8311000]   77.454269 {3}{RequestManager}: (80, 2)
[0 - 7efdc8311000]   77.454270 {3}{RequestManager}: (81, 3)
[0 - 7efdc8311000]   77.454271 {3}{RequestManager}: (82, 4)
[0 - 7efdc8311000]   77.454272 {3}{RequestManager}: (83, 5)
[0 - 7efdc8311000]   77.454273 {3}{RequestManager}: (84, 6)
[0 - 7efdc8311000]   77.454274 {3}{RequestManager}: (85, 7)
[0 - 7efdc8311000]   77.454275 {3}{RequestManager}: (86, 8)
[0 - 7efdc8311000]   77.454277 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   77.454321 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed
[0 - 7efdc8311000]   77.454324 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   77.454325 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   77.454326 {3}{RequestManager}: (4, 50)
[0 - 7efdc8311000]   77.454327 {3}{RequestManager}: (50118, 51)
[0 - 7efdc8311000]   77.454355 {3}{RequestManager}: (50118, 52)
[0 - 7efdc8311000]   77.454356 {3}{RequestManager}: (45714, 53)
[0 - 7efdc8311000]   77.454357 {3}{RequestManager}: (10, 54)
[0 - 7efdc8311000]   77.454358 {3}{RequestManager}: (4271, 55)
[0 - 7efdc8311000]   77.454360 {3}{RequestManager}: (1152, 56)
[0 - 7efdc8311000]   77.454361 {3}{RequestManager}: (8194, 57)
[0 - 7efdc8311000]   77.454362 {3}{RequestManager}: (13, 58)
[0 - 7efdc8311000]   77.454363 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   77.454364 {3}{RequestManager}: (50118, 51)
[0 - 7efdc8311000]   77.454365 {3}{RequestManager}: (50118, 52)
[0 - 7efdc8311000]   77.454366 {3}{RequestManager}: (45714, 53)
[0 - 7efdc8311000]   77.454367 {3}{RequestManager}: (10, 54)
[0 - 7efdc8311000]   77.454368 {3}{RequestManager}: (4271, 55)
[0 - 7efdc8311000]   77.454369 {3}{RequestManager}: (1152, 56)
[0 - 7efdc8311000]   77.454370 {3}{RequestManager}: (8194, 57)
[0 - 7efdc8311000]   77.454371 {3}{RequestManager}: (13, 58)
[0 - 7efdc8311000]   77.454372 {3}{RequestManager}: (10, 59)
[0 - 7efdc8311000]   77.454373 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   77.454375 {3}{RequestManager}: (50, 9)
[0 - 7efdc8311000]   77.454376 {3}{RequestManager}: (51, 10)
[0 - 7efdc8311000]   77.454377 {3}{RequestManager}: (52, 11)
[0 - 7efdc8311000]   77.454394 {3}{RequestManager}: (53, 12)
[0 - 7efdc8311000]   77.454395 {3}{RequestManager}: (54, 13)
[0 - 7efdc8311000]   77.454396 {3}{RequestManager}: (55, 14)
[0 - 7efdc8311000]   77.454397 {3}{RequestManager}: (56, 15)
[0 - 7efdc8311000]   77.454399 {3}{RequestManager}: (57, 16)
[0 - 7efdc8311000]   77.454400 {3}{RequestManager}: (58, 17)
[0 - 7efdc8311000]   77.454402 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   77.454403 {3}{RequestManager}: (50118, 51)
[0 - 7efdc8311000]   77.454404 {3}{RequestManager}: (50118, 52)
[0 - 7efdc8311000]   77.454405 {3}{RequestManager}: (45714, 53)
[0 - 7efdc8311000]   77.454406 {3}{RequestManager}: (10, 54)
[0 - 7efdc8311000]   77.454407 {3}{RequestManager}: (4271, 55)
[0 - 7efdc8311000]   77.454409 {3}{RequestManager}: (1152, 56)
[0 - 7efdc8311000]   77.454410 {3}{RequestManager}: (8194, 57)
[0 - 7efdc8311000]   77.454411 {3}{RequestManager}: (13, 58)
[0 - 7efdc8311000]   77.454412 {3}{RequestManager}: (10, 59)
[0 - 7efdc8311000]   77.454413 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   77.454414 {3}{RequestManager}: (50, 9)
[0 - 7efdc8311000]   77.454415 {3}{RequestManager}: (51, 10)
[0 - 7efdc8311000]   77.454416 {3}{RequestManager}: (52, 11)
[0 - 7efdc8311000]   77.454418 {3}{RequestManager}: (53, 12)
[0 - 7efdc8311000]   77.454419 {3}{RequestManager}: (54, 13)
[0 - 7efdc8311000]   77.454420 {3}{RequestManager}: (55, 14)
[0 - 7efdc8311000]   77.454421 {3}{RequestManager}: (56, 15)
[0 - 7efdc8311000]   77.454422 {3}{RequestManager}: (57, 16)
[0 - 7efdc8311000]   77.454423 {3}{RequestManager}: (58, 17)
[0 - 7efdc8311000]   77.454424 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   77.454445 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   79.812010 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   79.812016 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   79.812017 {3}{RequestManager}: (4271, 87)
[0 - 7efdc8311000]   79.812019 {3}{RequestManager}: (10, 88)
[0 - 7efdc8311000]   79.812020 {3}{RequestManager}: (8194, 89)
[0 - 7efdc8311000]   79.812021 {3}{RequestManager}: (13, 90)
[0 - 7efdc8311000]   79.812022 {3}{RequestManager}: (10, 91)
[0 - 7efdc8311000]   79.812024 {3}{RequestManager}: (689, 92)
[0 - 7efdc8311000]   79.812025 {3}{RequestManager}: (689, 93)
[0 - 7efdc8311000]   79.812026 {3}{RequestManager}: (689, 94)
[0 - 7efdc8311000]   79.812027 {3}{RequestManager}: (689, 95)
[0 - 7efdc8311000]   79.812028 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   79.812029 {3}{RequestManager}: (1152, 88)
[0 - 7efdc8311000]   79.812030 {3}{RequestManager}: (1152, 89)
[0 - 7efdc8311000]   79.812031 {3}{RequestManager}: (13, 90)
[0 - 7efdc8311000]   79.812032 {3}{RequestManager}: (10, 91)
[0 - 7efdc8311000]   79.812033 {3}{RequestManager}: (689, 92)
[0 - 7efdc8311000]   79.812035 {3}{RequestManager}: (14310, 93)
[0 - 7efdc8311000]   79.812036 {3}{RequestManager}: (14310, 94)
[0 - 7efdc8311000]   79.812037 {3}{RequestManager}: (14310, 95)
[0 - 7efdc8311000]   79.812038 {3}{RequestManager}: (689, 96)
[0 - 7efdc8311000]   79.812039 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   79.812040 {3}{RequestManager}: (87, 0)
[0 - 7efdc8311000]   79.812041 {3}{RequestManager}: (88, 1)
[0 - 7efdc8311000]   79.812042 {3}{RequestManager}: (89, 2)
[0 - 7efdc8311000]   79.812043 {3}{RequestManager}: (90, 3)
[0 - 7efdc8311000]   79.812045 {3}{RequestManager}: (91, 4)
[0 - 7efdc8311000]   79.812046 {3}{RequestManager}: (92, 5)
[0 - 7efdc8311000]   79.812047 {3}{RequestManager}: (93, 6)
[0 - 7efdc8311000]   79.812048 {3}{RequestManager}: (94, 7)
[0 - 7efdc8311000]   79.812049 {3}{RequestManager}: (95, 8)
[0 - 7efdc8311000]   79.812051 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   79.812052 {3}{RequestManager}: (1152, 88)
[0 - 7efdc8311000]   79.812053 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   79.812054 {3}{RequestManager}: (87, 0)
[0 - 7efdc8311000]   79.812056 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]   79.812101 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product
[0 - 7efdc8311000]   79.812104 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   79.812105 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   79.812107 {3}{RequestManager}: (10, 59)
[0 - 7efdc8311000]   79.812108 {3}{RequestManager}: (689, 60)
[0 - 7efdc8311000]   79.812109 {3}{RequestManager}: (14310, 61)
[0 - 7efdc8311000]   79.812110 {3}{RequestManager}: (5961, 62)
[0 - 7efdc8311000]   79.812111 {3}{RequestManager}: (4, 63)
[0 - 7efdc8311000]   79.812112 {3}{RequestManager}: (50118, 64)
[0 - 7efdc8311000]   79.812114 {3}{RequestManager}: (50118, 65)
[0 - 7efdc8311000]   79.812115 {3}{RequestManager}: (45714, 66)
[0 - 7efdc8311000]   79.812116 {3}{RequestManager}: (10, 67)
[0 - 7efdc8311000]   79.812117 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   79.812118 {3}{RequestManager}: (689, 60)
[0 - 7efdc8311000]   79.812119 {3}{RequestManager}: (14310, 61)
[0 - 7efdc8311000]   79.812120 {3}{RequestManager}: (5961, 62)
[0 - 7efdc8311000]   79.812121 {3}{RequestManager}: (4, 63)
[0 - 7efdc8311000]   79.812122 {3}{RequestManager}: (50118, 64)
[0 - 7efdc8311000]   79.812123 {3}{RequestManager}: (50118, 65)
[0 - 7efdc8311000]   79.812124 {3}{RequestManager}: (45714, 66)
[0 - 7efdc8311000]   79.812151 {3}{RequestManager}: (10, 67)
[0 - 7efdc8311000]   79.812152 {3}{RequestManager}: (4271, 68)
[0 - 7efdc8311000]   79.812153 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   79.812155 {3}{RequestManager}: (59, 9)
[0 - 7efdc8311000]   79.812156 {3}{RequestManager}: (60, 10)
[0 - 7efdc8311000]   79.812157 {3}{RequestManager}: (61, 11)
[0 - 7efdc8311000]   79.812158 {3}{RequestManager}: (62, 12)
[0 - 7efdc8311000]   79.812159 {3}{RequestManager}: (63, 13)
[0 - 7efdc8311000]   79.812160 {3}{RequestManager}: (64, 14)
[0 - 7efdc8311000]   79.812161 {3}{RequestManager}: (65, 15)
[0 - 7efdc8311000]   79.812162 {3}{RequestManager}: (66, 16)
[0 - 7efdc8311000]   79.812163 {3}{RequestManager}: (67, 17)
[0 - 7efdc8311000]   79.812166 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   79.812167 {3}{RequestManager}: (689, 60)
[0 - 7efdc8311000]   79.812168 {3}{RequestManager}: (14310, 61)
[0 - 7efdc8311000]   79.812169 {3}{RequestManager}: (5961, 62)
[0 - 7efdc8311000]   79.812170 {3}{RequestManager}: (4, 63)
[0 - 7efdc8311000]   79.812171 {3}{RequestManager}: (50118, 64)
[0 - 7efdc8311000]   79.812173 {3}{RequestManager}: (50118, 65)
[0 - 7efdc8311000]   79.812174 {3}{RequestManager}: (45714, 66)
[0 - 7efdc8311000]   79.812175 {3}{RequestManager}: (10, 67)
[0 - 7efdc8311000]   79.812192 {3}{RequestManager}: (4271, 68)
[0 - 7efdc8311000]   79.812194 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   79.812195 {3}{RequestManager}: (59, 9)
[0 - 7efdc8311000]   79.812196 {3}{RequestManager}: (60, 10)
[0 - 7efdc8311000]   79.812197 {3}{RequestManager}: (61, 11)
[0 - 7efdc8311000]   79.812207 {3}{RequestManager}: (62, 12)
[0 - 7efdc8311000]   79.812209 {3}{RequestManager}: (63, 13)
[0 - 7efdc8311000]   79.812210 {3}{RequestManager}: (64, 14)
[0 - 7efdc8311000]   79.812211 {3}{RequestManager}: (65, 15)
[0 - 7efdc8311000]   79.812212 {3}{RequestManager}: (66, 16)
[0 - 7efdc8311000]   79.812214 {3}{RequestManager}: (67, 17)
[0 - 7efdc8311000]   79.812215 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   79.812238 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   82.170469 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   82.170476 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   82.170477 {3}{RequestManager}: (1152, 88)
[0 - 7efdc8311000]   82.170479 {3}{RequestManager}: (8194, 89)
[0 - 7efdc8311000]   82.170480 {3}{RequestManager}: (13, 90)
[0 - 7efdc8311000]   82.170481 {3}{RequestManager}: (10, 91)
[0 - 7efdc8311000]   82.170482 {3}{RequestManager}: (689, 92)
[0 - 7efdc8311000]   82.170484 {3}{RequestManager}: (14310, 93)
[0 - 7efdc8311000]   82.170485 {3}{RequestManager}: (5961, 94)
[0 - 7efdc8311000]   82.170486 {3}{RequestManager}: (3944, 95)
[0 - 7efdc8311000]   82.170487 {3}{RequestManager}: (14, 96)
[0 - 7efdc8311000]   82.170488 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   82.170489 {3}{RequestManager}: (8194, 89)
[0 - 7efdc8311000]   82.170490 {3}{RequestManager}: (13, 90)
[0 - 7efdc8311000]   82.170491 {3}{RequestManager}: (10, 91)
[0 - 7efdc8311000]   82.170492 {3}{RequestManager}: (689, 92)
[0 - 7efdc8311000]   82.170494 {3}{RequestManager}: (14310, 93)
[0 - 7efdc8311000]   82.170495 {3}{RequestManager}: (5961, 94)
[0 - 7efdc8311000]   82.170496 {3}{RequestManager}: (3944, 95)
[0 - 7efdc8311000]   82.170497 {3}{RequestManager}: (14, 96)
[0 - 7efdc8311000]   82.170498 {3}{RequestManager}: (8382, 97)
[0 - 7efdc8311000]   82.170499 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   82.170500 {3}{RequestManager}: (88, 0)
[0 - 7efdc8311000]   82.170501 {3}{RequestManager}: (89, 1)
[0 - 7efdc8311000]   82.170502 {3}{RequestManager}: (90, 2)
[0 - 7efdc8311000]   82.170503 {3}{RequestManager}: (91, 3)
[0 - 7efdc8311000]   82.170504 {3}{RequestManager}: (92, 4)
[0 - 7efdc8311000]   82.170505 {3}{RequestManager}: (93, 5)
[0 - 7efdc8311000]   82.170506 {3}{RequestManager}: (94, 6)
[0 - 7efdc8311000]   82.170508 {3}{RequestManager}: (95, 7)
[0 - 7efdc8311000]   82.170509 {3}{RequestManager}: (96, 8)
[0 - 7efdc8311000]   82.170512 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   82.170513 {3}{RequestManager}: (8194, 89)
[0 - 7efdc8311000]   82.170514 {3}{RequestManager}: (13, 90)
[0 - 7efdc8311000]   82.170515 {3}{RequestManager}: (10, 91)
[0 - 7efdc8311000]   82.170516 {3}{RequestManager}: (689, 92)
[0 - 7efdc8311000]   82.170517 {3}{RequestManager}: (14310, 93)
[0 - 7efdc8311000]   82.170518 {3}{RequestManager}: (5961, 94)
[0 - 7efdc8311000]   82.170519 {3}{RequestManager}: (3944, 95)
[0 - 7efdc8311000]   82.170520 {3}{RequestManager}: (14, 96)
[0 - 7efdc8311000]   82.170522 {3}{RequestManager}: (8382, 97)
[0 - 7efdc8311000]   82.170523 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   82.170524 {3}{RequestManager}: (88, 0)
[0 - 7efdc8311000]   82.170525 {3}{RequestManager}: (89, 1)
[0 - 7efdc8311000]   82.170526 {3}{RequestManager}: (90, 2)
[0 - 7efdc8311000]   82.170527 {3}{RequestManager}: (91, 3)
[0 - 7efdc8311000]   82.170529 {3}{RequestManager}: (92, 4)
[0 - 7efdc8311000]   82.170530 {3}{RequestManager}: (93, 5)
[0 - 7efdc8311000]   82.170531 {3}{RequestManager}: (94, 6)
[0 - 7efdc8311000]   82.170532 {3}{RequestManager}: (95, 7)
[0 - 7efdc8311000]   82.170533 {3}{RequestManager}: (96, 8)
[0 - 7efdc8311000]   82.170535 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   82.170584 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets
[0 - 7efdc8311000]   82.170586 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   82.170587 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   82.170589 {3}{RequestManager}: (4271, 68)
[0 - 7efdc8311000]   82.170611 {3}{RequestManager}: (1152, 69)
[0 - 7efdc8311000]   82.170612 {3}{RequestManager}: (8194, 70)
[0 - 7efdc8311000]   82.170613 {3}{RequestManager}: (13, 71)
[0 - 7efdc8311000]   82.170614 {3}{RequestManager}: (10, 72)
[0 - 7efdc8311000]   82.170615 {3}{RequestManager}: (689, 73)
[0 - 7efdc8311000]   82.170617 {3}{RequestManager}: (14310, 74)
[0 - 7efdc8311000]   82.170618 {3}{RequestManager}: (5961, 75)
[0 - 7efdc8311000]   82.170619 {3}{RequestManager}: (4, 76)
[0 - 7efdc8311000]   82.170620 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   82.170621 {3}{RequestManager}: (1152, 69)
[0 - 7efdc8311000]   82.170622 {3}{RequestManager}: (8194, 70)
[0 - 7efdc8311000]   82.170623 {3}{RequestManager}: (13, 71)
[0 - 7efdc8311000]   82.170624 {3}{RequestManager}: (10, 72)
[0 - 7efdc8311000]   82.170625 {3}{RequestManager}: (689, 73)
[0 - 7efdc8311000]   82.170626 {3}{RequestManager}: (14310, 74)
[0 - 7efdc8311000]   82.170627 {3}{RequestManager}: (5961, 75)
[0 - 7efdc8311000]   82.170629 {3}{RequestManager}: (4, 76)
[0 - 7efdc8311000]   82.170630 {3}{RequestManager}: (50118, 77)
[0 - 7efdc8311000]   82.170631 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   82.170632 {3}{RequestManager}: (68, 9)
[0 - 7efdc8311000]   82.170649 {3}{RequestManager}: (69, 10)
[0 - 7efdc8311000]   82.170650 {3}{RequestManager}: (70, 11)
[0 - 7efdc8311000]   82.170652 {3}{RequestManager}: (71, 12)
[0 - 7efdc8311000]   82.170653 {3}{RequestManager}: (72, 13)
[0 - 7efdc8311000]   82.170654 {3}{RequestManager}: (73, 14)
[0 - 7efdc8311000]   82.170655 {3}{RequestManager}: (74, 15)
[0 - 7efdc8311000]   82.170656 {3}{RequestManager}: (75, 16)
[0 - 7efdc8311000]   82.170657 {3}{RequestManager}: (76, 17)
[0 - 7efdc8311000]   82.170659 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   82.170660 {3}{RequestManager}: (1152, 69)
[0 - 7efdc8311000]   82.170661 {3}{RequestManager}: (8194, 70)
[0 - 7efdc8311000]   82.170663 {3}{RequestManager}: (13, 71)
[0 - 7efdc8311000]   82.170664 {3}{RequestManager}: (10, 72)
[0 - 7efdc8311000]   82.170665 {3}{RequestManager}: (689, 73)
[0 - 7efdc8311000]   82.170666 {3}{RequestManager}: (14310, 74)
[0 - 7efdc8311000]   82.170667 {3}{RequestManager}: (5961, 75)
[0 - 7efdc8311000]   82.170668 {3}{RequestManager}: (4, 76)
[0 - 7efdc8311000]   82.170669 {3}{RequestManager}: (50118, 77)
[0 - 7efdc8311000]   82.170671 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   82.170672 {3}{RequestManager}: (68, 9)
[0 - 7efdc8311000]   82.170673 {3}{RequestManager}: (69, 10)
[0 - 7efdc8311000]   82.170674 {3}{RequestManager}: (70, 11)
[0 - 7efdc8311000]   82.170675 {3}{RequestManager}: (71, 12)
[0 - 7efdc8311000]   82.170676 {3}{RequestManager}: (72, 13)
[0 - 7efdc8311000]   82.170677 {3}{RequestManager}: (73, 14)
[0 - 7efdc8311000]   82.170679 {3}{RequestManager}: (74, 15)
[0 - 7efdc8311000]   82.170680 {3}{RequestManager}: (75, 16)
[0 - 7efdc8311000]   82.170681 {3}{RequestManager}: (76, 17)
[0 - 7efdc8311000]   82.170682 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   82.170705 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   84.528328 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   84.528335 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   84.528337 {3}{RequestManager}: (8382, 97)
[0 - 7efdc8311000]   84.528338 {3}{RequestManager}: (47, 98)
[0 - 7efdc8311000]   84.528340 {3}{RequestManager}: (3116, 99)
[0 - 7efdc8311000]   84.528341 {3}{RequestManager}: (10, 100)
[0 - 7efdc8311000]   84.528343 {3}{RequestManager}: (3116, 101)
[0 - 7efdc8311000]   84.528344 {3}{RequestManager}: (10, 102)
[0 - 7efdc8311000]   84.528345 {3}{RequestManager}: (3116, 103)
[0 - 7efdc8311000]   84.528347 {3}{RequestManager}: (10, 104)
[0 - 7efdc8311000]   84.528348 {3}{RequestManager}: (3116, 105)
[0 - 7efdc8311000]   84.528349 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   84.528350 {3}{RequestManager}: (47, 98)
[0 - 7efdc8311000]   84.528352 {3}{RequestManager}: (27804, 99)
[0 - 7efdc8311000]   84.528353 {3}{RequestManager}: (10, 100)
[0 - 7efdc8311000]   84.528354 {3}{RequestManager}: (4271, 101)
[0 - 7efdc8311000]   84.528355 {3}{RequestManager}: (10, 102)
[0 - 7efdc8311000]   84.528356 {3}{RequestManager}: (4271, 103)
[0 - 7efdc8311000]   84.528358 {3}{RequestManager}: (10, 104)
[0 - 7efdc8311000]   84.528359 {3}{RequestManager}: (3116, 105)
[0 - 7efdc8311000]   84.528360 {3}{RequestManager}: (10, 106)
[0 - 7efdc8311000]   84.528361 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   84.528363 {3}{RequestManager}: (97, 0)
[0 - 7efdc8311000]   84.528364 {3}{RequestManager}: (98, 1)
[0 - 7efdc8311000]   84.528365 {3}{RequestManager}: (99, 2)
[0 - 7efdc8311000]   84.528366 {3}{RequestManager}: (100, 3)
[0 - 7efdc8311000]   84.528368 {3}{RequestManager}: (101, 4)
[0 - 7efdc8311000]   84.528369 {3}{RequestManager}: (102, 5)
[0 - 7efdc8311000]   84.528370 {3}{RequestManager}: (103, 6)
[0 - 7efdc8311000]   84.528371 {3}{RequestManager}: (104, 7)
[0 - 7efdc8311000]   84.528372 {3}{RequestManager}: (105, 8)
[0 - 7efdc8311000]   84.528375 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   84.528376 {3}{RequestManager}: (47, 98)
[0 - 7efdc8311000]   84.528377 {3}{RequestManager}: (27804, 99)
[0 - 7efdc8311000]   84.528379 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   84.528380 {3}{RequestManager}: (97, 0)
[0 - 7efdc8311000]   84.528381 {3}{RequestManager}: (98, 1)
[0 - 7efdc8311000]   84.528383 {3}{RequestManager}: Number of Verified Tokens = 2
[0 - 7efdc8311000]   84.528446 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop
[0 - 7efdc8311000]   84.528449 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   84.528450 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   84.528451 {3}{RequestManager}: (50118, 77)
[0 - 7efdc8311000]   84.528453 {3}{RequestManager}: (50118, 78)
[0 - 7efdc8311000]   84.528454 {3}{RequestManager}: (45714, 79)
[0 - 7efdc8311000]   84.528455 {3}{RequestManager}: (10, 80)
[0 - 7efdc8311000]   84.528457 {3}{RequestManager}: (4271, 81)
[0 - 7efdc8311000]   84.528458 {3}{RequestManager}: (1152, 82)
[0 - 7efdc8311000]   84.528459 {3}{RequestManager}: (8194, 83)
[0 - 7efdc8311000]   84.528461 {3}{RequestManager}: (13, 84)
[0 - 7efdc8311000]   84.528462 {3}{RequestManager}: (10, 85)
[0 - 7efdc8311000]   84.528463 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   84.528464 {3}{RequestManager}: (50118, 78)
[0 - 7efdc8311000]   84.528465 {3}{RequestManager}: (45714, 79)
[0 - 7efdc8311000]   84.528467 {3}{RequestManager}: (10, 80)
[0 - 7efdc8311000]   84.528468 {3}{RequestManager}: (4271, 81)
[0 - 7efdc8311000]   84.528492 {3}{RequestManager}: (1152, 82)
[0 - 7efdc8311000]   84.528493 {3}{RequestManager}: (8194, 83)
[0 - 7efdc8311000]   84.528494 {3}{RequestManager}: (13, 84)
[0 - 7efdc8311000]   84.528495 {3}{RequestManager}: (10, 85)
[0 - 7efdc8311000]   84.528497 {3}{RequestManager}: (689, 86)
[0 - 7efdc8311000]   84.528498 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   84.528499 {3}{RequestManager}: (77, 9)
[0 - 7efdc8311000]   84.528500 {3}{RequestManager}: (78, 10)
[0 - 7efdc8311000]   84.528501 {3}{RequestManager}: (79, 11)
[0 - 7efdc8311000]   84.528503 {3}{RequestManager}: (80, 12)
[0 - 7efdc8311000]   84.528504 {3}{RequestManager}: (81, 13)
[0 - 7efdc8311000]   84.528505 {3}{RequestManager}: (82, 14)
[0 - 7efdc8311000]   84.528506 {3}{RequestManager}: (83, 15)
[0 - 7efdc8311000]   84.528507 {3}{RequestManager}: (84, 16)
[0 - 7efdc8311000]   84.528509 {3}{RequestManager}: (85, 17)
[0 - 7efdc8311000]   84.528511 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   84.528512 {3}{RequestManager}: (50118, 78)
[0 - 7efdc8311000]   84.528513 {3}{RequestManager}: (45714, 79)
[0 - 7efdc8311000]   84.528515 {3}{RequestManager}: (10, 80)
[0 - 7efdc8311000]   84.528516 {3}{RequestManager}: (4271, 81)
[0 - 7efdc8311000]   84.528517 {3}{RequestManager}: (1152, 82)
[0 - 7efdc8311000]   84.528518 {3}{RequestManager}: (8194, 83)
[0 - 7efdc8311000]   84.528519 {3}{RequestManager}: (13, 84)
[0 - 7efdc8311000]   84.528521 {3}{RequestManager}: (10, 85)
[0 - 7efdc8311000]   84.528522 {3}{RequestManager}: (689, 86)
[0 - 7efdc8311000]   84.528523 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   84.528524 {3}{RequestManager}: (77, 9)
[0 - 7efdc8311000]   84.528526 {3}{RequestManager}: (78, 10)
[0 - 7efdc8311000]   84.528527 {3}{RequestManager}: (79, 11)
[0 - 7efdc8311000]   84.528528 {3}{RequestManager}: (80, 12)
[0 - 7efdc8311000]   84.528529 {3}{RequestManager}: (81, 13)
[0 - 7efdc8311000]   84.528530 {3}{RequestManager}: (82, 14)
[0 - 7efdc8311000]   84.528532 {3}{RequestManager}: (83, 15)
[0 - 7efdc8311000]   84.528533 {3}{RequestManager}: (84, 16)
[0 - 7efdc8311000]   84.528534 {3}{RequestManager}: (85, 17)
[0 - 7efdc8311000]   84.528535 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   84.528563 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   86.893962 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   86.893968 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   86.893970 {3}{RequestManager}: (27804, 99)
[0 - 7efdc8311000]   86.893971 {3}{RequestManager}: (12849, 100)
[0 - 7efdc8311000]   86.893972 {3}{RequestManager}: (8, 101)
[0 - 7efdc8311000]   86.893974 {3}{RequestManager}: (8942, 102)
[0 - 7efdc8311000]   86.893975 {3}{RequestManager}: (4, 103)
[0 - 7efdc8311000]   86.893976 {3}{RequestManager}: (50118, 104)
[0 - 7efdc8311000]   86.893978 {3}{RequestManager}: (50118, 105)
[0 - 7efdc8311000]   86.893979 {3}{RequestManager}: (45714, 106)
[0 - 7efdc8311000]   86.893980 {3}{RequestManager}: (6, 107)
[0 - 7efdc8311000]   86.893981 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   86.893982 {3}{RequestManager}: (12849, 100)
[0 - 7efdc8311000]   86.893983 {3}{RequestManager}: (8, 101)
[0 - 7efdc8311000]   86.893984 {3}{RequestManager}: (8942, 102)
[0 - 7efdc8311000]   86.893986 {3}{RequestManager}: (4, 103)
[0 - 7efdc8311000]   86.893987 {3}{RequestManager}: (50118, 104)
[0 - 7efdc8311000]   86.893988 {3}{RequestManager}: (50118, 105)
[0 - 7efdc8311000]   86.893989 {3}{RequestManager}: (45714, 106)
[0 - 7efdc8311000]   86.893990 {3}{RequestManager}: (10, 107)
[0 - 7efdc8311000]   86.893991 {3}{RequestManager}: (17668, 108)
[0 - 7efdc8311000]   86.893992 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   86.893993 {3}{RequestManager}: (99, 0)
[0 - 7efdc8311000]   86.893995 {3}{RequestManager}: (100, 1)
[0 - 7efdc8311000]   86.893996 {3}{RequestManager}: (101, 2)
[0 - 7efdc8311000]   86.893997 {3}{RequestManager}: (102, 3)
[0 - 7efdc8311000]   86.893998 {3}{RequestManager}: (103, 4)
[0 - 7efdc8311000]   86.893999 {3}{RequestManager}: (104, 5)
[0 - 7efdc8311000]   86.894000 {3}{RequestManager}: (105, 6)
[0 - 7efdc8311000]   86.894001 {3}{RequestManager}: (106, 7)
[0 - 7efdc8311000]   86.894002 {3}{RequestManager}: (107, 8)
[0 - 7efdc8311000]   86.894005 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   86.894006 {3}{RequestManager}: (12849, 100)
[0 - 7efdc8311000]   86.894007 {3}{RequestManager}: (8, 101)
[0 - 7efdc8311000]   86.894008 {3}{RequestManager}: (8942, 102)
[0 - 7efdc8311000]   86.894009 {3}{RequestManager}: (4, 103)
[0 - 7efdc8311000]   86.894010 {3}{RequestManager}: (50118, 104)
[0 - 7efdc8311000]   86.894011 {3}{RequestManager}: (50118, 105)
[0 - 7efdc8311000]   86.894012 {3}{RequestManager}: (45714, 106)
[0 - 7efdc8311000]   86.894013 {3}{RequestManager}: (10, 107)
[0 - 7efdc8311000]   86.894015 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   86.894016 {3}{RequestManager}: (99, 0)
[0 - 7efdc8311000]   86.894017 {3}{RequestManager}: (100, 1)
[0 - 7efdc8311000]   86.894018 {3}{RequestManager}: (101, 2)
[0 - 7efdc8311000]   86.894019 {3}{RequestManager}: (102, 3)
[0 - 7efdc8311000]   86.894020 {3}{RequestManager}: (103, 4)
[0 - 7efdc8311000]   86.894022 {3}{RequestManager}: (104, 5)
[0 - 7efdc8311000]   86.894023 {3}{RequestManager}: (105, 6)
[0 - 7efdc8311000]   86.894024 {3}{RequestManager}: (106, 7)
[0 - 7efdc8311000]   86.894026 {3}{RequestManager}: Number of Verified Tokens = 8
[0 - 7efdc8311000]   86.894074 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a
[0 - 7efdc8311000]   86.894076 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   86.894077 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   86.894079 {3}{RequestManager}: (689, 86)
[0 - 7efdc8311000]   86.894080 {3}{RequestManager}: (14310, 87)
[0 - 7efdc8311000]   86.894104 {3}{RequestManager}: (5961, 88)
[0 - 7efdc8311000]   86.894106 {3}{RequestManager}: (4, 89)
[0 - 7efdc8311000]   86.894107 {3}{RequestManager}: (50118, 90)
[0 - 7efdc8311000]   86.894108 {3}{RequestManager}: (50118, 91)
[0 - 7efdc8311000]   86.894109 {3}{RequestManager}: (45714, 92)
[0 - 7efdc8311000]   86.894110 {3}{RequestManager}: (10, 93)
[0 - 7efdc8311000]   86.894111 {3}{RequestManager}: (4271, 94)
[0 - 7efdc8311000]   86.894112 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   86.894113 {3}{RequestManager}: (14310, 87)
[0 - 7efdc8311000]   86.894114 {3}{RequestManager}: (5961, 88)
[0 - 7efdc8311000]   86.894115 {3}{RequestManager}: (4, 89)
[0 - 7efdc8311000]   86.894116 {3}{RequestManager}: (50118, 90)
[0 - 7efdc8311000]   86.894117 {3}{RequestManager}: (50118, 91)
[0 - 7efdc8311000]   86.894118 {3}{RequestManager}: (45714, 92)
[0 - 7efdc8311000]   86.894119 {3}{RequestManager}: (10, 93)
[0 - 7efdc8311000]   86.894120 {3}{RequestManager}: (4271, 94)
[0 - 7efdc8311000]   86.894121 {3}{RequestManager}: (1152, 95)
[0 - 7efdc8311000]   86.894122 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   86.894123 {3}{RequestManager}: (86, 9)
[0 - 7efdc8311000]   86.894125 {3}{RequestManager}: (87, 10)
[0 - 7efdc8311000]   86.894126 {3}{RequestManager}: (88, 11)
[0 - 7efdc8311000]   86.894127 {3}{RequestManager}: (89, 12)
[0 - 7efdc8311000]   86.894144 {3}{RequestManager}: (90, 13)
[0 - 7efdc8311000]   86.894145 {3}{RequestManager}: (91, 14)
[0 - 7efdc8311000]   86.894146 {3}{RequestManager}: (92, 15)
[0 - 7efdc8311000]   86.894147 {3}{RequestManager}: (93, 16)
[0 - 7efdc8311000]   86.894148 {3}{RequestManager}: (94, 17)
[0 - 7efdc8311000]   86.894151 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   86.894152 {3}{RequestManager}: (14310, 87)
[0 - 7efdc8311000]   86.894153 {3}{RequestManager}: (5961, 88)
[0 - 7efdc8311000]   86.894154 {3}{RequestManager}: (4, 89)
[0 - 7efdc8311000]   86.894155 {3}{RequestManager}: (50118, 90)
[0 - 7efdc8311000]   86.894156 {3}{RequestManager}: (50118, 91)
[0 - 7efdc8311000]   86.894157 {3}{RequestManager}: (45714, 92)
[0 - 7efdc8311000]   86.894159 {3}{RequestManager}: (10, 93)
[0 - 7efdc8311000]   86.894160 {3}{RequestManager}: (4271, 94)
[0 - 7efdc8311000]   86.894161 {3}{RequestManager}: (1152, 95)
[0 - 7efdc8311000]   86.894162 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   86.894163 {3}{RequestManager}: (86, 9)
[0 - 7efdc8311000]   86.894164 {3}{RequestManager}: (87, 10)
[0 - 7efdc8311000]   86.894165 {3}{RequestManager}: (88, 11)
[0 - 7efdc8311000]   86.894167 {3}{RequestManager}: (89, 12)
[0 - 7efdc8311000]   86.894168 {3}{RequestManager}: (90, 13)
[0 - 7efdc8311000]   86.894169 {3}{RequestManager}: (91, 14)
[0 - 7efdc8311000]   86.894170 {3}{RequestManager}: (92, 15)
[0 - 7efdc8311000]   86.894171 {3}{RequestManager}: (93, 16)
[0 - 7efdc8311000]   86.894172 {3}{RequestManager}: (94, 17)
[0 - 7efdc8311000]   86.894173 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   86.894202 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   89.255567 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   89.255575 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   89.255576 {3}{RequestManager}: (10, 107)
[0 - 7efdc8311000]   89.255578 {3}{RequestManager}: (50118, 108)
[0 - 7efdc8311000]   89.255579 {3}{RequestManager}: (50118, 109)
[0 - 7efdc8311000]   89.255581 {3}{RequestManager}: (45714, 110)
[0 - 7efdc8311000]   89.255582 {3}{RequestManager}: (10, 111)
[0 - 7efdc8311000]   89.255583 {3}{RequestManager}: (50118, 112)
[0 - 7efdc8311000]   89.255585 {3}{RequestManager}: (50118, 113)
[0 - 7efdc8311000]   89.255586 {3}{RequestManager}: (45714, 114)
[0 - 7efdc8311000]   89.255587 {3}{RequestManager}: (45714, 115)
[0 - 7efdc8311000]   89.255588 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   89.255590 {3}{RequestManager}: (4271, 108)
[0 - 7efdc8311000]   89.255591 {3}{RequestManager}: (17701, 109)
[0 - 7efdc8311000]   89.255592 {3}{RequestManager}: (45714, 110)
[0 - 7efdc8311000]   89.255593 {3}{RequestManager}: (10, 111)
[0 - 7efdc8311000]   89.255595 {3}{RequestManager}: (4271, 112)
[0 - 7efdc8311000]   89.255596 {3}{RequestManager}: (50118, 113)
[0 - 7efdc8311000]   89.255597 {3}{RequestManager}: (45714, 114)
[0 - 7efdc8311000]   89.255598 {3}{RequestManager}: (10, 115)
[0 - 7efdc8311000]   89.255599 {3}{RequestManager}: (10, 116)
[0 - 7efdc8311000]   89.255601 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   89.255602 {3}{RequestManager}: (107, 0)
[0 - 7efdc8311000]   89.255603 {3}{RequestManager}: (108, 1)
[0 - 7efdc8311000]   89.255604 {3}{RequestManager}: (109, 2)
[0 - 7efdc8311000]   89.255606 {3}{RequestManager}: (110, 3)
[0 - 7efdc8311000]   89.255607 {3}{RequestManager}: (111, 4)
[0 - 7efdc8311000]   89.255608 {3}{RequestManager}: (112, 5)
[0 - 7efdc8311000]   89.255609 {3}{RequestManager}: (113, 6)
[0 - 7efdc8311000]   89.255610 {3}{RequestManager}: (114, 7)
[0 - 7efdc8311000]   89.255612 {3}{RequestManager}: (115, 8)
[0 - 7efdc8311000]   89.255614 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   89.255615 {3}{RequestManager}: (4271, 108)
[0 - 7efdc8311000]   89.255616 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   89.255618 {3}{RequestManager}: (107, 0)
[0 - 7efdc8311000]   89.255619 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]   89.255673 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed
[0 - 7efdc8311000]   89.255675 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   89.255677 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   89.255678 {3}{RequestManager}: (1152, 95)
[0 - 7efdc8311000]   89.255679 {3}{RequestManager}: (8194, 96)
[0 - 7efdc8311000]   89.255681 {3}{RequestManager}: (13, 97)
[0 - 7efdc8311000]   89.255682 {3}{RequestManager}: (10, 98)
[0 - 7efdc8311000]   89.255683 {3}{RequestManager}: (689, 99)
[0 - 7efdc8311000]   89.255685 {3}{RequestManager}: (14310, 100)
[0 - 7efdc8311000]   89.255686 {3}{RequestManager}: (5961, 101)
[0 - 7efdc8311000]   89.255687 {3}{RequestManager}: (4, 102)
[0 - 7efdc8311000]   89.255688 {3}{RequestManager}: (50118, 103)
[0 - 7efdc8311000]   89.255689 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   89.255691 {3}{RequestManager}: (8194, 96)
[0 - 7efdc8311000]   89.255692 {3}{RequestManager}: (13, 97)
[0 - 7efdc8311000]   89.255693 {3}{RequestManager}: (10, 98)
[0 - 7efdc8311000]   89.255694 {3}{RequestManager}: (689, 99)
[0 - 7efdc8311000]   89.255695 {3}{RequestManager}: (14310, 100)
[0 - 7efdc8311000]   89.255721 {3}{RequestManager}: (5961, 101)
[0 - 7efdc8311000]   89.255723 {3}{RequestManager}: (4, 102)
[0 - 7efdc8311000]   89.255724 {3}{RequestManager}: (50118, 103)
[0 - 7efdc8311000]   89.255725 {3}{RequestManager}: (50118, 104)
[0 - 7efdc8311000]   89.255727 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   89.255728 {3}{RequestManager}: (95, 9)
[0 - 7efdc8311000]   89.255729 {3}{RequestManager}: (96, 10)
[0 - 7efdc8311000]   89.255730 {3}{RequestManager}: (97, 11)
[0 - 7efdc8311000]   89.255732 {3}{RequestManager}: (98, 12)
[0 - 7efdc8311000]   89.255733 {3}{RequestManager}: (99, 13)
[0 - 7efdc8311000]   89.255734 {3}{RequestManager}: (100, 14)
[0 - 7efdc8311000]   89.255735 {3}{RequestManager}: (101, 15)
[0 - 7efdc8311000]   89.255736 {3}{RequestManager}: (102, 16)
[0 - 7efdc8311000]   89.255738 {3}{RequestManager}: (103, 17)
[0 - 7efdc8311000]   89.255740 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   89.255741 {3}{RequestManager}: (8194, 96)
[0 - 7efdc8311000]   89.255743 {3}{RequestManager}: (13, 97)
[0 - 7efdc8311000]   89.255744 {3}{RequestManager}: (10, 98)
[0 - 7efdc8311000]   89.255745 {3}{RequestManager}: (689, 99)
[0 - 7efdc8311000]   89.255746 {3}{RequestManager}: (14310, 100)
[0 - 7efdc8311000]   89.255747 {3}{RequestManager}: (5961, 101)
[0 - 7efdc8311000]   89.255749 {3}{RequestManager}: (4, 102)
[0 - 7efdc8311000]   89.255750 {3}{RequestManager}: (50118, 103)
[0 - 7efdc8311000]   89.255751 {3}{RequestManager}: (50118, 104)
[0 - 7efdc8311000]   89.255752 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   89.255754 {3}{RequestManager}: (95, 9)
[0 - 7efdc8311000]   89.255755 {3}{RequestManager}: (96, 10)
[0 - 7efdc8311000]   89.255756 {3}{RequestManager}: (97, 11)
[0 - 7efdc8311000]   89.255757 {3}{RequestManager}: (98, 12)
[0 - 7efdc8311000]   89.255758 {3}{RequestManager}: (99, 13)
[0 - 7efdc8311000]   89.255760 {3}{RequestManager}: (100, 14)
[0 - 7efdc8311000]   89.255761 {3}{RequestManager}: (101, 15)
[0 - 7efdc8311000]   89.255762 {3}{RequestManager}: (102, 16)
[0 - 7efdc8311000]   89.255763 {3}{RequestManager}: (103, 17)
[0 - 7efdc8311000]   89.255765 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   89.255797 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.


update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   91.614608 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   91.614616 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   91.614618 {3}{RequestManager}: (4271, 108)
[0 - 7efdc8311000]   91.614619 {3}{RequestManager}: (10, 109)
[0 - 7efdc8311000]   91.614621 {3}{RequestManager}: (1152, 110)
[0 - 7efdc8311000]   91.614622 {3}{RequestManager}: (8194, 111)
[0 - 7efdc8311000]   91.614624 {3}{RequestManager}: (13, 112)
[0 - 7efdc8311000]   91.614625 {3}{RequestManager}: (10, 113)
[0 - 7efdc8311000]   91.614626 {3}{RequestManager}: (689, 114)
[0 - 7efdc8311000]   91.614627 {3}{RequestManager}: (14310, 115)
[0 - 7efdc8311000]   91.614629 {3}{RequestManager}: (5961, 116)
[0 - 7efdc8311000]   91.614630 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   91.614631 {3}{RequestManager}: (1152, 109)
[0 - 7efdc8311000]   91.614632 {3}{RequestManager}: (1152, 110)
[0 - 7efdc8311000]   91.614633 {3}{RequestManager}: (8194, 111)
[0 - 7efdc8311000]   91.614634 {3}{RequestManager}: (13, 112)
[0 - 7efdc8311000]   91.614636 {3}{RequestManager}: (10, 113)
[0 - 7efdc8311000]   91.614637 {3}{RequestManager}: (689, 114)
[0 - 7efdc8311000]   91.614638 {3}{RequestManager}: (14310, 115)
[0 - 7efdc8311000]   91.614639 {3}{RequestManager}: (5961, 116)
[0 - 7efdc8311000]   91.614640 {3}{RequestManager}: (3944, 117)
[0 - 7efdc8311000]   91.614641 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   91.614643 {3}{RequestManager}: (108, 0)
[0 - 7efdc8311000]   91.614644 {3}{RequestManager}: (109, 1)
[0 - 7efdc8311000]   91.614645 {3}{RequestManager}: (110, 2)
[0 - 7efdc8311000]   91.614646 {3}{RequestManager}: (111, 3)
[0 - 7efdc8311000]   91.614647 {3}{RequestManager}: (112, 4)
[0 - 7efdc8311000]   91.614648 {3}{RequestManager}: (113, 5)
[0 - 7efdc8311000]   91.614650 {3}{RequestManager}: (114, 6)
[0 - 7efdc8311000]   91.614651 {3}{RequestManager}: (115, 7)
[0 - 7efdc8311000]   91.614652 {3}{RequestManager}: (116, 8)
[0 - 7efdc8311000]   91.614655 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   91.614656 {3}{RequestManager}: (1152, 109)
[0 - 7efdc8311000]   91.614657 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   91.614659 {3}{RequestManager}: (108, 0)
[0 - 7efdc8311000]   91.614660 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]   91.614716 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product
[0 - 7efdc8311000]   91.614718 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   91.614720 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   91.614721 {3}{RequestManager}: (50118, 104)
[0 - 7efdc8311000]   91.614722 {3}{RequestManager}: (45714, 105)
[0 - 7efdc8311000]   91.614724 {3}{RequestManager}: (10, 106)
[0 - 7efdc8311000]   91.614725 {3}{RequestManager}: (4271, 107)
[0 - 7efdc8311000]   91.614726 {3}{RequestManager}: (1152, 108)
[0 - 7efdc8311000]   91.614727 {3}{RequestManager}: (8194, 109)
[0 - 7efdc8311000]   91.614729 {3}{RequestManager}: (13, 110)
[0 - 7efdc8311000]   91.614730 {3}{RequestManager}: (10, 111)
[0 - 7efdc8311000]   91.614731 {3}{RequestManager}: (689, 112)
[0 - 7efdc8311000]   91.614732 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   91.614733 {3}{RequestManager}: (45714, 105)
[0 - 7efdc8311000]   91.614734 {3}{RequestManager}: (10, 106)
[0 - 7efdc8311000]   91.614736 {3}{RequestManager}: (4271, 107)
[0 - 7efdc8311000]   91.614737 {3}{RequestManager}: (1152, 108)
[0 - 7efdc8311000]   91.614738 {3}{RequestManager}: (8194, 109)
[0 - 7efdc8311000]   91.614767 {3}{RequestManager}: (13, 110)
[0 - 7efdc8311000]   91.614768 {3}{RequestManager}: (10, 111)
[0 - 7efdc8311000]   91.614769 {3}{RequestManager}: (689, 112)
[0 - 7efdc8311000]   91.614771 {3}{RequestManager}: (14310, 113)
[0 - 7efdc8311000]   91.614772 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   91.614773 {3}{RequestManager}: (104, 9)
[0 - 7efdc8311000]   91.614774 {3}{RequestManager}: (105, 10)
[0 - 7efdc8311000]   91.614775 {3}{RequestManager}: (106, 11)
[0 - 7efdc8311000]   91.614776 {3}{RequestManager}: (107, 12)
[0 - 7efdc8311000]   91.614778 {3}{RequestManager}: (108, 13)
[0 - 7efdc8311000]   91.614779 {3}{RequestManager}: (109, 14)
[0 - 7efdc8311000]   91.614780 {3}{RequestManager}: (110, 15)
[0 - 7efdc8311000]   91.614781 {3}{RequestManager}: (111, 16)
[0 - 7efdc8311000]   91.614782 {3}{RequestManager}: (112, 17)
[0 - 7efdc8311000]   91.614785 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   91.614786 {3}{RequestManager}: (45714, 105)
[0 - 7efdc8311000]   91.614787 {3}{RequestManager}: (10, 106)
[0 - 7efdc8311000]   91.614788 {3}{RequestManager}: (4271, 107)
[0 - 7efdc8311000]   91.614789 {3}{RequestManager}: (1152, 108)
[0 - 7efdc8311000]   91.614790 {3}{RequestManager}: (8194, 109)
[0 - 7efdc8311000]   91.614791 {3}{RequestManager}: (13, 110)
[0 - 7efdc8311000]   91.614793 {3}{RequestManager}: (10, 111)
[0 - 7efdc8311000]   91.614794 {3}{RequestManager}: (689, 112)
[0 - 7efdc8311000]   91.614795 {3}{RequestManager}: (14310, 113)
[0 - 7efdc8311000]   91.614796 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   91.614797 {3}{RequestManager}: (104, 9)
[0 - 7efdc8311000]   91.614798 {3}{RequestManager}: (105, 10)
[0 - 7efdc8311000]   91.614800 {3}{RequestManager}: (106, 11)
[0 - 7efdc8311000]   91.614801 {3}{RequestManager}: (107, 12)
[0 - 7efdc8311000]   91.614802 {3}{RequestManager}: (108, 13)
[0 - 7efdc8311000]   91.614803 {3}{RequestManager}: (109, 14)
[0 - 7efdc8311000]   91.614804 {3}{RequestManager}: (110, 15)
[0 - 7efdc8311000]   91.614805 {3}{RequestManager}: (111, 16)
[0 - 7efdc8311000]   91.614806 {3}{RequestManager}: (112, 17)
[0 - 7efdc8311000]   91.614808 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   91.614846 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food cho
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   93.972796 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   93.972803 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   93.972805 {3}{RequestManager}: (1152, 109)
[0 - 7efdc8311000]   93.972806 {3}{RequestManager}: (8194, 110)
[0 - 7efdc8311000]   93.972807 {3}{RequestManager}: (13, 111)
[0 - 7efdc8311000]   93.972808 {3}{RequestManager}: (10, 112)
[0 - 7efdc8311000]   93.972809 {3}{RequestManager}: (689, 113)
[0 - 7efdc8311000]   93.972811 {3}{RequestManager}: (14310, 114)
[0 - 7efdc8311000]   93.972812 {3}{RequestManager}: (5961, 115)
[0 - 7efdc8311000]   93.972813 {3}{RequestManager}: (3944, 116)
[0 - 7efdc8311000]   93.972814 {3}{RequestManager}: (14, 117)
[0 - 7efdc8311000]   93.972815 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   93.972816 {3}{RequestManager}: (8194, 110)
[0 - 7efdc8311000]   93.972817 {3}{RequestManager}: (13, 111)
[0 - 7efdc8311000]   93.972818 {3}{RequestManager}: (10, 112)
[0 - 7efdc8311000]   93.972819 {3}{RequestManager}: (689, 113)
[0 - 7efdc8311000]   93.972821 {3}{RequestManager}: (14310, 114)
[0 - 7efdc8311000]   93.972822 {3}{RequestManager}: (5961, 115)
[0 - 7efdc8311000]   93.972823 {3}{RequestManager}: (3944, 116)
[0 - 7efdc8311000]   93.972824 {3}{RequestManager}: (14, 117)
[0 - 7efdc8311000]   93.972825 {3}{RequestManager}: (8382, 118)
[0 - 7efdc8311000]   93.972826 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   93.972827 {3}{RequestManager}: (109, 0)
[0 - 7efdc8311000]   93.972828 {3}{RequestManager}: (110, 1)
[0 - 7efdc8311000]   93.972829 {3}{RequestManager}: (111, 2)
[0 - 7efdc8311000]   93.972830 {3}{RequestManager}: (112, 3)
[0 - 7efdc8311000]   93.972831 {3}{RequestManager}: (113, 4)
[0 - 7efdc8311000]   93.972832 {3}{RequestManager}: (114, 5)
[0 - 7efdc8311000]   93.972834 {3}{RequestManager}: (115, 6)
[0 - 7efdc8311000]   93.972835 {3}{RequestManager}: (116, 7)
[0 - 7efdc8311000]   93.972836 {3}{RequestManager}: (117, 8)
[0 - 7efdc8311000]   93.972839 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   93.972840 {3}{RequestManager}: (8194, 110)
[0 - 7efdc8311000]   93.972841 {3}{RequestManager}: (13, 111)
[0 - 7efdc8311000]   93.972842 {3}{RequestManager}: (10, 112)
[0 - 7efdc8311000]   93.972843 {3}{RequestManager}: (689, 113)
[0 - 7efdc8311000]   93.972844 {3}{RequestManager}: (14310, 114)
[0 - 7efdc8311000]   93.972845 {3}{RequestManager}: (5961, 115)
[0 - 7efdc8311000]   93.972846 {3}{RequestManager}: (3944, 116)
[0 - 7efdc8311000]   93.972847 {3}{RequestManager}: (14, 117)
[0 - 7efdc8311000]   93.972849 {3}{RequestManager}: (8382, 118)
[0 - 7efdc8311000]   93.972850 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   93.972851 {3}{RequestManager}: (109, 0)
[0 - 7efdc8311000]   93.972852 {3}{RequestManager}: (110, 1)
[0 - 7efdc8311000]   93.972853 {3}{RequestManager}: (111, 2)
[0 - 7efdc8311000]   93.972854 {3}{RequestManager}: (112, 3)
[0 - 7efdc8311000]   93.972855 {3}{RequestManager}: (113, 4)
[0 - 7efdc8311000]   93.972857 {3}{RequestManager}: (114, 5)
[0 - 7efdc8311000]   93.972858 {3}{RequestManager}: (115, 6)
[0 - 7efdc8311000]   93.972859 {3}{RequestManager}: (116, 7)
[0 - 7efdc8311000]   93.972860 {3}{RequestManager}: (117, 8)
[0 - 7efdc8311000]   93.972862 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   93.972915 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets
[0 - 7efdc8311000]   93.972917 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   93.972939 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   93.972940 {3}{RequestManager}: (14310, 113)
[0 - 7efdc8311000]   93.972941 {3}{RequestManager}: (5961, 114)
[0 - 7efdc8311000]   93.972943 {3}{RequestManager}: (4, 115)
[0 - 7efdc8311000]   93.972944 {3}{RequestManager}: (50118, 116)
[0 - 7efdc8311000]   93.972945 {3}{RequestManager}: (50118, 117)
[0 - 7efdc8311000]   93.972946 {3}{RequestManager}: (45714, 118)
[0 - 7efdc8311000]   93.972947 {3}{RequestManager}: (10, 119)
[0 - 7efdc8311000]   93.972948 {3}{RequestManager}: (4271, 120)
[0 - 7efdc8311000]   93.972949 {3}{RequestManager}: (1152, 121)
[0 - 7efdc8311000]   93.972950 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   93.972951 {3}{RequestManager}: (5961, 114)
[0 - 7efdc8311000]   93.972952 {3}{RequestManager}: (4, 115)
[0 - 7efdc8311000]   93.972953 {3}{RequestManager}: (50118, 116)
[0 - 7efdc8311000]   93.972954 {3}{RequestManager}: (50118, 117)
[0 - 7efdc8311000]   93.972955 {3}{RequestManager}: (45714, 118)
[0 - 7efdc8311000]   93.972957 {3}{RequestManager}: (10, 119)
[0 - 7efdc8311000]   93.972958 {3}{RequestManager}: (4271, 120)
[0 - 7efdc8311000]   93.972959 {3}{RequestManager}: (1152, 121)
[0 - 7efdc8311000]   93.972960 {3}{RequestManager}: (8194, 122)
[0 - 7efdc8311000]   93.972961 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   93.972978 {3}{RequestManager}: (113, 9)
[0 - 7efdc8311000]   93.972979 {3}{RequestManager}: (114, 10)
[0 - 7efdc8311000]   93.972981 {3}{RequestManager}: (115, 11)
[0 - 7efdc8311000]   93.972982 {3}{RequestManager}: (116, 12)
[0 - 7efdc8311000]   93.972983 {3}{RequestManager}: (117, 13)
[0 - 7efdc8311000]   93.972984 {3}{RequestManager}: (118, 14)
[0 - 7efdc8311000]   93.972985 {3}{RequestManager}: (119, 15)
[0 - 7efdc8311000]   93.972986 {3}{RequestManager}: (120, 16)
[0 - 7efdc8311000]   93.972987 {3}{RequestManager}: (121, 17)
[0 - 7efdc8311000]   93.972989 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   93.972991 {3}{RequestManager}: (5961, 114)
[0 - 7efdc8311000]   93.972992 {3}{RequestManager}: (4, 115)
[0 - 7efdc8311000]   93.972993 {3}{RequestManager}: (50118, 116)
[0 - 7efdc8311000]   93.972994 {3}{RequestManager}: (50118, 117)
[0 - 7efdc8311000]   93.972995 {3}{RequestManager}: (45714, 118)
[0 - 7efdc8311000]   93.972996 {3}{RequestManager}: (10, 119)
[0 - 7efdc8311000]   93.972997 {3}{RequestManager}: (4271, 120)
[0 - 7efdc8311000]   93.972999 {3}{RequestManager}: (1152, 121)
[0 - 7efdc8311000]   93.973000 {3}{RequestManager}: (8194, 122)
[0 - 7efdc8311000]   93.973001 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   93.973002 {3}{RequestManager}: (113, 9)
[0 - 7efdc8311000]   93.973003 {3}{RequestManager}: (114, 10)
[0 - 7efdc8311000]   93.973004 {3}{RequestManager}: (115, 11)
[0 - 7efdc8311000]   93.973005 {3}{RequestManager}: (116, 12)
[0 - 7efdc8311000]   93.973006 {3}{RequestManager}: (117, 13)
[0 - 7efdc8311000]   93.973007 {3}{RequestManager}: (118, 14)
[0 - 7efdc8311000]   93.973009 {3}{RequestManager}: (119, 15)
[0 - 7efdc8311000]   93.973010 {3}{RequestManager}: (120, 16)
[0 - 7efdc8311000]   93.973011 {3}{RequestManager}: (121, 17)
[0 - 7efdc8311000]   93.973012 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]   93.973049 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
[0 - 7efdc8311000]   94.060925 {3}{RequestManager}: [Done] guid(1000002) with spec_tree_depth(5)
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]   96.332102 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   96.332110 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   96.332112 {3}{RequestManager}: (8382, 118)
[0 - 7efdc8311000]   96.332113 {3}{RequestManager}: (47, 119)
[0 - 7efdc8311000]   96.332114 {3}{RequestManager}: (3116, 120)
[0 - 7efdc8311000]   96.332115 {3}{RequestManager}: (10, 121)
[0 - 7efdc8311000]   96.332117 {3}{RequestManager}: (2410, 122)
[0 - 7efdc8311000]   96.332118 {3}{RequestManager}: (2410, 123)
[0 - 7efdc8311000]   96.332119 {3}{RequestManager}: (2410, 124)
[0 - 7efdc8311000]   96.332120 {3}{RequestManager}: (2410, 125)
[0 - 7efdc8311000]   96.332121 {3}{RequestManager}: (2410, 126)
[0 - 7efdc8311000]   96.332122 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   96.332123 {3}{RequestManager}: (47, 119)
[0 - 7efdc8311000]   96.332124 {3}{RequestManager}: (27804, 120)
[0 - 7efdc8311000]   96.332125 {3}{RequestManager}: (10, 121)
[0 - 7efdc8311000]   96.332127 {3}{RequestManager}: (4271, 122)
[0 - 7efdc8311000]   96.332128 {3}{RequestManager}: (7728, 123)
[0 - 7efdc8311000]   96.332129 {3}{RequestManager}: (10, 124)
[0 - 7efdc8311000]   96.332130 {3}{RequestManager}: (10, 125)
[0 - 7efdc8311000]   96.332131 {3}{RequestManager}: (2410, 126)
[0 - 7efdc8311000]   96.332132 {3}{RequestManager}: (2410, 127)
[0 - 7efdc8311000]   96.332133 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   96.332134 {3}{RequestManager}: (118, 0)
[0 - 7efdc8311000]   96.332135 {3}{RequestManager}: (119, 1)
[0 - 7efdc8311000]   96.332136 {3}{RequestManager}: (120, 2)
[0 - 7efdc8311000]   96.332137 {3}{RequestManager}: (121, 3)
[0 - 7efdc8311000]   96.332138 {3}{RequestManager}: (122, 4)
[0 - 7efdc8311000]   96.332140 {3}{RequestManager}: (123, 5)
[0 - 7efdc8311000]   96.332141 {3}{RequestManager}: (124, 6)
[0 - 7efdc8311000]   96.332142 {3}{RequestManager}: (125, 7)
[0 - 7efdc8311000]   96.332143 {3}{RequestManager}: (126, 8)
[0 - 7efdc8311000]   96.332145 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   96.332146 {3}{RequestManager}: (47, 119)
[0 - 7efdc8311000]   96.332147 {3}{RequestManager}: (27804, 120)
[0 - 7efdc8311000]   96.332148 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   96.332149 {3}{RequestManager}: (118, 0)
[0 - 7efdc8311000]   96.332151 {3}{RequestManager}: (119, 1)
[0 - 7efdc8311000]   96.332152 {3}{RequestManager}: Number of Verified Tokens = 2
[0 - 7efdc8311000]   96.332203 {3}{RequestManager}: Output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop
[0 - 7efdc8311000]   96.332206 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]   96.332207 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   96.332209 {3}{RequestManager}: (8194, 122)
[0 - 7efdc8311000]   96.332210 {3}{RequestManager}: (13, 123)
[0 - 7efdc8311000]   96.332211 {3}{RequestManager}: (10, 124)
[0 - 7efdc8311000]   96.332212 {3}{RequestManager}: (689, 125)
[0 - 7efdc8311000]   96.332214 {3}{RequestManager}: (14310, 126)
[0 - 7efdc8311000]   96.332215 {3}{RequestManager}: (5961, 127)
[0 - 7efdc8311000]   96.332216 {3}{RequestManager}: (4, 128)
[0 - 7efdc8311000]   96.332217 {3}{RequestManager}: (50118, 129)
[0 - 7efdc8311000]   96.332218 {3}{RequestManager}: (1152, 130)
[0 - 7efdc8311000]   96.332219 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   96.332220 {3}{RequestManager}: (13, 123)
[0 - 7efdc8311000]   96.332222 {3}{RequestManager}: (10, 124)
[0 - 7efdc8311000]   96.332247 {3}{RequestManager}: (689, 125)
[0 - 7efdc8311000]   96.332248 {3}{RequestManager}: (14310, 126)
[0 - 7efdc8311000]   96.332249 {3}{RequestManager}: (5961, 127)
[0 - 7efdc8311000]   96.332250 {3}{RequestManager}: (4, 128)
[0 - 7efdc8311000]   96.332251 {3}{RequestManager}: (50118, 129)
[0 - 7efdc8311000]   96.332252 {3}{RequestManager}: (50118, 130)
[0 - 7efdc8311000]   96.332254 {3}{RequestManager}: (8194, 131)
[0 - 7efdc8311000]   96.332255 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   96.332256 {3}{RequestManager}: (122, 9)
[0 - 7efdc8311000]   96.332257 {3}{RequestManager}: (123, 10)
[0 - 7efdc8311000]   96.332258 {3}{RequestManager}: (124, 11)
[0 - 7efdc8311000]   96.332259 {3}{RequestManager}: (125, 12)
[0 - 7efdc8311000]   96.332260 {3}{RequestManager}: (126, 13)
[0 - 7efdc8311000]   96.332261 {3}{RequestManager}: (127, 14)
[0 - 7efdc8311000]   96.332262 {3}{RequestManager}: (128, 15)
[0 - 7efdc8311000]   96.332263 {3}{RequestManager}: (129, 16)
[0 - 7efdc8311000]   96.332265 {3}{RequestManager}: (130, 17)
[0 - 7efdc8311000]   96.332266 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   96.332268 {3}{RequestManager}: (13, 123)
[0 - 7efdc8311000]   96.332269 {3}{RequestManager}: (10, 124)
[0 - 7efdc8311000]   96.332286 {3}{RequestManager}: (689, 125)
[0 - 7efdc8311000]   96.332287 {3}{RequestManager}: (14310, 126)
[0 - 7efdc8311000]   96.332288 {3}{RequestManager}: (5961, 127)
[0 - 7efdc8311000]   96.332290 {3}{RequestManager}: (4, 128)
[0 - 7efdc8311000]   96.332291 {3}{RequestManager}: (50118, 129)
[0 - 7efdc8311000]   96.332292 {3}{RequestManager}: (50118, 130)
[0 - 7efdc8311000]   96.332293 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   96.332294 {3}{RequestManager}: (122, 9)
[0 - 7efdc8311000]   96.332296 {3}{RequestManager}: (123, 10)
[0 - 7efdc8311000]   96.332297 {3}{RequestManager}: (124, 11)
[0 - 7efdc8311000]   96.332298 {3}{RequestManager}: (125, 12)
[0 - 7efdc8311000]   96.332299 {3}{RequestManager}: (126, 13)
[0 - 7efdc8311000]   96.332300 {3}{RequestManager}: (127, 14)
[0 - 7efdc8311000]   96.332301 {3}{RequestManager}: (128, 15)
[0 - 7efdc8311000]   96.332302 {3}{RequestManager}: (129, 16)
[0 - 7efdc8311000]   96.332304 {3}{RequestManager}: Number of Verified Tokens = 8
[0 - 7efdc8311000]   96.332305 {3}{RequestManager}: [Done] guid(1000002) with final length(128)
[0 - 7efdc8311000]   96.332342 {3}{RequestManager}: Final output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper.

Write a detailed product description for a food chopper
[0 - 7efdc8311000]   96.332347 {3}{RequestManager}: [Profile] guid(1000002) decoding_steps(15) start(60953521.0) finish(96332343.0) latency(35378822.0) acc_latency(63951101.0)
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 8
Prompt[1]: Write a short blog post (500 words) about the best dog toys for new dog owners.
[0]45714
[1]10
[2]765
[3]5059
[4]618
[5]36
[6]1497
[7]1617
[8]43
[9]59
[10]5
[11]275
[12]2335
[13]9492
[14]13
[15]92
[16]2335
[17]2203
[18]4
Num of models: 1
[0 - 7efdc8311000]   98.673717 {3}{RequestManager}: New request tokens: 2 45714 10 765 5059 618 36 1497 1617 43 59 5 275 2335 9492 13 92 2335 2203 4
[0]45714
[1]10
[2]765
[3]5059
[4]618
[5]36
[6]1497
[7]1617
[8]43
[9]59
[10]5
[11]275
[12]2335
[13]9492
[14]13
[15]92
[16]2335
[17]2203
[18]4
Num of models: 1
[0 - 7efdc8311000]   98.673790 {3}{RequestManager}: New request tokens: 2 45714 10 765 5059 618 36 1497 1617 43 59 5 275 2335 9492 13 92 2335 2203 4
[0]45714
[1]10
[2]765
[3]5059
[4]618
[5]36
[6]1497
[7]1617
[8]43
[9]59
[10]5
[11]275
[12]2335
[13]9492
[14]13
[15]92
[16]2335
[17]2203
[18]4
Num of models: 1
[0 - 7efdc8311000]   98.673821 {3}{RequestManager}: New request tokens: 2 45714 10 765 5059 618 36 1497 1617 43 59 5 275 2335 9492 13 92 2335 2203 4
[0 - 7efdc8311000]   98.711913 {3}{RequestManager}: Input size (8) Output size (8)
[0 - 7efdc8311000]   98.711920 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]   98.711921 {3}{RequestManager}: (27804, 120)
[0 - 7efdc8311000]   98.711923 {3}{RequestManager}: (12849, 121)
[0 - 7efdc8311000]   98.711935 {3}{RequestManager}: (8, 122)
[0 - 7efdc8311000]   98.711936 {3}{RequestManager}: (8942, 123)
[0 - 7efdc8311000]   98.711937 {3}{RequestManager}: (4, 124)
[0 - 7efdc8311000]   98.711938 {3}{RequestManager}: (50118, 125)
[0 - 7efdc8311000]   98.711940 {3}{RequestManager}: (50118, 126)
[0 - 7efdc8311000]   98.711941 {3}{RequestManager}: (45714, 127)
[0 - 7efdc8311000]   98.711942 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]   98.711943 {3}{RequestManager}: (12849, 121)
[0 - 7efdc8311000]   98.711944 {3}{RequestManager}: (8, 122)
[0 - 7efdc8311000]   98.711945 {3}{RequestManager}: (8942, 123)
[0 - 7efdc8311000]   98.711946 {3}{RequestManager}: (4, 124)
[0 - 7efdc8311000]   98.711947 {3}{RequestManager}: (50118, 125)
[0 - 7efdc8311000]   98.711948 {3}{RequestManager}: (50118, 126)
[0 - 7efdc8311000]   98.711949 {3}{RequestManager}: (45714, 127)
[0 - 7efdc8311000]   98.711951 {3}{RequestManager}: (10, 128)
[0 - 7efdc8311000]   98.711952 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]   98.711953 {3}{RequestManager}: (120, 0)
[0 - 7efdc8311000]   98.711954 {3}{RequestManager}: (121, 1)
[0 - 7efdc8311000]   98.711955 {3}{RequestManager}: (122, 2)
[0 - 7efdc8311000]   98.711956 {3}{RequestManager}: (123, 3)
[0 - 7efdc8311000]   98.711957 {3}{RequestManager}: (124, 4)
[0 - 7efdc8311000]   98.711958 {3}{RequestManager}: (125, 5)
[0 - 7efdc8311000]   98.711959 {3}{RequestManager}: (126, 6)
[0 - 7efdc8311000]   98.711960 {3}{RequestManager}: (127, 7)
[0 - 7efdc8311000]   98.711963 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]   98.711964 {3}{RequestManager}: (12849, 121)
[0 - 7efdc8311000]   98.711965 {3}{RequestManager}: (8, 122)
[0 - 7efdc8311000]   98.711966 {3}{RequestManager}: (8942, 123)
[0 - 7efdc8311000]   98.711967 {3}{RequestManager}: (4, 124)
[0 - 7efdc8311000]   98.711969 {3}{RequestManager}: (50118, 125)
[0 - 7efdc8311000]   98.711970 {3}{RequestManager}: (50118, 126)
[0 - 7efdc8311000]   98.711971 {3}{RequestManager}: (45714, 127)
[0 - 7efdc8311000]   98.711972 {3}{RequestManager}: (10, 128)
[0 - 7efdc8311000]   98.711973 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]   98.711974 {3}{RequestManager}: (120, 0)
[0 - 7efdc8311000]   98.711975 {3}{RequestManager}: (121, 1)
[0 - 7efdc8311000]   98.711976 {3}{RequestManager}: (122, 2)
[0 - 7efdc8311000]   98.711978 {3}{RequestManager}: (123, 3)
[0 - 7efdc8311000]   98.711979 {3}{RequestManager}: (124, 4)
[0 - 7efdc8311000]   98.711980 {3}{RequestManager}: (125, 5)
[0 - 7efdc8311000]   98.711981 {3}{RequestManager}: (126, 6)
[0 - 7efdc8311000]   98.711982 {3}{RequestManager}: (127, 7)
[0 - 7efdc8311000]   98.711984 {3}{RequestManager}: Number of Verified Tokens = 8
[0 - 7efdc8311000]   98.711985 {3}{RequestManager}: [Done] guid(1000000) with final length(128)
[0 - 7efdc8311000]   98.712042 {3}{RequestManager}: Final output: </s>Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write a detailed product description for a food chopper tool that lets you chop fruits and vegetables.

Write
[0 - 7efdc8311000]   98.712047 {3}{RequestManager}: [Profile] guid(1000000) decoding_steps(28) start(32381124.0) finish(98712043.0) latency(66330919.0) acc_latency(130282020.0)
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 20
new_bc.num_tokens: 28
request.beam_trees.size(): 1


new_bc.num_tokens: 48
new_bc.num_tokens: 56
[0 - 7efdc8311000]  101.182242 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  101.182249 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  101.182251 {3}{RequestManager}: (4, 19)
[0 - 7efdc8311000]  101.182253 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]  101.182254 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]  101.182256 {3}{RequestManager}: (100, 22)
[0 - 7efdc8311000]  101.182257 {3}{RequestManager}: (17, 23)
[0 - 7efdc8311000]  101.182259 {3}{RequestManager}: (27, 24)
[0 - 7efdc8311000]  101.182260 {3}{RequestManager}: (119, 25)
[0 - 7efdc8311000]  101.182262 {3}{RequestManager}: (10, 26)
[0 - 7efdc8311000]  101.182263 {3}{RequestManager}: (92, 27)
[0 - 7efdc8311000]  101.182264 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  101.182266 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]  101.182267 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]  101.182269 {3}{RequestManager}: (133, 22)
[0 - 7efdc8311000]  101.182270 {3}{RequestManager}: (17, 23)
[0 - 7efdc8311000]  101.182271 {3}{RequestManager}: (27, 24)
[0 - 7efdc8311000]  101.182273 {3}{RequestManager}: (119, 25)
[0 - 7efdc8311000]  101.182274 {3}{RequestManager}: (10, 26)
[0 - 7efdc8311000]  101.182275 {3}{RequestManager}: (2335, 27)
[0 - 7efdc8311000]  101.182277 {3}{RequestManager}: (2335, 28)
[0 - 7efdc8311000]  101.182278 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  101.182280 {3}{RequestManager}: (19, 19)
[0 - 7efdc8311000]  101.182281 {3}{RequestManager}: (20, 20)
[0 - 7efdc8311000]  101.182282 {3}{RequestManager}: (21, 21)
[0 - 7efdc8311000]  101.182283 {3}{RequestManager}: (22, 22)
[0 - 7efdc8311000]  101.182285 {3}{RequestManager}: (23, 23)
[0 - 7efdc8311000]  101.182286 {3}{RequestManager}: (24, 24)
[0 - 7efdc8311000]  101.182287 {3}{RequestManager}: (25, 25)
[0 - 7efdc8311000]  101.182288 {3}{RequestManager}: (26, 26)
[0 - 7efdc8311000]  101.182289 {3}{RequestManager}: (27, 27)
[0 - 7efdc8311000]  101.182292 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  101.182293 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]  101.182294 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]  101.182295 {3}{RequestManager}: (133, 22)
[0 - 7efdc8311000]  101.182296 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  101.182298 {3}{RequestManager}: (19, 19)
[0 - 7efdc8311000]  101.182299 {3}{RequestManager}: (20, 20)
[0 - 7efdc8311000]  101.182300 {3}{RequestManager}: (21, 21)
[0 - 7efdc8311000]  101.182301 {3}{RequestManager}: Number of Verified Tokens = 3
[0 - 7efdc8311000]  101.182333 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The
[0 - 7efdc8311000]  101.182336 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  101.182337 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  101.182339 {3}{RequestManager}: (4, 19)
[0 - 7efdc8311000]  101.182340 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]  101.182341 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]  101.182342 {3}{RequestManager}: (45714, 22)
[0 - 7efdc8311000]  101.182344 {3}{RequestManager}: (10, 23)
[0 - 7efdc8311000]  101.182345 {3}{RequestManager}: (765, 24)
[0 - 7efdc8311000]  101.182346 {3}{RequestManager}: (5059, 25)
[0 - 7efdc8311000]  101.182347 {3}{RequestManager}: (618, 26)
[0 - 7efdc8311000]  101.182349 {3}{RequestManager}: (36, 27)
[0 - 7efdc8311000]  101.182350 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  101.182351 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]  101.182352 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]  101.182353 {3}{RequestManager}: (133, 22)
[0 - 7efdc8311000]  101.182355 {3}{RequestManager}: (10, 23)
[0 - 7efdc8311000]  101.182356 {3}{RequestManager}: (765, 24)
[0 - 7efdc8311000]  101.182357 {3}{RequestManager}: (5059, 25)
[0 - 7efdc8311000]  101.182358 {3}{RequestManager}: (618, 26)
[0 - 7efdc8311000]  101.182359 {3}{RequestManager}: (36, 27)
[0 - 7efdc8311000]  101.182360 {3}{RequestManager}: (1497, 28)
[0 - 7efdc8311000]  101.182384 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  101.182386 {3}{RequestManager}: (19, 47)
[0 - 7efdc8311000]  101.182387 {3}{RequestManager}: (20, 48)
[0 - 7efdc8311000]  101.182388 {3}{RequestManager}: (21, 49)
[0 - 7efdc8311000]  101.182389 {3}{RequestManager}: (22, 50)
[0 - 7efdc8311000]  101.182390 {3}{RequestManager}: (23, 51)
[0 - 7efdc8311000]  101.182392 {3}{RequestManager}: (24, 52)
[0 - 7efdc8311000]  101.182393 {3}{RequestManager}: (25, 53)
[0 - 7efdc8311000]  101.182394 {3}{RequestManager}: (26, 54)
[0 - 7efdc8311000]  101.182395 {3}{RequestManager}: (27, 55)
[0 - 7efdc8311000]  101.182397 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  101.182398 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]  101.182399 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]  101.182400 {3}{RequestManager}: (133, 22)
[0 - 7efdc8311000]  101.182401 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  101.182402 {3}{RequestManager}: (19, 47)
[0 - 7efdc8311000]  101.182404 {3}{RequestManager}: (20, 48)
[0 - 7efdc8311000]  101.182405 {3}{RequestManager}: (21, 49)
[0 - 7efdc8311000]  101.182406 {3}{RequestManager}: Number of Verified Tokens = 3
[0 - 7efdc8311000]  101.182416 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  103.494593 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  103.494601 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  103.494603 {3}{RequestManager}: (133, 22)
[0 - 7efdc8311000]  103.494605 {3}{RequestManager}: (78, 23)
[0 - 7efdc8311000]  103.494606 {3}{RequestManager}: (631, 24)
[0 - 7efdc8311000]  103.494608 {3}{RequestManager}: (38, 25)
[0 - 7efdc8311000]  103.494609 {3}{RequestManager}: (17, 26)
[0 - 7efdc8311000]  103.494611 {3}{RequestManager}: (27, 27)
[0 - 7efdc8311000]  103.494612 {3}{RequestManager}: (548, 28)
[0 - 7efdc8311000]  103.494613 {3}{RequestManager}: (655, 29)
[0 - 7efdc8311000]  103.494615 {3}{RequestManager}: (655, 30)
[0 - 7efdc8311000]  103.494616 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  103.494617 {3}{RequestManager}: (275, 23)
[0 - 7efdc8311000]  103.494618 {3}{RequestManager}: (631, 24)
[0 - 7efdc8311000]  103.494620 {3}{RequestManager}: (47, 25)
[0 - 7efdc8311000]  103.494621 {3}{RequestManager}: (222, 26)
[0 - 7efdc8311000]  103.494622 {3}{RequestManager}: (27, 27)
[0 - 7efdc8311000]  103.494623 {3}{RequestManager}: (417, 28)
[0 - 7efdc8311000]  103.494625 {3}{RequestManager}: (2435, 29)
[0 - 7efdc8311000]  103.494626 {3}{RequestManager}: (2164, 30)
[0 - 7efdc8311000]  103.494627 {3}{RequestManager}: (655, 31)
[0 - 7efdc8311000]  103.494628 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  103.494629 {3}{RequestManager}: (22, 0)
[0 - 7efdc8311000]  103.494631 {3}{RequestManager}: (23, 1)
[0 - 7efdc8311000]  103.494632 {3}{RequestManager}: (24, 2)
[0 - 7efdc8311000]  103.494633 {3}{RequestManager}: (25, 3)
[0 - 7efdc8311000]  103.494634 {3}{RequestManager}: (26, 4)
[0 - 7efdc8311000]  103.494636 {3}{RequestManager}: (27, 5)
[0 - 7efdc8311000]  103.494637 {3}{RequestManager}: (28, 6)
[0 - 7efdc8311000]  103.494638 {3}{RequestManager}: (29, 7)
[0 - 7efdc8311000]  103.494639 {3}{RequestManager}: (30, 8)
[0 - 7efdc8311000]  103.494641 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  103.494643 {3}{RequestManager}: (275, 23)
[0 - 7efdc8311000]  103.494644 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  103.494645 {3}{RequestManager}: (22, 0)
[0 - 7efdc8311000]  103.494647 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]  103.494677 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best
[0 - 7efdc8311000]  103.494679 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  103.494680 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  103.494682 {3}{RequestManager}: (133, 22)
[0 - 7efdc8311000]  103.494683 {3}{RequestManager}: (275, 23)
[0 - 7efdc8311000]  103.494684 {3}{RequestManager}: (2335, 24)
[0 - 7efdc8311000]  103.494686 {3}{RequestManager}: (9492, 25)
[0 - 7efdc8311000]  103.494687 {3}{RequestManager}: (13, 26)
[0 - 7efdc8311000]  103.494688 {3}{RequestManager}: (92, 27)
[0 - 7efdc8311000]  103.494690 {3}{RequestManager}: (2335, 28)
[0 - 7efdc8311000]  103.494691 {3}{RequestManager}: (2203, 29)
[0 - 7efdc8311000]  103.494692 {3}{RequestManager}: (50118, 30)
[0 - 7efdc8311000]  103.494693 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  103.494695 {3}{RequestManager}: (275, 23)
[0 - 7efdc8311000]  103.494696 {3}{RequestManager}: (2335, 24)
[0 - 7efdc8311000]  103.494697 {3}{RequestManager}: (9492, 25)
[0 - 7efdc8311000]  103.494699 {3}{RequestManager}: (13, 26)
[0 - 7efdc8311000]  103.494700 {3}{RequestManager}: (92, 27)
[0 - 7efdc8311000]  103.494701 {3}{RequestManager}: (2335, 28)
[0 - 7efdc8311000]  103.494702 {3}{RequestManager}: (2203, 29)
[0 - 7efdc8311000]  103.494704 {3}{RequestManager}: (32, 30)
[0 - 7efdc8311000]  103.494705 {3}{RequestManager}: (50118, 31)
[0 - 7efdc8311000]  103.494706 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  103.494707 {3}{RequestManager}: (22, 9)
[0 - 7efdc8311000]  103.494709 {3}{RequestManager}: (23, 10)
[0 - 7efdc8311000]  103.494710 {3}{RequestManager}: (24, 11)
[0 - 7efdc8311000]  103.494735 {3}{RequestManager}: (25, 12)
[0 - 7efdc8311000]  103.494737 {3}{RequestManager}: (26, 13)
[0 - 7efdc8311000]  103.494738 {3}{RequestManager}: (27, 14)
[0 - 7efdc8311000]  103.494739 {3}{RequestManager}: (28, 15)
[0 - 7efdc8311000]  103.494740 {3}{RequestManager}: (29, 16)
[0 - 7efdc8311000]  103.494742 {3}{RequestManager}: (30, 17)
[0 - 7efdc8311000]  103.494744 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  103.494745 {3}{RequestManager}: (275, 23)
[0 - 7efdc8311000]  103.494746 {3}{RequestManager}: (2335, 24)
[0 - 7efdc8311000]  103.494748 {3}{RequestManager}: (9492, 25)
[0 - 7efdc8311000]  103.494749 {3}{RequestManager}: (13, 26)
[0 - 7efdc8311000]  103.494750 {3}{RequestManager}: (92, 27)
[0 - 7efdc8311000]  103.494751 {3}{RequestManager}: (2335, 28)
[0 - 7efdc8311000]  103.494753 {3}{RequestManager}: (2203, 29)
[0 - 7efdc8311000]  103.494754 {3}{RequestManager}: (32, 30)
[0 - 7efdc8311000]  103.494755 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  103.494756 {3}{RequestManager}: (22, 9)
[0 - 7efdc8311000]  103.494758 {3}{RequestManager}: (23, 10)
[0 - 7efdc8311000]  103.494759 {3}{RequestManager}: (24, 11)
[0 - 7efdc8311000]  103.494760 {3}{RequestManager}: (25, 12)
[0 - 7efdc8311000]  103.494761 {3}{RequestManager}: (26, 13)
[0 - 7efdc8311000]  103.494763 {3}{RequestManager}: (27, 14)
[0 - 7efdc8311000]  103.494764 {3}{RequestManager}: (28, 15)
[0 - 7efdc8311000]  103.494765 {3}{RequestManager}: (29, 16)
[0 - 7efdc8311000]  103.494766 {3}{RequestManager}: Number of Verified Tokens = 8
[0 - 7efdc8311000]  103.494779 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  105.808490 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  105.808496 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  105.808498 {3}{RequestManager}: (275, 23)
[0 - 7efdc8311000]  105.808500 {3}{RequestManager}: (2335, 24)
[0 - 7efdc8311000]  105.808501 {3}{RequestManager}: (2335, 25)
[0 - 7efdc8311000]  105.808503 {3}{RequestManager}: (2335, 26)
[0 - 7efdc8311000]  105.808504 {3}{RequestManager}: (2335, 27)
[0 - 7efdc8311000]  105.808506 {3}{RequestManager}: (2335, 28)
[0 - 7efdc8311000]  105.808507 {3}{RequestManager}: (2335, 29)
[0 - 7efdc8311000]  105.808508 {3}{RequestManager}: (2335, 30)
[0 - 7efdc8311000]  105.808510 {3}{RequestManager}: (2335, 31)
[0 - 7efdc8311000]  105.808511 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  105.808512 {3}{RequestManager}: (2335, 24)
[0 - 7efdc8311000]  105.808513 {3}{RequestManager}: (9492, 25)
[0 - 7efdc8311000]  105.808514 {3}{RequestManager}: (9492, 26)
[0 - 7efdc8311000]  105.808515 {3}{RequestManager}: (9492, 27)
[0 - 7efdc8311000]  105.808516 {3}{RequestManager}: (2335, 28)
[0 - 7efdc8311000]  105.808518 {3}{RequestManager}: (2335, 29)
[0 - 7efdc8311000]  105.808519 {3}{RequestManager}: (2335, 30)
[0 - 7efdc8311000]  105.808520 {3}{RequestManager}: (2335, 31)
[0 - 7efdc8311000]  105.808521 {3}{RequestManager}: (2335, 32)
[0 - 7efdc8311000]  105.808522 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  105.808523 {3}{RequestManager}: (23, 0)
[0 - 7efdc8311000]  105.808525 {3}{RequestManager}: (24, 1)
[0 - 7efdc8311000]  105.808526 {3}{RequestManager}: (25, 2)
[0 - 7efdc8311000]  105.808527 {3}{RequestManager}: (26, 3)
[0 - 7efdc8311000]  105.808528 {3}{RequestManager}: (27, 4)
[0 - 7efdc8311000]  105.808529 {3}{RequestManager}: (28, 5)
[0 - 7efdc8311000]  105.808530 {3}{RequestManager}: (29, 6)
[0 - 7efdc8311000]  105.808532 {3}{RequestManager}: (30, 7)
[0 - 7efdc8311000]  105.808533 {3}{RequestManager}: (31, 8)
[0 - 7efdc8311000]  105.808535 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  105.808536 {3}{RequestManager}: (2335, 24)
[0 - 7efdc8311000]  105.808538 {3}{RequestManager}: (9492, 25)
[0 - 7efdc8311000]  105.808539 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  105.808540 {3}{RequestManager}: (23, 0)
[0 - 7efdc8311000]  105.808541 {3}{RequestManager}: (24, 1)
[0 - 7efdc8311000]  105.808543 {3}{RequestManager}: Number of Verified Tokens = 2
[0 - 7efdc8311000]  105.808574 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys
[0 - 7efdc8311000]  105.808576 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  105.808577 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  105.808579 {3}{RequestManager}: (32, 30)
[0 - 7efdc8311000]  105.808580 {3}{RequestManager}: (5, 31)
[0 - 7efdc8311000]  105.808582 {3}{RequestManager}: (275, 32)
[0 - 7efdc8311000]  105.808583 {3}{RequestManager}: (2335, 33)
[0 - 7efdc8311000]  105.808584 {3}{RequestManager}: (9492, 34)
[0 - 7efdc8311000]  105.808585 {3}{RequestManager}: (13, 35)
[0 - 7efdc8311000]  105.808587 {3}{RequestManager}: (92, 36)
[0 - 7efdc8311000]  105.808588 {3}{RequestManager}: (2335, 37)
[0 - 7efdc8311000]  105.808589 {3}{RequestManager}: (2203, 38)
[0 - 7efdc8311000]  105.808590 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  105.808592 {3}{RequestManager}: (5, 31)
[0 - 7efdc8311000]  105.808593 {3}{RequestManager}: (1980, 32)
[0 - 7efdc8311000]  105.808594 {3}{RequestManager}: (2335, 33)
[0 - 7efdc8311000]  105.808595 {3}{RequestManager}: (9492, 34)
[0 - 7efdc8311000]  105.808596 {3}{RequestManager}: (13, 35)
[0 - 7efdc8311000]  105.808598 {3}{RequestManager}: (92, 36)
[0 - 7efdc8311000]  105.808599 {3}{RequestManager}: (2335, 37)
[0 - 7efdc8311000]  105.808600 {3}{RequestManager}: (2203, 38)
[0 - 7efdc8311000]  105.808601 {3}{RequestManager}: (142, 39)
[0 - 7efdc8311000]  105.808602 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  105.808603 {3}{RequestManager}: (30, 9)
[0 - 7efdc8311000]  105.808628 {3}{RequestManager}: (31, 10)
[0 - 7efdc8311000]  105.808629 {3}{RequestManager}: (32, 11)
[0 - 7efdc8311000]  105.808631 {3}{RequestManager}: (33, 12)
[0 - 7efdc8311000]  105.808632 {3}{RequestManager}: (34, 13)
[0 - 7efdc8311000]  105.808633 {3}{RequestManager}: (35, 14)
[0 - 7efdc8311000]  105.808634 {3}{RequestManager}: (36, 15)
[0 - 7efdc8311000]  105.808635 {3}{RequestManager}: (37, 16)
[0 - 7efdc8311000]  105.808636 {3}{RequestManager}: (38, 17)
[0 - 7efdc8311000]  105.808638 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  105.808640 {3}{RequestManager}: (5, 31)
[0 - 7efdc8311000]  105.808641 {3}{RequestManager}: (1980, 32)
[0 - 7efdc8311000]  105.808642 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  105.808643 {3}{RequestManager}: (30, 9)
[0 - 7efdc8311000]  105.808644 {3}{RequestManager}: (31, 10)
[0 - 7efdc8311000]  105.808645 {3}{RequestManager}: Number of Verified Tokens = 2
[0 - 7efdc8311000]  105.809025 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  108.136201 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  108.136207 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  108.136209 {3}{RequestManager}: (9492, 25)
[0 - 7efdc8311000]  108.136210 {3}{RequestManager}: (13, 26)
[0 - 7efdc8311000]  108.136211 {3}{RequestManager}: (92, 27)
[0 - 7efdc8311000]  108.136213 {3}{RequestManager}: (2335, 28)
[0 - 7efdc8311000]  108.136214 {3}{RequestManager}: (2203, 29)
[0 - 7efdc8311000]  108.136215 {3}{RequestManager}: (16, 30)
[0 - 7efdc8311000]  108.136216 {3}{RequestManager}: (10, 31)
[0 - 7efdc8311000]  108.136217 {3}{RequestManager}: (372, 32)
[0 - 7efdc8311000]  108.136218 {3}{RequestManager}: (2335, 33)
[0 - 7efdc8311000]  108.136219 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  108.136220 {3}{RequestManager}: (13, 26)
[0 - 7efdc8311000]  108.136222 {3}{RequestManager}: (92, 27)
[0 - 7efdc8311000]  108.136223 {3}{RequestManager}: (2335, 28)
[0 - 7efdc8311000]  108.136224 {3}{RequestManager}: (2203, 29)
[0 - 7efdc8311000]  108.136225 {3}{RequestManager}: (32, 30)
[0 - 7efdc8311000]  108.136226 {3}{RequestManager}: (10, 31)
[0 - 7efdc8311000]  108.136227 {3}{RequestManager}: (5674, 32)
[0 - 7efdc8311000]  108.136228 {3}{RequestManager}: (5674, 33)
[0 - 7efdc8311000]  108.136229 {3}{RequestManager}: (10771, 34)
[0 - 7efdc8311000]  108.136230 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  108.136232 {3}{RequestManager}: (25, 0)
[0 - 7efdc8311000]  108.136233 {3}{RequestManager}: (26, 1)
[0 - 7efdc8311000]  108.136234 {3}{RequestManager}: (27, 2)
[0 - 7efdc8311000]  108.136235 {3}{RequestManager}: (28, 3)
[0 - 7efdc8311000]  108.136236 {3}{RequestManager}: (29, 4)
[0 - 7efdc8311000]  108.136237 {3}{RequestManager}: (30, 5)
[0 - 7efdc8311000]  108.136238 {3}{RequestManager}: (31, 6)
[0 - 7efdc8311000]  108.136239 {3}{RequestManager}: (32, 7)
[0 - 7efdc8311000]  108.136240 {3}{RequestManager}: (33, 8)
[0 - 7efdc8311000]  108.136243 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  108.136244 {3}{RequestManager}: (13, 26)
[0 - 7efdc8311000]  108.136245 {3}{RequestManager}: (92, 27)
[0 - 7efdc8311000]  108.136247 {3}{RequestManager}: (2335, 28)
[0 - 7efdc8311000]  108.136248 {3}{RequestManager}: (2203, 29)
[0 - 7efdc8311000]  108.136249 {3}{RequestManager}: (32, 30)
[0 - 7efdc8311000]  108.136250 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  108.136251 {3}{RequestManager}: (25, 0)
[0 - 7efdc8311000]  108.136252 {3}{RequestManager}: (26, 1)
[0 - 7efdc8311000]  108.136253 {3}{RequestManager}: (27, 2)
[0 - 7efdc8311000]  108.136254 {3}{RequestManager}: (28, 3)
[0 - 7efdc8311000]  108.136255 {3}{RequestManager}: (29, 4)
[0 - 7efdc8311000]  108.136257 {3}{RequestManager}: Number of Verified Tokens = 5
[0 - 7efdc8311000]  108.136286 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are
[0 - 7efdc8311000]  108.136288 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  108.136289 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  108.136290 {3}{RequestManager}: (1980, 32)
[0 - 7efdc8311000]  108.136292 {3}{RequestManager}: (14, 33)
[0 - 7efdc8311000]  108.136293 {3}{RequestManager}: (32, 34)
[0 - 7efdc8311000]  108.136294 {3}{RequestManager}: (1365, 35)
[0 - 7efdc8311000]  108.136295 {3}{RequestManager}: (7, 36)
[0 - 7efdc8311000]  108.136296 {3}{RequestManager}: (304, 37)
[0 - 7efdc8311000]  108.136297 {3}{RequestManager}: (8, 38)
[0 - 7efdc8311000]  108.136299 {3}{RequestManager}: (14, 39)
[0 - 7efdc8311000]  108.136300 {3}{RequestManager}: (32, 40)
[0 - 7efdc8311000]  108.136301 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  108.136302 {3}{RequestManager}: (14, 33)
[0 - 7efdc8311000]  108.136303 {3}{RequestManager}: (32, 34)
[0 - 7efdc8311000]  108.136304 {3}{RequestManager}: (1365, 35)
[0 - 7efdc8311000]  108.136305 {3}{RequestManager}: (7, 36)
[0 - 7efdc8311000]  108.136306 {3}{RequestManager}: (2382, 37)
[0 - 7efdc8311000]  108.136329 {3}{RequestManager}: (6, 38)
[0 - 7efdc8311000]  108.136331 {3}{RequestManager}: (14, 39)
[0 - 7efdc8311000]  108.136332 {3}{RequestManager}: (32, 40)
[0 - 7efdc8311000]  108.136333 {3}{RequestManager}: (1522, 41)
[0 - 7efdc8311000]  108.136334 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  108.136335 {3}{RequestManager}: (32, 9)
[0 - 7efdc8311000]  108.136336 {3}{RequestManager}: (33, 10)
[0 - 7efdc8311000]  108.136337 {3}{RequestManager}: (34, 11)
[0 - 7efdc8311000]  108.136338 {3}{RequestManager}: (35, 12)
[0 - 7efdc8311000]  108.136339 {3}{RequestManager}: (36, 13)
[0 - 7efdc8311000]  108.136341 {3}{RequestManager}: (37, 14)
[0 - 7efdc8311000]  108.136342 {3}{RequestManager}: (38, 15)
[0 - 7efdc8311000]  108.136343 {3}{RequestManager}: (39, 16)
[0 - 7efdc8311000]  108.136344 {3}{RequestManager}: (40, 17)
[0 - 7efdc8311000]  108.136345 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  108.136347 {3}{RequestManager}: (14, 33)
[0 - 7efdc8311000]  108.136348 {3}{RequestManager}: (32, 34)
[0 - 7efdc8311000]  108.136349 {3}{RequestManager}: (1365, 35)
[0 - 7efdc8311000]  108.136350 {3}{RequestManager}: (7, 36)
[0 - 7efdc8311000]  108.136351 {3}{RequestManager}: (2382, 37)
[0 - 7efdc8311000]  108.136369 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  108.136370 {3}{RequestManager}: (32, 9)
[0 - 7efdc8311000]  108.136371 {3}{RequestManager}: (33, 10)
[0 - 7efdc8311000]  108.136372 {3}{RequestManager}: (34, 11)
[0 - 7efdc8311000]  108.136373 {3}{RequestManager}: (35, 12)
[0 - 7efdc8311000]  108.136374 {3}{RequestManager}: (36, 13)
[0 - 7efdc8311000]  108.136376 {3}{RequestManager}: Number of Verified Tokens = 5
[0 - 7efdc8311000]  108.136391 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  110.494281 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  110.494288 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  110.494290 {3}{RequestManager}: (32, 30)
[0 - 7efdc8311000]  110.494292 {3}{RequestManager}: (5, 31)
[0 - 7efdc8311000]  110.494293 {3}{RequestManager}: (275, 32)
[0 - 7efdc8311000]  110.494294 {3}{RequestManager}: (2335, 33)
[0 - 7efdc8311000]  110.494296 {3}{RequestManager}: (9492, 34)
[0 - 7efdc8311000]  110.494297 {3}{RequestManager}: (13, 35)
[0 - 7efdc8311000]  110.494298 {3}{RequestManager}: (5, 36)
[0 - 7efdc8311000]  110.494299 {3}{RequestManager}: (275, 37)
[0 - 7efdc8311000]  110.494301 {3}{RequestManager}: (2335, 38)
[0 - 7efdc8311000]  110.494302 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  110.494303 {3}{RequestManager}: (5, 31)
[0 - 7efdc8311000]  110.494304 {3}{RequestManager}: (1980, 32)
[0 - 7efdc8311000]  110.494305 {3}{RequestManager}: (2335, 33)
[0 - 7efdc8311000]  110.494307 {3}{RequestManager}: (9492, 34)
[0 - 7efdc8311000]  110.494308 {3}{RequestManager}: (13, 35)
[0 - 7efdc8311000]  110.494309 {3}{RequestManager}: (92, 36)
[0 - 7efdc8311000]  110.494310 {3}{RequestManager}: (2335, 37)
[0 - 7efdc8311000]  110.494311 {3}{RequestManager}: (2335, 38)
[0 - 7efdc8311000]  110.494312 {3}{RequestManager}: (2203, 39)
[0 - 7efdc8311000]  110.494313 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  110.494315 {3}{RequestManager}: (30, 0)
[0 - 7efdc8311000]  110.494316 {3}{RequestManager}: (31, 1)
[0 - 7efdc8311000]  110.494317 {3}{RequestManager}: (32, 2)
[0 - 7efdc8311000]  110.494318 {3}{RequestManager}: (33, 3)
[0 - 7efdc8311000]  110.494320 {3}{RequestManager}: (34, 4)
[0 - 7efdc8311000]  110.494321 {3}{RequestManager}: (35, 5)
[0 - 7efdc8311000]  110.494322 {3}{RequestManager}: (36, 6)
[0 - 7efdc8311000]  110.494323 {3}{RequestManager}: (37, 7)
[0 - 7efdc8311000]  110.494324 {3}{RequestManager}: (38, 8)
[0 - 7efdc8311000]  110.494327 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  110.494328 {3}{RequestManager}: (5, 31)
[0 - 7efdc8311000]  110.494329 {3}{RequestManager}: (1980, 32)
[0 - 7efdc8311000]  110.494330 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  110.494332 {3}{RequestManager}: (30, 0)
[0 - 7efdc8311000]  110.494333 {3}{RequestManager}: (31, 1)
[0 - 7efdc8311000]  110.494334 {3}{RequestManager}: Number of Verified Tokens = 2
[0 - 7efdc8311000]  110.494368 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones
[0 - 7efdc8311000]  110.494370 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  110.494371 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  110.494372 {3}{RequestManager}: (2382, 37)
[0 - 7efdc8311000]  110.494374 {3}{RequestManager}: (8, 38)
[0 - 7efdc8311000]  110.494375 {3}{RequestManager}: (1365, 39)
[0 - 7efdc8311000]  110.494376 {3}{RequestManager}: (7, 40)
[0 - 7efdc8311000]  110.494378 {3}{RequestManager}: (304, 41)
[0 - 7efdc8311000]  110.494379 {3}{RequestManager}: (4, 42)
[0 - 7efdc8311000]  110.494380 {3}{RequestManager}: (50118, 43)
[0 - 7efdc8311000]  110.494382 {3}{RequestManager}: (50118, 44)
[0 - 7efdc8311000]  110.494383 {3}{RequestManager}: (133, 45)
[0 - 7efdc8311000]  110.494384 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  110.494385 {3}{RequestManager}: (8, 38)
[0 - 7efdc8311000]  110.494386 {3}{RequestManager}: (14, 39)
[0 - 7efdc8311000]  110.494388 {3}{RequestManager}: (7, 40)
[0 - 7efdc8311000]  110.494389 {3}{RequestManager}: (1400, 41)
[0 - 7efdc8311000]  110.494390 {3}{RequestManager}: (4, 42)
[0 - 7efdc8311000]  110.494391 {3}{RequestManager}: (50118, 43)
[0 - 7efdc8311000]  110.494392 {3}{RequestManager}: (50118, 44)
[0 - 7efdc8311000]  110.494394 {3}{RequestManager}: (133, 45)
[0 - 7efdc8311000]  110.494395 {3}{RequestManager}: (275, 46)
[0 - 7efdc8311000]  110.494396 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  110.494422 {3}{RequestManager}: (37, 9)
[0 - 7efdc8311000]  110.494423 {3}{RequestManager}: (38, 10)
[0 - 7efdc8311000]  110.494424 {3}{RequestManager}: (39, 11)
[0 - 7efdc8311000]  110.494426 {3}{RequestManager}: (40, 12)
[0 - 7efdc8311000]  110.494427 {3}{RequestManager}: (41, 13)
[0 - 7efdc8311000]  110.494428 {3}{RequestManager}: (42, 14)
[0 - 7efdc8311000]  110.494429 {3}{RequestManager}: (43, 15)
[0 - 7efdc8311000]  110.494430 {3}{RequestManager}: (44, 16)
[0 - 7efdc8311000]  110.494431 {3}{RequestManager}: (45, 17)
[0 - 7efdc8311000]  110.494433 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  110.494434 {3}{RequestManager}: (8, 38)
[0 - 7efdc8311000]  110.494435 {3}{RequestManager}: (14, 39)
[0 - 7efdc8311000]  110.494437 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  110.494438 {3}{RequestManager}: (37, 9)
[0 - 7efdc8311000]  110.494439 {3}{RequestManager}: (38, 10)
[0 - 7efdc8311000]  110.494440 {3}{RequestManager}: Number of Verified Tokens = 2
[0 - 7efdc8311000]  110.494458 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  112.851543 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  112.851550 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  112.851552 {3}{RequestManager}: (1980, 32)
[0 - 7efdc8311000]  112.851553 {3}{RequestManager}: (14, 33)
[0 - 7efdc8311000]  112.851554 {3}{RequestManager}: (32, 34)
[0 - 7efdc8311000]  112.851556 {3}{RequestManager}: (5, 35)
[0 - 7efdc8311000]  112.851557 {3}{RequestManager}: (275, 36)
[0 - 7efdc8311000]  112.851558 {3}{RequestManager}: (2335, 37)
[0 - 7efdc8311000]  112.851559 {3}{RequestManager}: (9492, 38)
[0 - 7efdc8311000]  112.851560 {3}{RequestManager}: (13, 39)
[0 - 7efdc8311000]  112.851562 {3}{RequestManager}: (5, 40)
[0 - 7efdc8311000]  112.851563 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  112.851564 {3}{RequestManager}: (14, 33)
[0 - 7efdc8311000]  112.851565 {3}{RequestManager}: (32, 34)
[0 - 7efdc8311000]  112.851566 {3}{RequestManager}: (1365, 35)
[0 - 7efdc8311000]  112.851567 {3}{RequestManager}: (144, 36)
[0 - 7efdc8311000]  112.851568 {3}{RequestManager}: (13, 37)
[0 - 7efdc8311000]  112.851569 {3}{RequestManager}: (9492, 38)
[0 - 7efdc8311000]  112.851570 {3}{RequestManager}: (13, 39)
[0 - 7efdc8311000]  112.851571 {3}{RequestManager}: (92, 40)
[0 - 7efdc8311000]  112.851573 {3}{RequestManager}: (2335, 41)
[0 - 7efdc8311000]  112.851574 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  112.851575 {3}{RequestManager}: (32, 0)
[0 - 7efdc8311000]  112.851576 {3}{RequestManager}: (33, 1)
[0 - 7efdc8311000]  112.851577 {3}{RequestManager}: (34, 2)
[0 - 7efdc8311000]  112.851578 {3}{RequestManager}: (35, 3)
[0 - 7efdc8311000]  112.851579 {3}{RequestManager}: (36, 4)
[0 - 7efdc8311000]  112.851580 {3}{RequestManager}: (37, 5)
[0 - 7efdc8311000]  112.851581 {3}{RequestManager}: (38, 6)
[0 - 7efdc8311000]  112.851582 {3}{RequestManager}: (39, 7)
[0 - 7efdc8311000]  112.851584 {3}{RequestManager}: (40, 8)
[0 - 7efdc8311000]  112.851586 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  112.851588 {3}{RequestManager}: (14, 33)
[0 - 7efdc8311000]  112.851589 {3}{RequestManager}: (32, 34)
[0 - 7efdc8311000]  112.851590 {3}{RequestManager}: (1365, 35)
[0 - 7efdc8311000]  112.851591 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  112.851592 {3}{RequestManager}: (32, 0)
[0 - 7efdc8311000]  112.851593 {3}{RequestManager}: (33, 1)
[0 - 7efdc8311000]  112.851594 {3}{RequestManager}: (34, 2)
[0 - 7efdc8311000]  112.851596 {3}{RequestManager}: Number of Verified Tokens = 3
[0 - 7efdc8311000]  112.851629 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy
[0 - 7efdc8311000]  112.851631 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  112.851632 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  112.851634 {3}{RequestManager}: (14, 39)
[0 - 7efdc8311000]  112.851635 {3}{RequestManager}: (32, 40)
[0 - 7efdc8311000]  112.851636 {3}{RequestManager}: (1365, 41)
[0 - 7efdc8311000]  112.851637 {3}{RequestManager}: (7, 42)
[0 - 7efdc8311000]  112.851639 {3}{RequestManager}: (304, 43)
[0 - 7efdc8311000]  112.851640 {3}{RequestManager}: (4, 44)
[0 - 7efdc8311000]  112.851641 {3}{RequestManager}: (50118, 45)
[0 - 7efdc8311000]  112.851642 {3}{RequestManager}: (50118, 46)
[0 - 7efdc8311000]  112.851644 {3}{RequestManager}: (133, 47)
[0 - 7efdc8311000]  112.851645 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  112.851646 {3}{RequestManager}: (32, 40)
[0 - 7efdc8311000]  112.851647 {3}{RequestManager}: (1522, 41)
[0 - 7efdc8311000]  112.851648 {3}{RequestManager}: (7, 42)
[0 - 7efdc8311000]  112.851649 {3}{RequestManager}: (1400, 43)
[0 - 7efdc8311000]  112.851650 {3}{RequestManager}: (4, 44)
[0 - 7efdc8311000]  112.851651 {3}{RequestManager}: (50118, 45)
[0 - 7efdc8311000]  112.851652 {3}{RequestManager}: (50118, 46)
[0 - 7efdc8311000]  112.851654 {3}{RequestManager}: (133, 47)
[0 - 7efdc8311000]  112.851655 {3}{RequestManager}: (275, 48)
[0 - 7efdc8311000]  112.851679 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  112.851681 {3}{RequestManager}: (39, 9)
[0 - 7efdc8311000]  112.851682 {3}{RequestManager}: (40, 10)
[0 - 7efdc8311000]  112.851683 {3}{RequestManager}: (41, 11)
[0 - 7efdc8311000]  112.851684 {3}{RequestManager}: (42, 12)
[0 - 7efdc8311000]  112.851685 {3}{RequestManager}: (43, 13)
[0 - 7efdc8311000]  112.851686 {3}{RequestManager}: (44, 14)
[0 - 7efdc8311000]  112.851687 {3}{RequestManager}: (45, 15)
[0 - 7efdc8311000]  112.851688 {3}{RequestManager}: (46, 16)
[0 - 7efdc8311000]  112.851689 {3}{RequestManager}: (47, 17)
[0 - 7efdc8311000]  112.851691 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  112.851692 {3}{RequestManager}: (32, 40)
[0 - 7efdc8311000]  112.851693 {3}{RequestManager}: (1522, 41)
[0 - 7efdc8311000]  112.851694 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  112.851695 {3}{RequestManager}: (39, 9)
[0 - 7efdc8311000]  112.851696 {3}{RequestManager}: (40, 10)
[0 - 7efdc8311000]  112.851698 {3}{RequestManager}: Number of Verified Tokens = 2
[0 - 7efdc8311000]  112.851730 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  115.210611 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  115.210617 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  115.210618 {3}{RequestManager}: (1365, 35)
[0 - 7efdc8311000]  115.210620 {3}{RequestManager}: (7, 36)
[0 - 7efdc8311000]  115.210621 {3}{RequestManager}: (120, 37)
[0 - 7efdc8311000]  115.210622 {3}{RequestManager}: (4, 38)
[0 - 7efdc8311000]  115.210624 {3}{RequestManager}: (50118, 39)
[0 - 7efdc8311000]  115.210625 {3}{RequestManager}: (50118, 40)
[0 - 7efdc8311000]  115.210626 {3}{RequestManager}: (100, 41)
[0 - 7efdc8311000]  115.210627 {3}{RequestManager}: (17, 42)
[0 - 7efdc8311000]  115.210628 {3}{RequestManager}: (27, 43)
[0 - 7efdc8311000]  115.210629 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  115.210630 {3}{RequestManager}: (7, 36)
[0 - 7efdc8311000]  115.210632 {3}{RequestManager}: (2382, 37)
[0 - 7efdc8311000]  115.210633 {3}{RequestManager}: (6, 38)
[0 - 7efdc8311000]  115.210634 {3}{RequestManager}: (252, 39)
[0 - 7efdc8311000]  115.210635 {3}{RequestManager}: (50118, 40)
[0 - 7efdc8311000]  115.210636 {3}{RequestManager}: (133, 41)
[0 - 7efdc8311000]  115.210637 {3}{RequestManager}: (17, 42)
[0 - 7efdc8311000]  115.210638 {3}{RequestManager}: (27, 43)
[0 - 7efdc8311000]  115.210639 {3}{RequestManager}: (548, 44)
[0 - 7efdc8311000]  115.210640 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  115.210641 {3}{RequestManager}: (35, 0)
[0 - 7efdc8311000]  115.210642 {3}{RequestManager}: (36, 1)
[0 - 7efdc8311000]  115.210644 {3}{RequestManager}: (37, 2)
[0 - 7efdc8311000]  115.210645 {3}{RequestManager}: (38, 3)
[0 - 7efdc8311000]  115.210646 {3}{RequestManager}: (39, 4)
[0 - 7efdc8311000]  115.210647 {3}{RequestManager}: (40, 5)
[0 - 7efdc8311000]  115.210648 {3}{RequestManager}: (41, 6)
[0 - 7efdc8311000]  115.210649 {3}{RequestManager}: (42, 7)
[0 - 7efdc8311000]  115.210650 {3}{RequestManager}: (43, 8)
[0 - 7efdc8311000]  115.210652 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  115.210653 {3}{RequestManager}: (7, 36)
[0 - 7efdc8311000]  115.210654 {3}{RequestManager}: (2382, 37)
[0 - 7efdc8311000]  115.210656 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  115.210657 {3}{RequestManager}: (35, 0)
[0 - 7efdc8311000]  115.210658 {3}{RequestManager}: (36, 1)
[0 - 7efdc8311000]  115.210659 {3}{RequestManager}: Number of Verified Tokens = 2
[0 - 7efdc8311000]  115.210692 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean
[0 - 7efdc8311000]  115.210694 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  115.210695 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  115.210696 {3}{RequestManager}: (1522, 41)
[0 - 7efdc8311000]  115.210697 {3}{RequestManager}: (7, 42)
[0 - 7efdc8311000]  115.210698 {3}{RequestManager}: (304, 43)
[0 - 7efdc8311000]  115.210700 {3}{RequestManager}: (4, 44)
[0 - 7efdc8311000]  115.210701 {3}{RequestManager}: (50118, 45)
[0 - 7efdc8311000]  115.210702 {3}{RequestManager}: (50118, 46)
[0 - 7efdc8311000]  115.210703 {3}{RequestManager}: (133, 47)
[0 - 7efdc8311000]  115.210704 {3}{RequestManager}: (275, 48)
[0 - 7efdc8311000]  115.210705 {3}{RequestManager}: (2335, 49)
[0 - 7efdc8311000]  115.210706 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  115.210707 {3}{RequestManager}: (13, 42)
[0 - 7efdc8311000]  115.210709 {3}{RequestManager}: (34431, 43)
[0 - 7efdc8311000]  115.210710 {3}{RequestManager}: (4, 44)
[0 - 7efdc8311000]  115.210711 {3}{RequestManager}: (50118, 45)
[0 - 7efdc8311000]  115.210712 {3}{RequestManager}: (50118, 46)
[0 - 7efdc8311000]  115.210713 {3}{RequestManager}: (133, 47)
[0 - 7efdc8311000]  115.210714 {3}{RequestManager}: (275, 48)
[0 - 7efdc8311000]  115.210715 {3}{RequestManager}: (2335, 49)
[0 - 7efdc8311000]  115.210716 {3}{RequestManager}: (9492, 50)
[0 - 7efdc8311000]  115.210717 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  115.210742 {3}{RequestManager}: (41, 9)
[0 - 7efdc8311000]  115.210743 {3}{RequestManager}: (42, 10)
[0 - 7efdc8311000]  115.210744 {3}{RequestManager}: (43, 11)
[0 - 7efdc8311000]  115.210745 {3}{RequestManager}: (44, 12)
[0 - 7efdc8311000]  115.210747 {3}{RequestManager}: (45, 13)
[0 - 7efdc8311000]  115.210748 {3}{RequestManager}: (46, 14)
[0 - 7efdc8311000]  115.210749 {3}{RequestManager}: (47, 15)
[0 - 7efdc8311000]  115.210750 {3}{RequestManager}: (48, 16)
[0 - 7efdc8311000]  115.210751 {3}{RequestManager}: (49, 17)
[0 - 7efdc8311000]  115.210752 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  115.210753 {3}{RequestManager}: (13, 42)
[0 - 7efdc8311000]  115.210754 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  115.210755 {3}{RequestManager}: (41, 9)
[0 - 7efdc8311000]  115.210756 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]  115.210787 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  117.570491 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  117.570498 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  117.570500 {3}{RequestManager}: (2382, 37)
[0 - 7efdc8311000]  117.570501 {3}{RequestManager}: (4, 38)
[0 - 7efdc8311000]  117.570503 {3}{RequestManager}: (50118, 39)
[0 - 7efdc8311000]  117.570504 {3}{RequestManager}: (50118, 40)
[0 - 7efdc8311000]  117.570505 {3}{RequestManager}: (100, 41)
[0 - 7efdc8311000]  117.570506 {3}{RequestManager}: (17, 42)
[0 - 7efdc8311000]  117.570507 {3}{RequestManager}: (27, 43)
[0 - 7efdc8311000]  117.570508 {3}{RequestManager}: (119, 44)
[0 - 7efdc8311000]  117.570509 {3}{RequestManager}: (10, 45)
[0 - 7efdc8311000]  117.570510 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  117.570512 {3}{RequestManager}: (8, 38)
[0 - 7efdc8311000]  117.570513 {3}{RequestManager}: (20, 39)
[0 - 7efdc8311000]  117.570514 {3}{RequestManager}: (50118, 40)
[0 - 7efdc8311000]  117.570515 {3}{RequestManager}: (133, 41)
[0 - 7efdc8311000]  117.570516 {3}{RequestManager}: (17, 42)
[0 - 7efdc8311000]  117.570517 {3}{RequestManager}: (27, 43)
[0 - 7efdc8311000]  117.570518 {3}{RequestManager}: (548, 44)
[0 - 7efdc8311000]  117.570519 {3}{RequestManager}: (45, 45)
[0 - 7efdc8311000]  117.570520 {3}{RequestManager}: (380, 46)
[0 - 7efdc8311000]  117.570521 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  117.570523 {3}{RequestManager}: (37, 0)
[0 - 7efdc8311000]  117.570524 {3}{RequestManager}: (38, 1)
[0 - 7efdc8311000]  117.570525 {3}{RequestManager}: (39, 2)
[0 - 7efdc8311000]  117.570526 {3}{RequestManager}: (40, 3)
[0 - 7efdc8311000]  117.570527 {3}{RequestManager}: (41, 4)
[0 - 7efdc8311000]  117.570528 {3}{RequestManager}: (42, 5)
[0 - 7efdc8311000]  117.570529 {3}{RequestManager}: (43, 6)
[0 - 7efdc8311000]  117.570530 {3}{RequestManager}: (44, 7)
[0 - 7efdc8311000]  117.570531 {3}{RequestManager}: (45, 8)
[0 - 7efdc8311000]  117.570534 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  117.570535 {3}{RequestManager}: (8, 38)
[0 - 7efdc8311000]  117.570536 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  117.570537 {3}{RequestManager}: (37, 0)
[0 - 7efdc8311000]  117.570538 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]  117.570573 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and
[0 - 7efdc8311000]  117.570575 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  117.570576 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  117.570577 {3}{RequestManager}: (13, 42)
[0 - 7efdc8311000]  117.570579 {3}{RequestManager}: (110, 43)
[0 - 7efdc8311000]  117.570580 {3}{RequestManager}: (2335, 44)
[0 - 7efdc8311000]  117.570581 {3}{RequestManager}: (4, 45)
[0 - 7efdc8311000]  117.570582 {3}{RequestManager}: (50118, 46)
[0 - 7efdc8311000]  117.570583 {3}{RequestManager}: (50118, 47)
[0 - 7efdc8311000]  117.570585 {3}{RequestManager}: (133, 48)
[0 - 7efdc8311000]  117.570586 {3}{RequestManager}: (275, 49)
[0 - 7efdc8311000]  117.570587 {3}{RequestManager}: (2335, 50)
[0 - 7efdc8311000]  117.570588 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  117.570589 {3}{RequestManager}: (110, 43)
[0 - 7efdc8311000]  117.570590 {3}{RequestManager}: (2335, 44)
[0 - 7efdc8311000]  117.570591 {3}{RequestManager}: (4, 45)
[0 - 7efdc8311000]  117.570593 {3}{RequestManager}: (50118, 46)
[0 - 7efdc8311000]  117.570594 {3}{RequestManager}: (50118, 47)
[0 - 7efdc8311000]  117.570595 {3}{RequestManager}: (133, 48)
[0 - 7efdc8311000]  117.570596 {3}{RequestManager}: (275, 49)
[0 - 7efdc8311000]  117.570597 {3}{RequestManager}: (2335, 50)
[0 - 7efdc8311000]  117.570598 {3}{RequestManager}: (9492, 51)
[0 - 7efdc8311000]  117.570599 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  117.570600 {3}{RequestManager}: (42, 9)
[0 - 7efdc8311000]  117.570601 {3}{RequestManager}: (43, 10)
[0 - 7efdc8311000]  117.570628 {3}{RequestManager}: (44, 11)
[0 - 7efdc8311000]  117.570629 {3}{RequestManager}: (45, 12)
[0 - 7efdc8311000]  117.570630 {3}{RequestManager}: (46, 13)
[0 - 7efdc8311000]  117.570631 {3}{RequestManager}: (47, 14)
[0 - 7efdc8311000]  117.570632 {3}{RequestManager}: (48, 15)
[0 - 7efdc8311000]  117.570634 {3}{RequestManager}: (49, 16)
[0 - 7efdc8311000]  117.570635 {3}{RequestManager}: (50, 17)
[0 - 7efdc8311000]  117.570638 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  117.570639 {3}{RequestManager}: (110, 43)
[0 - 7efdc8311000]  117.570640 {3}{RequestManager}: (2335, 44)
[0 - 7efdc8311000]  117.570641 {3}{RequestManager}: (4, 45)
[0 - 7efdc8311000]  117.570642 {3}{RequestManager}: (50118, 46)
[0 - 7efdc8311000]  117.570643 {3}{RequestManager}: (50118, 47)
[0 - 7efdc8311000]  117.570644 {3}{RequestManager}: (133, 48)
[0 - 7efdc8311000]  117.570645 {3}{RequestManager}: (275, 49)
[0 - 7efdc8311000]  117.570646 {3}{RequestManager}: (2335, 50)
[0 - 7efdc8311000]  117.570648 {3}{RequestManager}: (9492, 51)
[0 - 7efdc8311000]  117.570649 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  117.570666 {3}{RequestManager}: (42, 9)
[0 - 7efdc8311000]  117.570667 {3}{RequestManager}: (43, 10)
[0 - 7efdc8311000]  117.570668 {3}{RequestManager}: (44, 11)
[0 - 7efdc8311000]  117.570670 {3}{RequestManager}: (45, 12)
[0 - 7efdc8311000]  117.570671 {3}{RequestManager}: (46, 13)
[0 - 7efdc8311000]  117.570672 {3}{RequestManager}: (47, 14)
[0 - 7efdc8311000]  117.570673 {3}{RequestManager}: (48, 15)
[0 - 7efdc8311000]  117.570674 {3}{RequestManager}: (49, 16)
[0 - 7efdc8311000]  117.570675 {3}{RequestManager}: (50, 17)
[0 - 7efdc8311000]  117.570677 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  117.570694 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  119.928764 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  119.928771 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  119.928773 {3}{RequestManager}: (8, 38)
[0 - 7efdc8311000]  119.928775 {3}{RequestManager}: (5, 39)
[0 - 7efdc8311000]  119.928776 {3}{RequestManager}: (275, 40)
[0 - 7efdc8311000]  119.928778 {3}{RequestManager}: (2335, 41)
[0 - 7efdc8311000]  119.928779 {3}{RequestManager}: (16, 42)
[0 - 7efdc8311000]  119.928780 {3}{RequestManager}: (5, 43)
[0 - 7efdc8311000]  119.928782 {3}{RequestManager}: (275, 44)
[0 - 7efdc8311000]  119.928783 {3}{RequestManager}: (2335, 45)
[0 - 7efdc8311000]  119.928784 {3}{RequestManager}: (16, 46)
[0 - 7efdc8311000]  119.928785 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  119.928787 {3}{RequestManager}: (14, 39)
[0 - 7efdc8311000]  119.928788 {3}{RequestManager}: (1980, 40)
[0 - 7efdc8311000]  119.928789 {3}{RequestManager}: (2335, 41)
[0 - 7efdc8311000]  119.928790 {3}{RequestManager}: (9492, 42)
[0 - 7efdc8311000]  119.928792 {3}{RequestManager}: (5, 43)
[0 - 7efdc8311000]  119.928793 {3}{RequestManager}: (65, 44)
[0 - 7efdc8311000]  119.928794 {3}{RequestManager}: (2335, 45)
[0 - 7efdc8311000]  119.928795 {3}{RequestManager}: (4, 46)
[0 - 7efdc8311000]  119.928797 {3}{RequestManager}: (5, 47)
[0 - 7efdc8311000]  119.928798 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  119.928799 {3}{RequestManager}: (38, 0)
[0 - 7efdc8311000]  119.928800 {3}{RequestManager}: (39, 1)
[0 - 7efdc8311000]  119.928802 {3}{RequestManager}: (40, 2)
[0 - 7efdc8311000]  119.928803 {3}{RequestManager}: (41, 3)
[0 - 7efdc8311000]  119.928804 {3}{RequestManager}: (42, 4)
[0 - 7efdc8311000]  119.928805 {3}{RequestManager}: (43, 5)
[0 - 7efdc8311000]  119.928806 {3}{RequestManager}: (44, 6)
[0 - 7efdc8311000]  119.928808 {3}{RequestManager}: (45, 7)
[0 - 7efdc8311000]  119.928809 {3}{RequestManager}: (46, 8)
[0 - 7efdc8311000]  119.928811 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  119.928812 {3}{RequestManager}: (14, 39)
[0 - 7efdc8311000]  119.928813 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  119.928815 {3}{RequestManager}: (38, 0)
[0 - 7efdc8311000]  119.928816 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]  119.928851 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that
[0 - 7efdc8311000]  119.928854 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  119.928855 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  119.928856 {3}{RequestManager}: (9492, 51)
[0 - 7efdc8311000]  119.928857 {3}{RequestManager}: (13, 52)
[0 - 7efdc8311000]  119.928859 {3}{RequestManager}: (92, 53)
[0 - 7efdc8311000]  119.928860 {3}{RequestManager}: (2335, 54)
[0 - 7efdc8311000]  119.928861 {3}{RequestManager}: (2203, 55)
[0 - 7efdc8311000]  119.928863 {3}{RequestManager}: (32, 56)
[0 - 7efdc8311000]  119.928864 {3}{RequestManager}: (5, 57)
[0 - 7efdc8311000]  119.928865 {3}{RequestManager}: (1980, 58)
[0 - 7efdc8311000]  119.928867 {3}{RequestManager}: (14, 59)
[0 - 7efdc8311000]  119.928868 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  119.928869 {3}{RequestManager}: (13, 52)
[0 - 7efdc8311000]  119.928870 {3}{RequestManager}: (92, 53)
[0 - 7efdc8311000]  119.928871 {3}{RequestManager}: (2335, 54)
[0 - 7efdc8311000]  119.928873 {3}{RequestManager}: (2203, 55)
[0 - 7efdc8311000]  119.928874 {3}{RequestManager}: (32, 56)
[0 - 7efdc8311000]  119.928875 {3}{RequestManager}: (5, 57)
[0 - 7efdc8311000]  119.928876 {3}{RequestManager}: (1980, 58)
[0 - 7efdc8311000]  119.928877 {3}{RequestManager}: (14, 59)
[0 - 7efdc8311000]  119.928879 {3}{RequestManager}: (32, 60)
[0 - 7efdc8311000]  119.928880 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  119.928881 {3}{RequestManager}: (51, 9)
[0 - 7efdc8311000]  119.928882 {3}{RequestManager}: (52, 10)
[0 - 7efdc8311000]  119.928907 {3}{RequestManager}: (53, 11)
[0 - 7efdc8311000]  119.928909 {3}{RequestManager}: (54, 12)
[0 - 7efdc8311000]  119.928910 {3}{RequestManager}: (55, 13)
[0 - 7efdc8311000]  119.928911 {3}{RequestManager}: (56, 14)
[0 - 7efdc8311000]  119.928912 {3}{RequestManager}: (57, 15)
[0 - 7efdc8311000]  119.928913 {3}{RequestManager}: (58, 16)
[0 - 7efdc8311000]  119.928915 {3}{RequestManager}: (59, 17)
[0 - 7efdc8311000]  119.928918 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  119.928919 {3}{RequestManager}: (13, 52)
[0 - 7efdc8311000]  119.928920 {3}{RequestManager}: (92, 53)
[0 - 7efdc8311000]  119.928921 {3}{RequestManager}: (2335, 54)
[0 - 7efdc8311000]  119.928923 {3}{RequestManager}: (2203, 55)
[0 - 7efdc8311000]  119.928924 {3}{RequestManager}: (32, 56)
[0 - 7efdc8311000]  119.928925 {3}{RequestManager}: (5, 57)
[0 - 7efdc8311000]  119.928926 {3}{RequestManager}: (1980, 58)
[0 - 7efdc8311000]  119.928927 {3}{RequestManager}: (14, 59)
[0 - 7efdc8311000]  119.928929 {3}{RequestManager}: (32, 60)
[0 - 7efdc8311000]  119.928930 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  119.928931 {3}{RequestManager}: (51, 9)
[0 - 7efdc8311000]  119.928932 {3}{RequestManager}: (52, 10)
[0 - 7efdc8311000]  119.928933 {3}{RequestManager}: (53, 11)
[0 - 7efdc8311000]  119.928935 {3}{RequestManager}: (54, 12)
[0 - 7efdc8311000]  119.928936 {3}{RequestManager}: (55, 13)
[0 - 7efdc8311000]  119.928937 {3}{RequestManager}: (56, 14)
[0 - 7efdc8311000]  119.928938 {3}{RequestManager}: (57, 15)
[0 - 7efdc8311000]  119.928948 {3}{RequestManager}: (58, 16)
[0 - 7efdc8311000]  119.928950 {3}{RequestManager}: (59, 17)
[0 - 7efdc8311000]  119.928952 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  119.928972 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  122.289909 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  122.289917 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  122.289919 {3}{RequestManager}: (14, 39)
[0 - 7efdc8311000]  122.289921 {3}{RequestManager}: (32, 40)
[0 - 7efdc8311000]  122.289922 {3}{RequestManager}: (5, 41)
[0 - 7efdc8311000]  122.289924 {3}{RequestManager}: (275, 42)
[0 - 7efdc8311000]  122.289925 {3}{RequestManager}: (2335, 43)
[0 - 7efdc8311000]  122.289927 {3}{RequestManager}: (3678, 44)
[0 - 7efdc8311000]  122.289928 {3}{RequestManager}: (13, 45)
[0 - 7efdc8311000]  122.289929 {3}{RequestManager}: (5, 46)
[0 - 7efdc8311000]  122.289931 {3}{RequestManager}: (2335, 47)
[0 - 7efdc8311000]  122.289932 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  122.289933 {3}{RequestManager}: (32, 40)
[0 - 7efdc8311000]  122.289934 {3}{RequestManager}: (1522, 41)
[0 - 7efdc8311000]  122.289936 {3}{RequestManager}: (144, 42)
[0 - 7efdc8311000]  122.289937 {3}{RequestManager}: (13, 43)
[0 - 7efdc8311000]  122.289938 {3}{RequestManager}: (9492, 44)
[0 - 7efdc8311000]  122.289939 {3}{RequestManager}: (9492, 45)
[0 - 7efdc8311000]  122.289941 {3}{RequestManager}: (92, 46)
[0 - 7efdc8311000]  122.289942 {3}{RequestManager}: (92, 47)
[0 - 7efdc8311000]  122.289943 {3}{RequestManager}: (1945, 48)
[0 - 7efdc8311000]  122.289944 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  122.289946 {3}{RequestManager}: (39, 0)
[0 - 7efdc8311000]  122.289947 {3}{RequestManager}: (40, 1)
[0 - 7efdc8311000]  122.289948 {3}{RequestManager}: (41, 2)
[0 - 7efdc8311000]  122.289949 {3}{RequestManager}: (42, 3)
[0 - 7efdc8311000]  122.289951 {3}{RequestManager}: (43, 4)
[0 - 7efdc8311000]  122.289952 {3}{RequestManager}: (44, 5)
[0 - 7efdc8311000]  122.289953 {3}{RequestManager}: (45, 6)
[0 - 7efdc8311000]  122.289954 {3}{RequestManager}: (46, 7)
[0 - 7efdc8311000]  122.289955 {3}{RequestManager}: (47, 8)
[0 - 7efdc8311000]  122.289958 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  122.289959 {3}{RequestManager}: (32, 40)
[0 - 7efdc8311000]  122.289961 {3}{RequestManager}: (1522, 41)
[0 - 7efdc8311000]  122.289962 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  122.289963 {3}{RequestManager}: (39, 0)
[0 - 7efdc8311000]  122.289964 {3}{RequestManager}: (40, 1)
[0 - 7efdc8311000]  122.289966 {3}{RequestManager}: Number of Verified Tokens = 2
[0 - 7efdc8311000]  122.290003 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe
[0 - 7efdc8311000]  122.290005 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  122.290017 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  122.290019 {3}{RequestManager}: (32, 60)
[0 - 7efdc8311000]  122.290020 {3}{RequestManager}: (1365, 61)
[0 - 7efdc8311000]  122.290021 {3}{RequestManager}: (7, 62)
[0 - 7efdc8311000]  122.290022 {3}{RequestManager}: (2382, 63)
[0 - 7efdc8311000]  122.290023 {3}{RequestManager}: (8, 64)
[0 - 7efdc8311000]  122.290024 {3}{RequestManager}: (14, 65)
[0 - 7efdc8311000]  122.290025 {3}{RequestManager}: (32, 66)
[0 - 7efdc8311000]  122.290027 {3}{RequestManager}: (1522, 67)
[0 - 7efdc8311000]  122.290028 {3}{RequestManager}: (13, 68)
[0 - 7efdc8311000]  122.290029 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  122.290030 {3}{RequestManager}: (1365, 61)
[0 - 7efdc8311000]  122.290031 {3}{RequestManager}: (7, 62)
[0 - 7efdc8311000]  122.290032 {3}{RequestManager}: (2382, 63)
[0 - 7efdc8311000]  122.290033 {3}{RequestManager}: (8, 64)
[0 - 7efdc8311000]  122.290034 {3}{RequestManager}: (14, 65)
[0 - 7efdc8311000]  122.290035 {3}{RequestManager}: (32, 66)
[0 - 7efdc8311000]  122.290036 {3}{RequestManager}: (1522, 67)
[0 - 7efdc8311000]  122.290037 {3}{RequestManager}: (13, 68)
[0 - 7efdc8311000]  122.290038 {3}{RequestManager}: (110, 69)
[0 - 7efdc8311000]  122.290039 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  122.290066 {3}{RequestManager}: (60, 9)
[0 - 7efdc8311000]  122.290067 {3}{RequestManager}: (61, 10)
[0 - 7efdc8311000]  122.290068 {3}{RequestManager}: (62, 11)
[0 - 7efdc8311000]  122.290069 {3}{RequestManager}: (63, 12)
[0 - 7efdc8311000]  122.290070 {3}{RequestManager}: (64, 13)
[0 - 7efdc8311000]  122.290072 {3}{RequestManager}: (65, 14)
[0 - 7efdc8311000]  122.290073 {3}{RequestManager}: (66, 15)
[0 - 7efdc8311000]  122.290074 {3}{RequestManager}: (67, 16)
[0 - 7efdc8311000]  122.290075 {3}{RequestManager}: (68, 17)
[0 - 7efdc8311000]  122.290077 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  122.290078 {3}{RequestManager}: (1365, 61)
[0 - 7efdc8311000]  122.290079 {3}{RequestManager}: (7, 62)
[0 - 7efdc8311000]  122.290080 {3}{RequestManager}: (2382, 63)
[0 - 7efdc8311000]  122.290081 {3}{RequestManager}: (8, 64)
[0 - 7efdc8311000]  122.290082 {3}{RequestManager}: (14, 65)
[0 - 7efdc8311000]  122.290083 {3}{RequestManager}: (32, 66)
[0 - 7efdc8311000]  122.290084 {3}{RequestManager}: (1522, 67)
[0 - 7efdc8311000]  122.290085 {3}{RequestManager}: (13, 68)
[0 - 7efdc8311000]  122.290086 {3}{RequestManager}: (110, 69)
[0 - 7efdc8311000]  122.290087 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  122.290105 {3}{RequestManager}: (60, 9)
[0 - 7efdc8311000]  122.290106 {3}{RequestManager}: (61, 10)
[0 - 7efdc8311000]  122.290107 {3}{RequestManager}: (62, 11)
[0 - 7efdc8311000]  122.290108 {3}{RequestManager}: (63, 12)
[0 - 7efdc8311000]  122.290109 {3}{RequestManager}: (64, 13)
[0 - 7efdc8311000]  122.290110 {3}{RequestManager}: (65, 14)
[0 - 7efdc8311000]  122.290111 {3}{RequestManager}: (66, 15)
[0 - 7efdc8311000]  122.290112 {3}{RequestManager}: (67, 16)
[0 - 7efdc8311000]  122.290113 {3}{RequestManager}: (68, 17)
[0 - 7efdc8311000]  122.290115 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  122.290137 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  124.647586 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  124.647593 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  124.647595 {3}{RequestManager}: (1522, 41)
[0 - 7efdc8311000]  124.647596 {3}{RequestManager}: (4, 42)
[0 - 7efdc8311000]  124.647598 {3}{RequestManager}: (50118, 43)
[0 - 7efdc8311000]  124.647599 {3}{RequestManager}: (50118, 44)
[0 - 7efdc8311000]  124.647600 {3}{RequestManager}: (100, 45)
[0 - 7efdc8311000]  124.647602 {3}{RequestManager}: (17, 46)
[0 - 7efdc8311000]  124.647603 {3}{RequestManager}: (27, 47)
[0 - 7efdc8311000]  124.647604 {3}{RequestManager}: (119, 48)
[0 - 7efdc8311000]  124.647605 {3}{RequestManager}: (10, 49)
[0 - 7efdc8311000]  124.647606 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  124.647607 {3}{RequestManager}: (13, 42)
[0 - 7efdc8311000]  124.647608 {3}{RequestManager}: (50118, 43)
[0 - 7efdc8311000]  124.647610 {3}{RequestManager}: (50118, 44)
[0 - 7efdc8311000]  124.647611 {3}{RequestManager}: (133, 45)
[0 - 7efdc8311000]  124.647612 {3}{RequestManager}: (17, 46)
[0 - 7efdc8311000]  124.647613 {3}{RequestManager}: (27, 47)
[0 - 7efdc8311000]  124.647614 {3}{RequestManager}: (548, 48)
[0 - 7efdc8311000]  124.647615 {3}{RequestManager}: (164, 49)
[0 - 7efdc8311000]  124.647631 {3}{RequestManager}: (2335, 50)
[0 - 7efdc8311000]  124.647632 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  124.647634 {3}{RequestManager}: (41, 0)
[0 - 7efdc8311000]  124.647635 {3}{RequestManager}: (42, 1)
[0 - 7efdc8311000]  124.647636 {3}{RequestManager}: (43, 2)
[0 - 7efdc8311000]  124.647637 {3}{RequestManager}: (44, 3)
[0 - 7efdc8311000]  124.647638 {3}{RequestManager}: (45, 4)
[0 - 7efdc8311000]  124.647639 {3}{RequestManager}: (46, 5)
[0 - 7efdc8311000]  124.647657 {3}{RequestManager}: (47, 6)
[0 - 7efdc8311000]  124.647658 {3}{RequestManager}: (48, 7)
[0 - 7efdc8311000]  124.647659 {3}{RequestManager}: (49, 8)
[0 - 7efdc8311000]  124.647661 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  124.647663 {3}{RequestManager}: (13, 42)
[0 - 7efdc8311000]  124.647664 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  124.647665 {3}{RequestManager}: (41, 0)
[0 - 7efdc8311000]  124.647667 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]  124.647703 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for
[0 - 7efdc8311000]  124.647705 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  124.647706 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  124.647707 {3}{RequestManager}: (110, 69)
[0 - 7efdc8311000]  124.647709 {3}{RequestManager}: (2335, 70)
[0 - 7efdc8311000]  124.647710 {3}{RequestManager}: (4, 71)
[0 - 7efdc8311000]  124.647711 {3}{RequestManager}: (50118, 72)
[0 - 7efdc8311000]  124.647713 {3}{RequestManager}: (50118, 73)
[0 - 7efdc8311000]  124.647714 {3}{RequestManager}: (133, 74)
[0 - 7efdc8311000]  124.647715 {3}{RequestManager}: (275, 75)
[0 - 7efdc8311000]  124.647716 {3}{RequestManager}: (2335, 76)
[0 - 7efdc8311000]  124.647718 {3}{RequestManager}: (9492, 77)
[0 - 7efdc8311000]  124.647719 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  124.647720 {3}{RequestManager}: (2335, 70)
[0 - 7efdc8311000]  124.647721 {3}{RequestManager}: (4, 71)
[0 - 7efdc8311000]  124.647722 {3}{RequestManager}: (50118, 72)
[0 - 7efdc8311000]  124.647724 {3}{RequestManager}: (50118, 73)
[0 - 7efdc8311000]  124.647725 {3}{RequestManager}: (133, 74)
[0 - 7efdc8311000]  124.647726 {3}{RequestManager}: (275, 75)
[0 - 7efdc8311000]  124.647727 {3}{RequestManager}: (2335, 76)
[0 - 7efdc8311000]  124.647728 {3}{RequestManager}: (9492, 77)
[0 - 7efdc8311000]  124.647729 {3}{RequestManager}: (13, 78)
[0 - 7efdc8311000]  124.647730 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  124.647732 {3}{RequestManager}: (69, 9)
[0 - 7efdc8311000]  124.647756 {3}{RequestManager}: (70, 10)
[0 - 7efdc8311000]  124.647758 {3}{RequestManager}: (71, 11)
[0 - 7efdc8311000]  124.647759 {3}{RequestManager}: (72, 12)
[0 - 7efdc8311000]  124.647760 {3}{RequestManager}: (73, 13)
[0 - 7efdc8311000]  124.647761 {3}{RequestManager}: (74, 14)
[0 - 7efdc8311000]  124.647762 {3}{RequestManager}: (75, 15)
[0 - 7efdc8311000]  124.647763 {3}{RequestManager}: (76, 16)
[0 - 7efdc8311000]  124.647764 {3}{RequestManager}: (77, 17)
[0 - 7efdc8311000]  124.647767 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  124.647769 {3}{RequestManager}: (2335, 70)
[0 - 7efdc8311000]  124.647770 {3}{RequestManager}: (4, 71)
[0 - 7efdc8311000]  124.647771 {3}{RequestManager}: (50118, 72)
[0 - 7efdc8311000]  124.647772 {3}{RequestManager}: (50118, 73)
[0 - 7efdc8311000]  124.647773 {3}{RequestManager}: (133, 74)
[0 - 7efdc8311000]  124.647775 {3}{RequestManager}: (275, 75)
[0 - 7efdc8311000]  124.647776 {3}{RequestManager}: (2335, 76)
[0 - 7efdc8311000]  124.647777 {3}{RequestManager}: (9492, 77)
[0 - 7efdc8311000]  124.647778 {3}{RequestManager}: (13, 78)
[0 - 7efdc8311000]  124.647795 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  124.647797 {3}{RequestManager}: (69, 9)
[0 - 7efdc8311000]  124.647798 {3}{RequestManager}: (70, 10)
[0 - 7efdc8311000]  124.647799 {3}{RequestManager}: (71, 11)
[0 - 7efdc8311000]  124.647800 {3}{RequestManager}: (72, 12)
[0 - 7efdc8311000]  124.647801 {3}{RequestManager}: (73, 13)
[0 - 7efdc8311000]  124.647803 {3}{RequestManager}: (74, 14)
[0 - 7efdc8311000]  124.647804 {3}{RequestManager}: (75, 15)
[0 - 7efdc8311000]  124.647805 {3}{RequestManager}: (76, 16)
[0 - 7efdc8311000]  124.647806 {3}{RequestManager}: (77, 17)
[0 - 7efdc8311000]  124.647807 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  124.647831 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  127.004732 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  127.004739 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  127.004740 {3}{RequestManager}: (13, 42)
[0 - 7efdc8311000]  127.004742 {3}{RequestManager}: (5, 43)
[0 - 7efdc8311000]  127.004743 {3}{RequestManager}: (2335, 44)
[0 - 7efdc8311000]  127.004745 {3}{RequestManager}: (4, 45)
[0 - 7efdc8311000]  127.004746 {3}{RequestManager}: (50118, 46)
[0 - 7efdc8311000]  127.004747 {3}{RequestManager}: (50118, 47)
[0 - 7efdc8311000]  127.004749 {3}{RequestManager}: (100, 48)
[0 - 7efdc8311000]  127.004750 {3}{RequestManager}: (17, 49)
[0 - 7efdc8311000]  127.004751 {3}{RequestManager}: (27, 50)
[0 - 7efdc8311000]  127.004752 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  127.004753 {3}{RequestManager}: (110, 43)
[0 - 7efdc8311000]  127.004755 {3}{RequestManager}: (2335, 44)
[0 - 7efdc8311000]  127.004756 {3}{RequestManager}: (7, 45)
[0 - 7efdc8311000]  127.004757 {3}{RequestManager}: (50118, 46)
[0 - 7efdc8311000]  127.004758 {3}{RequestManager}: (50118, 47)
[0 - 7efdc8311000]  127.004759 {3}{RequestManager}: (133, 48)
[0 - 7efdc8311000]  127.004760 {3}{RequestManager}: (17, 49)
[0 - 7efdc8311000]  127.004762 {3}{RequestManager}: (27, 50)
[0 - 7efdc8311000]  127.004763 {3}{RequestManager}: (548, 51)
[0 - 7efdc8311000]  127.004764 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  127.004765 {3}{RequestManager}: (42, 0)
[0 - 7efdc8311000]  127.004767 {3}{RequestManager}: (43, 1)
[0 - 7efdc8311000]  127.004768 {3}{RequestManager}: (44, 2)
[0 - 7efdc8311000]  127.004769 {3}{RequestManager}: (45, 3)
[0 - 7efdc8311000]  127.004770 {3}{RequestManager}: (46, 4)
[0 - 7efdc8311000]  127.004771 {3}{RequestManager}: (47, 5)
[0 - 7efdc8311000]  127.004773 {3}{RequestManager}: (48, 6)
[0 - 7efdc8311000]  127.004774 {3}{RequestManager}: (49, 7)
[0 - 7efdc8311000]  127.004775 {3}{RequestManager}: (50, 8)
[0 - 7efdc8311000]  127.004777 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  127.004778 {3}{RequestManager}: (110, 43)
[0 - 7efdc8311000]  127.004780 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  127.004781 {3}{RequestManager}: (42, 0)
[0 - 7efdc8311000]  127.004783 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]  127.004820 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your
[0 - 7efdc8311000]  127.004823 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  127.004824 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  127.004825 {3}{RequestManager}: (13, 78)
[0 - 7efdc8311000]  127.004827 {3}{RequestManager}: (92, 79)
[0 - 7efdc8311000]  127.004828 {3}{RequestManager}: (2335, 80)
[0 - 7efdc8311000]  127.004829 {3}{RequestManager}: (2203, 81)
[0 - 7efdc8311000]  127.004830 {3}{RequestManager}: (32, 82)
[0 - 7efdc8311000]  127.004832 {3}{RequestManager}: (5, 83)
[0 - 7efdc8311000]  127.004833 {3}{RequestManager}: (1980, 84)
[0 - 7efdc8311000]  127.004834 {3}{RequestManager}: (14, 85)
[0 - 7efdc8311000]  127.004836 {3}{RequestManager}: (32, 86)
[0 - 7efdc8311000]  127.004837 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  127.004838 {3}{RequestManager}: (92, 79)
[0 - 7efdc8311000]  127.004839 {3}{RequestManager}: (2335, 80)
[0 - 7efdc8311000]  127.004840 {3}{RequestManager}: (2203, 81)
[0 - 7efdc8311000]  127.004841 {3}{RequestManager}: (32, 82)
[0 - 7efdc8311000]  127.004843 {3}{RequestManager}: (5, 83)
[0 - 7efdc8311000]  127.004844 {3}{RequestManager}: (1980, 84)
[0 - 7efdc8311000]  127.004845 {3}{RequestManager}: (14, 85)
[0 - 7efdc8311000]  127.004846 {3}{RequestManager}: (32, 86)
[0 - 7efdc8311000]  127.004847 {3}{RequestManager}: (1365, 87)
[0 - 7efdc8311000]  127.004849 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  127.004850 {3}{RequestManager}: (78, 9)
[0 - 7efdc8311000]  127.004851 {3}{RequestManager}: (79, 10)
[0 - 7efdc8311000]  127.004877 {3}{RequestManager}: (80, 11)
[0 - 7efdc8311000]  127.004878 {3}{RequestManager}: (81, 12)
[0 - 7efdc8311000]  127.004879 {3}{RequestManager}: (82, 13)
[0 - 7efdc8311000]  127.004881 {3}{RequestManager}: (83, 14)
[0 - 7efdc8311000]  127.004882 {3}{RequestManager}: (84, 15)
[0 - 7efdc8311000]  127.004883 {3}{RequestManager}: (85, 16)
[0 - 7efdc8311000]  127.004884 {3}{RequestManager}: (86, 17)
[0 - 7efdc8311000]  127.004887 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  127.004888 {3}{RequestManager}: (92, 79)
[0 - 7efdc8311000]  127.004889 {3}{RequestManager}: (2335, 80)
[0 - 7efdc8311000]  127.004890 {3}{RequestManager}: (2203, 81)
[0 - 7efdc8311000]  127.004891 {3}{RequestManager}: (32, 82)
[0 - 7efdc8311000]  127.004893 {3}{RequestManager}: (5, 83)
[0 - 7efdc8311000]  127.004894 {3}{RequestManager}: (1980, 84)
[0 - 7efdc8311000]  127.004895 {3}{RequestManager}: (14, 85)
[0 - 7efdc8311000]  127.004896 {3}{RequestManager}: (32, 86)
[0 - 7efdc8311000]  127.004897 {3}{RequestManager}: (1365, 87)
[0 - 7efdc8311000]  127.004898 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  127.004900 {3}{RequestManager}: (78, 9)
[0 - 7efdc8311000]  127.004901 {3}{RequestManager}: (79, 10)
[0 - 7efdc8311000]  127.004902 {3}{RequestManager}: (80, 11)
[0 - 7efdc8311000]  127.004903 {3}{RequestManager}: (81, 12)
[0 - 7efdc8311000]  127.004904 {3}{RequestManager}: (82, 13)
[0 - 7efdc8311000]  127.004906 {3}{RequestManager}: (83, 14)
[0 - 7efdc8311000]  127.004907 {3}{RequestManager}: (84, 15)
[0 - 7efdc8311000]  127.004908 {3}{RequestManager}: (85, 16)
[0 - 7efdc8311000]  127.004909 {3}{RequestManager}: (86, 17)
[0 - 7efdc8311000]  127.004910 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  127.004938 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  129.362881 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  129.362888 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  129.362890 {3}{RequestManager}: (110, 43)
[0 - 7efdc8311000]  129.362891 {3}{RequestManager}: (2335, 44)
[0 - 7efdc8311000]  129.362893 {3}{RequestManager}: (4, 45)
[0 - 7efdc8311000]  129.362894 {3}{RequestManager}: (50118, 46)
[0 - 7efdc8311000]  129.362895 {3}{RequestManager}: (50118, 47)
[0 - 7efdc8311000]  129.362897 {3}{RequestManager}: (100, 48)
[0 - 7efdc8311000]  129.362898 {3}{RequestManager}: (17, 49)
[0 - 7efdc8311000]  129.362899 {3}{RequestManager}: (27, 50)
[0 - 7efdc8311000]  129.362900 {3}{RequestManager}: (119, 51)
[0 - 7efdc8311000]  129.362901 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  129.362902 {3}{RequestManager}: (2335, 44)
[0 - 7efdc8311000]  129.362904 {3}{RequestManager}: (4, 45)
[0 - 7efdc8311000]  129.362905 {3}{RequestManager}: (50118, 46)
[0 - 7efdc8311000]  129.362906 {3}{RequestManager}: (50118, 47)
[0 - 7efdc8311000]  129.362907 {3}{RequestManager}: (133, 48)
[0 - 7efdc8311000]  129.362908 {3}{RequestManager}: (17, 49)
[0 - 7efdc8311000]  129.362909 {3}{RequestManager}: (27, 50)
[0 - 7efdc8311000]  129.362910 {3}{RequestManager}: (548, 51)
[0 - 7efdc8311000]  129.362912 {3}{RequestManager}: (164, 52)
[0 - 7efdc8311000]  129.362913 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  129.362914 {3}{RequestManager}: (43, 0)
[0 - 7efdc8311000]  129.362915 {3}{RequestManager}: (44, 1)
[0 - 7efdc8311000]  129.362916 {3}{RequestManager}: (45, 2)
[0 - 7efdc8311000]  129.362917 {3}{RequestManager}: (46, 3)
[0 - 7efdc8311000]  129.362919 {3}{RequestManager}: (47, 4)
[0 - 7efdc8311000]  129.362920 {3}{RequestManager}: (48, 5)
[0 - 7efdc8311000]  129.362921 {3}{RequestManager}: (49, 6)
[0 - 7efdc8311000]  129.362922 {3}{RequestManager}: (50, 7)
[0 - 7efdc8311000]  129.362923 {3}{RequestManager}: (51, 8)
[0 - 7efdc8311000]  129.362925 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  129.362927 {3}{RequestManager}: (2335, 44)
[0 - 7efdc8311000]  129.362928 {3}{RequestManager}: (4, 45)
[0 - 7efdc8311000]  129.362929 {3}{RequestManager}: (50118, 46)
[0 - 7efdc8311000]  129.362930 {3}{RequestManager}: (50118, 47)
[0 - 7efdc8311000]  129.362931 {3}{RequestManager}: (133, 48)
[0 - 7efdc8311000]  129.362932 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  129.362934 {3}{RequestManager}: (43, 0)
[0 - 7efdc8311000]  129.362935 {3}{RequestManager}: (44, 1)
[0 - 7efdc8311000]  129.362936 {3}{RequestManager}: (45, 2)
[0 - 7efdc8311000]  129.362937 {3}{RequestManager}: (46, 3)
[0 - 7efdc8311000]  129.362938 {3}{RequestManager}: (47, 4)
[0 - 7efdc8311000]  129.362940 {3}{RequestManager}: Number of Verified Tokens = 5
[0 - 7efdc8311000]  129.362977 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The
[0 - 7efdc8311000]  129.362979 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  129.362980 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  129.362982 {3}{RequestManager}: (1365, 87)
[0 - 7efdc8311000]  129.362983 {3}{RequestManager}: (7, 88)
[0 - 7efdc8311000]  129.362984 {3}{RequestManager}: (2382, 89)
[0 - 7efdc8311000]  129.362985 {3}{RequestManager}: (8, 90)
[0 - 7efdc8311000]  129.362987 {3}{RequestManager}: (14, 91)
[0 - 7efdc8311000]  129.362988 {3}{RequestManager}: (32, 92)
[0 - 7efdc8311000]  129.362989 {3}{RequestManager}: (1522, 93)
[0 - 7efdc8311000]  129.362990 {3}{RequestManager}: (13, 94)
[0 - 7efdc8311000]  129.362991 {3}{RequestManager}: (110, 95)
[0 - 7efdc8311000]  129.362992 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  129.362993 {3}{RequestManager}: (7, 88)
[0 - 7efdc8311000]  129.362995 {3}{RequestManager}: (2382, 89)
[0 - 7efdc8311000]  129.362996 {3}{RequestManager}: (8, 90)
[0 - 7efdc8311000]  129.362997 {3}{RequestManager}: (14, 91)
[0 - 7efdc8311000]  129.363023 {3}{RequestManager}: (32, 92)
[0 - 7efdc8311000]  129.363024 {3}{RequestManager}: (1522, 93)
[0 - 7efdc8311000]  129.363026 {3}{RequestManager}: (13, 94)
[0 - 7efdc8311000]  129.363027 {3}{RequestManager}: (110, 95)
[0 - 7efdc8311000]  129.363028 {3}{RequestManager}: (2335, 96)
[0 - 7efdc8311000]  129.363029 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  129.363030 {3}{RequestManager}: (87, 9)
[0 - 7efdc8311000]  129.363031 {3}{RequestManager}: (88, 10)
[0 - 7efdc8311000]  129.363032 {3}{RequestManager}: (89, 11)
[0 - 7efdc8311000]  129.363033 {3}{RequestManager}: (90, 12)
[0 - 7efdc8311000]  129.363034 {3}{RequestManager}: (91, 13)
[0 - 7efdc8311000]  129.363036 {3}{RequestManager}: (92, 14)
[0 - 7efdc8311000]  129.363037 {3}{RequestManager}: (93, 15)
[0 - 7efdc8311000]  129.363038 {3}{RequestManager}: (94, 16)
[0 - 7efdc8311000]  129.363039 {3}{RequestManager}: (95, 17)
[0 - 7efdc8311000]  129.363041 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  129.363043 {3}{RequestManager}: (7, 88)
[0 - 7efdc8311000]  129.363044 {3}{RequestManager}: (2382, 89)
[0 - 7efdc8311000]  129.363045 {3}{RequestManager}: (8, 90)
[0 - 7efdc8311000]  129.363062 {3}{RequestManager}: (14, 91)
[0 - 7efdc8311000]  129.363064 {3}{RequestManager}: (32, 92)
[0 - 7efdc8311000]  129.363065 {3}{RequestManager}: (1522, 93)
[0 - 7efdc8311000]  129.363066 {3}{RequestManager}: (13, 94)
[0 - 7efdc8311000]  129.363067 {3}{RequestManager}: (110, 95)
[0 - 7efdc8311000]  129.363068 {3}{RequestManager}: (2335, 96)
[0 - 7efdc8311000]  129.363069 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  129.363071 {3}{RequestManager}: (87, 9)
[0 - 7efdc8311000]  129.363072 {3}{RequestManager}: (88, 10)
[0 - 7efdc8311000]  129.363073 {3}{RequestManager}: (89, 11)
[0 - 7efdc8311000]  129.363074 {3}{RequestManager}: (90, 12)
[0 - 7efdc8311000]  129.363075 {3}{RequestManager}: (91, 13)
[0 - 7efdc8311000]  129.363076 {3}{RequestManager}: (92, 14)
[0 - 7efdc8311000]  129.363078 {3}{RequestManager}: (93, 15)
[0 - 7efdc8311000]  129.363079 {3}{RequestManager}: (94, 16)
[0 - 7efdc8311000]  129.363080 {3}{RequestManager}: (95, 17)
[0 - 7efdc8311000]  129.363081 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  129.363108 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  131.719632 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  131.719639 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  131.719641 {3}{RequestManager}: (133, 48)
[0 - 7efdc8311000]  131.719642 {3}{RequestManager}: (275, 49)
[0 - 7efdc8311000]  131.719644 {3}{RequestManager}: (2335, 50)
[0 - 7efdc8311000]  131.719645 {3}{RequestManager}: (9492, 51)
[0 - 7efdc8311000]  131.719646 {3}{RequestManager}: (13, 52)
[0 - 7efdc8311000]  131.719648 {3}{RequestManager}: (92, 53)
[0 - 7efdc8311000]  131.719649 {3}{RequestManager}: (2335, 54)
[0 - 7efdc8311000]  131.719650 {3}{RequestManager}: (2203, 55)
[0 - 7efdc8311000]  131.719651 {3}{RequestManager}: (32, 56)
[0 - 7efdc8311000]  131.719653 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  131.719654 {3}{RequestManager}: (275, 49)
[0 - 7efdc8311000]  131.719655 {3}{RequestManager}: (2335, 50)
[0 - 7efdc8311000]  131.719656 {3}{RequestManager}: (9492, 51)
[0 - 7efdc8311000]  131.719658 {3}{RequestManager}: (13, 52)
[0 - 7efdc8311000]  131.719659 {3}{RequestManager}: (92, 53)
[0 - 7efdc8311000]  131.719660 {3}{RequestManager}: (2335, 54)
[0 - 7efdc8311000]  131.719661 {3}{RequestManager}: (2203, 55)
[0 - 7efdc8311000]  131.719662 {3}{RequestManager}: (32, 56)
[0 - 7efdc8311000]  131.719664 {3}{RequestManager}: (5, 57)
[0 - 7efdc8311000]  131.719665 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  131.719666 {3}{RequestManager}: (48, 0)
[0 - 7efdc8311000]  131.719667 {3}{RequestManager}: (49, 1)
[0 - 7efdc8311000]  131.719669 {3}{RequestManager}: (50, 2)
[0 - 7efdc8311000]  131.719670 {3}{RequestManager}: (51, 3)
[0 - 7efdc8311000]  131.719671 {3}{RequestManager}: (52, 4)
[0 - 7efdc8311000]  131.719672 {3}{RequestManager}: (53, 5)
[0 - 7efdc8311000]  131.719673 {3}{RequestManager}: (54, 6)
[0 - 7efdc8311000]  131.719675 {3}{RequestManager}: (55, 7)
[0 - 7efdc8311000]  131.719676 {3}{RequestManager}: (56, 8)
[0 - 7efdc8311000]  131.719679 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  131.719680 {3}{RequestManager}: (275, 49)
[0 - 7efdc8311000]  131.719682 {3}{RequestManager}: (2335, 50)
[0 - 7efdc8311000]  131.719683 {3}{RequestManager}: (9492, 51)
[0 - 7efdc8311000]  131.719684 {3}{RequestManager}: (13, 52)
[0 - 7efdc8311000]  131.719685 {3}{RequestManager}: (92, 53)
[0 - 7efdc8311000]  131.719686 {3}{RequestManager}: (2335, 54)
[0 - 7efdc8311000]  131.719688 {3}{RequestManager}: (2203, 55)
[0 - 7efdc8311000]  131.719689 {3}{RequestManager}: (32, 56)
[0 - 7efdc8311000]  131.719690 {3}{RequestManager}: (5, 57)
[0 - 7efdc8311000]  131.719691 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  131.719693 {3}{RequestManager}: (48, 0)
[0 - 7efdc8311000]  131.719694 {3}{RequestManager}: (49, 1)
[0 - 7efdc8311000]  131.719695 {3}{RequestManager}: (50, 2)
[0 - 7efdc8311000]  131.719696 {3}{RequestManager}: (51, 3)
[0 - 7efdc8311000]  131.719698 {3}{RequestManager}: (52, 4)
[0 - 7efdc8311000]  131.719699 {3}{RequestManager}: (53, 5)
[0 - 7efdc8311000]  131.719701 {3}{RequestManager}: (54, 6)
[0 - 7efdc8311000]  131.719702 {3}{RequestManager}: (55, 7)
[0 - 7efdc8311000]  131.719703 {3}{RequestManager}: (56, 8)
[0 - 7efdc8311000]  131.719705 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  131.719743 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the
[0 - 7efdc8311000]  131.719746 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  131.719747 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  131.719748 {3}{RequestManager}: (2335, 96)
[0 - 7efdc8311000]  131.719749 {3}{RequestManager}: (4, 97)
[0 - 7efdc8311000]  131.719751 {3}{RequestManager}: (50118, 98)
[0 - 7efdc8311000]  131.719752 {3}{RequestManager}: (50118, 99)
[0 - 7efdc8311000]  131.719753 {3}{RequestManager}: (133, 100)
[0 - 7efdc8311000]  131.719755 {3}{RequestManager}: (275, 101)
[0 - 7efdc8311000]  131.719780 {3}{RequestManager}: (2335, 102)
[0 - 7efdc8311000]  131.719782 {3}{RequestManager}: (9492, 103)
[0 - 7efdc8311000]  131.719783 {3}{RequestManager}: (13, 104)
[0 - 7efdc8311000]  131.719784 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  131.719785 {3}{RequestManager}: (4, 97)
[0 - 7efdc8311000]  131.719787 {3}{RequestManager}: (50118, 98)
[0 - 7efdc8311000]  131.719788 {3}{RequestManager}: (50118, 99)
[0 - 7efdc8311000]  131.719789 {3}{RequestManager}: (133, 100)
[0 - 7efdc8311000]  131.719790 {3}{RequestManager}: (275, 101)
[0 - 7efdc8311000]  131.719791 {3}{RequestManager}: (2335, 102)
[0 - 7efdc8311000]  131.719793 {3}{RequestManager}: (9492, 103)
[0 - 7efdc8311000]  131.719794 {3}{RequestManager}: (13, 104)
[0 - 7efdc8311000]  131.719795 {3}{RequestManager}: (92, 105)
[0 - 7efdc8311000]  131.719796 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  131.719797 {3}{RequestManager}: (96, 9)
[0 - 7efdc8311000]  131.719799 {3}{RequestManager}: (97, 10)
[0 - 7efdc8311000]  131.719800 {3}{RequestManager}: (98, 11)
[0 - 7efdc8311000]  131.719801 {3}{RequestManager}: (99, 12)
[0 - 7efdc8311000]  131.719802 {3}{RequestManager}: (100, 13)
[0 - 7efdc8311000]  131.719803 {3}{RequestManager}: (101, 14)
[0 - 7efdc8311000]  131.719821 {3}{RequestManager}: (102, 15)
[0 - 7efdc8311000]  131.719822 {3}{RequestManager}: (103, 16)
[0 - 7efdc8311000]  131.719823 {3}{RequestManager}: (104, 17)
[0 - 7efdc8311000]  131.719826 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  131.719827 {3}{RequestManager}: (4, 97)
[0 - 7efdc8311000]  131.719828 {3}{RequestManager}: (50118, 98)
[0 - 7efdc8311000]  131.719829 {3}{RequestManager}: (50118, 99)
[0 - 7efdc8311000]  131.719831 {3}{RequestManager}: (133, 100)
[0 - 7efdc8311000]  131.719832 {3}{RequestManager}: (275, 101)
[0 - 7efdc8311000]  131.719833 {3}{RequestManager}: (2335, 102)
[0 - 7efdc8311000]  131.719834 {3}{RequestManager}: (9492, 103)
[0 - 7efdc8311000]  131.719835 {3}{RequestManager}: (13, 104)
[0 - 7efdc8311000]  131.719837 {3}{RequestManager}: (92, 105)
[0 - 7efdc8311000]  131.719838 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  131.719839 {3}{RequestManager}: (96, 9)
[0 - 7efdc8311000]  131.719840 {3}{RequestManager}: (97, 10)
[0 - 7efdc8311000]  131.719842 {3}{RequestManager}: (98, 11)
[0 - 7efdc8311000]  131.719843 {3}{RequestManager}: (99, 12)
[0 - 7efdc8311000]  131.719844 {3}{RequestManager}: (100, 13)
[0 - 7efdc8311000]  131.719845 {3}{RequestManager}: (101, 14)
[0 - 7efdc8311000]  131.719847 {3}{RequestManager}: (102, 15)
[0 - 7efdc8311000]  131.719848 {3}{RequestManager}: (103, 16)
[0 - 7efdc8311000]  131.719849 {3}{RequestManager}: (104, 17)
[0 - 7efdc8311000]  131.719850 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  131.719879 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  134.077288 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  134.077295 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  134.077297 {3}{RequestManager}: (5, 57)
[0 - 7efdc8311000]  134.077298 {3}{RequestManager}: (1980, 58)
[0 - 7efdc8311000]  134.077299 {3}{RequestManager}: (14, 59)
[0 - 7efdc8311000]  134.077301 {3}{RequestManager}: (32, 60)
[0 - 7efdc8311000]  134.077302 {3}{RequestManager}: (5, 61)
[0 - 7efdc8311000]  134.077303 {3}{RequestManager}: (275, 62)
[0 - 7efdc8311000]  134.077304 {3}{RequestManager}: (50118, 63)
[0 - 7efdc8311000]  134.077305 {3}{RequestManager}: (50118, 64)
[0 - 7efdc8311000]  134.077307 {3}{RequestManager}: (133, 65)
[0 - 7efdc8311000]  134.077308 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  134.077309 {3}{RequestManager}: (1980, 58)
[0 - 7efdc8311000]  134.077310 {3}{RequestManager}: (14, 59)
[0 - 7efdc8311000]  134.077311 {3}{RequestManager}: (32, 60)
[0 - 7efdc8311000]  134.077312 {3}{RequestManager}: (1365, 61)
[0 - 7efdc8311000]  134.077313 {3}{RequestManager}: (144, 62)
[0 - 7efdc8311000]  134.077314 {3}{RequestManager}: (13, 63)
[0 - 7efdc8311000]  134.077315 {3}{RequestManager}: (50118, 64)
[0 - 7efdc8311000]  134.077316 {3}{RequestManager}: (133, 65)
[0 - 7efdc8311000]  134.077317 {3}{RequestManager}: (275, 66)
[0 - 7efdc8311000]  134.077319 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  134.077320 {3}{RequestManager}: (57, 0)
[0 - 7efdc8311000]  134.077321 {3}{RequestManager}: (58, 1)
[0 - 7efdc8311000]  134.077322 {3}{RequestManager}: (59, 2)
[0 - 7efdc8311000]  134.077323 {3}{RequestManager}: (60, 3)
[0 - 7efdc8311000]  134.077324 {3}{RequestManager}: (61, 4)
[0 - 7efdc8311000]  134.077325 {3}{RequestManager}: (62, 5)
[0 - 7efdc8311000]  134.077326 {3}{RequestManager}: (63, 6)
[0 - 7efdc8311000]  134.077327 {3}{RequestManager}: (64, 7)
[0 - 7efdc8311000]  134.077328 {3}{RequestManager}: (65, 8)
[0 - 7efdc8311000]  134.077331 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  134.077332 {3}{RequestManager}: (1980, 58)
[0 - 7efdc8311000]  134.077333 {3}{RequestManager}: (14, 59)
[0 - 7efdc8311000]  134.077334 {3}{RequestManager}: (32, 60)
[0 - 7efdc8311000]  134.077335 {3}{RequestManager}: (1365, 61)
[0 - 7efdc8311000]  134.077337 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  134.077338 {3}{RequestManager}: (57, 0)
[0 - 7efdc8311000]  134.077339 {3}{RequestManager}: (58, 1)
[0 - 7efdc8311000]  134.077340 {3}{RequestManager}: (59, 2)
[0 - 7efdc8311000]  134.077341 {3}{RequestManager}: (60, 3)
[0 - 7efdc8311000]  134.077343 {3}{RequestManager}: Number of Verified Tokens = 4
[0 - 7efdc8311000]  134.077379 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy
[0 - 7efdc8311000]  134.077381 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  134.077383 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  134.077384 {3}{RequestManager}: (92, 105)
[0 - 7efdc8311000]  134.077385 {3}{RequestManager}: (2335, 106)
[0 - 7efdc8311000]  134.077386 {3}{RequestManager}: (2203, 107)
[0 - 7efdc8311000]  134.077388 {3}{RequestManager}: (32, 108)
[0 - 7efdc8311000]  134.077389 {3}{RequestManager}: (5, 109)
[0 - 7efdc8311000]  134.077390 {3}{RequestManager}: (1980, 110)
[0 - 7efdc8311000]  134.077391 {3}{RequestManager}: (14, 111)
[0 - 7efdc8311000]  134.077392 {3}{RequestManager}: (32, 112)
[0 - 7efdc8311000]  134.077393 {3}{RequestManager}: (1365, 113)
[0 - 7efdc8311000]  134.077394 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  134.077396 {3}{RequestManager}: (2335, 106)
[0 - 7efdc8311000]  134.077397 {3}{RequestManager}: (2203, 107)
[0 - 7efdc8311000]  134.077398 {3}{RequestManager}: (32, 108)
[0 - 7efdc8311000]  134.077399 {3}{RequestManager}: (5, 109)
[0 - 7efdc8311000]  134.077400 {3}{RequestManager}: (1980, 110)
[0 - 7efdc8311000]  134.077423 {3}{RequestManager}: (14, 111)
[0 - 7efdc8311000]  134.077425 {3}{RequestManager}: (32, 112)
[0 - 7efdc8311000]  134.077426 {3}{RequestManager}: (1365, 113)
[0 - 7efdc8311000]  134.077427 {3}{RequestManager}: (7, 114)
[0 - 7efdc8311000]  134.077428 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  134.077429 {3}{RequestManager}: (105, 9)
[0 - 7efdc8311000]  134.077430 {3}{RequestManager}: (106, 10)
[0 - 7efdc8311000]  134.077432 {3}{RequestManager}: (107, 11)
[0 - 7efdc8311000]  134.077433 {3}{RequestManager}: (108, 12)
[0 - 7efdc8311000]  134.077434 {3}{RequestManager}: (109, 13)
[0 - 7efdc8311000]  134.077435 {3}{RequestManager}: (110, 14)
[0 - 7efdc8311000]  134.077436 {3}{RequestManager}: (111, 15)
[0 - 7efdc8311000]  134.077437 {3}{RequestManager}: (112, 16)
[0 - 7efdc8311000]  134.077438 {3}{RequestManager}: (113, 17)
[0 - 7efdc8311000]  134.077440 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  134.077442 {3}{RequestManager}: (2335, 106)
[0 - 7efdc8311000]  134.077443 {3}{RequestManager}: (2203, 107)
[0 - 7efdc8311000]  134.077444 {3}{RequestManager}: (32, 108)
[0 - 7efdc8311000]  134.077461 {3}{RequestManager}: (5, 109)
[0 - 7efdc8311000]  134.077463 {3}{RequestManager}: (1980, 110)
[0 - 7efdc8311000]  134.077464 {3}{RequestManager}: (14, 111)
[0 - 7efdc8311000]  134.077465 {3}{RequestManager}: (32, 112)
[0 - 7efdc8311000]  134.077466 {3}{RequestManager}: (1365, 113)
[0 - 7efdc8311000]  134.077467 {3}{RequestManager}: (7, 114)
[0 - 7efdc8311000]  134.077468 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  134.077470 {3}{RequestManager}: (105, 9)
[0 - 7efdc8311000]  134.077471 {3}{RequestManager}: (106, 10)
[0 - 7efdc8311000]  134.077472 {3}{RequestManager}: (107, 11)
[0 - 7efdc8311000]  134.077473 {3}{RequestManager}: (108, 12)
[0 - 7efdc8311000]  134.077474 {3}{RequestManager}: (109, 13)
[0 - 7efdc8311000]  134.077475 {3}{RequestManager}: (110, 14)
[0 - 7efdc8311000]  134.077477 {3}{RequestManager}: (111, 15)
[0 - 7efdc8311000]  134.077478 {3}{RequestManager}: (112, 16)
[0 - 7efdc8311000]  134.077479 {3}{RequestManager}: (113, 17)
[0 - 7efdc8311000]  134.077480 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  134.077511 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  136.435372 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  136.435379 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  136.435381 {3}{RequestManager}: (1365, 61)
[0 - 7efdc8311000]  136.435382 {3}{RequestManager}: (7, 62)
[0 - 7efdc8311000]  136.435384 {3}{RequestManager}: (2382, 63)
[0 - 7efdc8311000]  136.435385 {3}{RequestManager}: (8, 64)
[0 - 7efdc8311000]  136.435386 {3}{RequestManager}: (14, 65)
[0 - 7efdc8311000]  136.435388 {3}{RequestManager}: (32, 66)
[0 - 7efdc8311000]  136.435389 {3}{RequestManager}: (1522, 67)
[0 - 7efdc8311000]  136.435390 {3}{RequestManager}: (13, 68)
[0 - 7efdc8311000]  136.435391 {3}{RequestManager}: (110, 69)
[0 - 7efdc8311000]  136.435393 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  136.435394 {3}{RequestManager}: (7, 62)
[0 - 7efdc8311000]  136.435395 {3}{RequestManager}: (2382, 63)
[0 - 7efdc8311000]  136.435396 {3}{RequestManager}: (8, 64)
[0 - 7efdc8311000]  136.435397 {3}{RequestManager}: (14, 65)
[0 - 7efdc8311000]  136.435399 {3}{RequestManager}: (32, 66)
[0 - 7efdc8311000]  136.435400 {3}{RequestManager}: (1522, 67)
[0 - 7efdc8311000]  136.435401 {3}{RequestManager}: (13, 68)
[0 - 7efdc8311000]  136.435402 {3}{RequestManager}: (110, 69)
[0 - 7efdc8311000]  136.435403 {3}{RequestManager}: (2335, 70)
[0 - 7efdc8311000]  136.435405 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  136.435406 {3}{RequestManager}: (61, 0)
[0 - 7efdc8311000]  136.435407 {3}{RequestManager}: (62, 1)
[0 - 7efdc8311000]  136.435408 {3}{RequestManager}: (63, 2)
[0 - 7efdc8311000]  136.435409 {3}{RequestManager}: (64, 3)
[0 - 7efdc8311000]  136.435411 {3}{RequestManager}: (65, 4)
[0 - 7efdc8311000]  136.435412 {3}{RequestManager}: (66, 5)
[0 - 7efdc8311000]  136.435413 {3}{RequestManager}: (67, 6)
[0 - 7efdc8311000]  136.435414 {3}{RequestManager}: (68, 7)
[0 - 7efdc8311000]  136.435415 {3}{RequestManager}: (69, 8)
[0 - 7efdc8311000]  136.435419 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  136.435420 {3}{RequestManager}: (7, 62)
[0 - 7efdc8311000]  136.435421 {3}{RequestManager}: (2382, 63)
[0 - 7efdc8311000]  136.435422 {3}{RequestManager}: (8, 64)
[0 - 7efdc8311000]  136.435423 {3}{RequestManager}: (14, 65)
[0 - 7efdc8311000]  136.435425 {3}{RequestManager}: (32, 66)
[0 - 7efdc8311000]  136.435426 {3}{RequestManager}: (1522, 67)
[0 - 7efdc8311000]  136.435427 {3}{RequestManager}: (13, 68)
[0 - 7efdc8311000]  136.435428 {3}{RequestManager}: (110, 69)
[0 - 7efdc8311000]  136.435429 {3}{RequestManager}: (2335, 70)
[0 - 7efdc8311000]  136.435431 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  136.435432 {3}{RequestManager}: (61, 0)
[0 - 7efdc8311000]  136.435433 {3}{RequestManager}: (62, 1)
[0 - 7efdc8311000]  136.435434 {3}{RequestManager}: (63, 2)
[0 - 7efdc8311000]  136.435436 {3}{RequestManager}: (64, 3)
[0 - 7efdc8311000]  136.435437 {3}{RequestManager}: (65, 4)
[0 - 7efdc8311000]  136.435438 {3}{RequestManager}: (66, 5)
[0 - 7efdc8311000]  136.435439 {3}{RequestManager}: (67, 6)
[0 - 7efdc8311000]  136.435441 {3}{RequestManager}: (68, 7)
[0 - 7efdc8311000]  136.435442 {3}{RequestManager}: (69, 8)
[0 - 7efdc8311000]  136.435443 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  136.435487 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog
[0 - 7efdc8311000]  136.435489 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  136.435490 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  136.435492 {3}{RequestManager}: (7, 114)
[0 - 7efdc8311000]  136.435493 {3}{RequestManager}: (2382, 115)
[0 - 7efdc8311000]  136.435495 {3}{RequestManager}: (8, 116)
[0 - 7efdc8311000]  136.435496 {3}{RequestManager}: (14, 117)
[0 - 7efdc8311000]  136.435497 {3}{RequestManager}: (32, 118)
[0 - 7efdc8311000]  136.435525 {3}{RequestManager}: (1522, 119)
[0 - 7efdc8311000]  136.435526 {3}{RequestManager}: (13, 120)
[0 - 7efdc8311000]  136.435527 {3}{RequestManager}: (110, 121)
[0 - 7efdc8311000]  136.435528 {3}{RequestManager}: (2335, 122)
[0 - 7efdc8311000]  136.435530 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  136.435531 {3}{RequestManager}: (2382, 115)
[0 - 7efdc8311000]  136.435532 {3}{RequestManager}: (8, 116)
[0 - 7efdc8311000]  136.435533 {3}{RequestManager}: (14, 117)
[0 - 7efdc8311000]  136.435534 {3}{RequestManager}: (32, 118)
[0 - 7efdc8311000]  136.435535 {3}{RequestManager}: (1522, 119)
[0 - 7efdc8311000]  136.435537 {3}{RequestManager}: (13, 120)
[0 - 7efdc8311000]  136.435538 {3}{RequestManager}: (110, 121)
[0 - 7efdc8311000]  136.435539 {3}{RequestManager}: (2335, 122)
[0 - 7efdc8311000]  136.435540 {3}{RequestManager}: (4, 123)
[0 - 7efdc8311000]  136.435541 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  136.435543 {3}{RequestManager}: (114, 9)
[0 - 7efdc8311000]  136.435544 {3}{RequestManager}: (115, 10)
[0 - 7efdc8311000]  136.435545 {3}{RequestManager}: (116, 11)
[0 - 7efdc8311000]  136.435546 {3}{RequestManager}: (117, 12)
[0 - 7efdc8311000]  136.435564 {3}{RequestManager}: (118, 13)
[0 - 7efdc8311000]  136.435565 {3}{RequestManager}: (119, 14)
[0 - 7efdc8311000]  136.435566 {3}{RequestManager}: (120, 15)
[0 - 7efdc8311000]  136.435567 {3}{RequestManager}: (121, 16)
[0 - 7efdc8311000]  136.435569 {3}{RequestManager}: (122, 17)
[0 - 7efdc8311000]  136.435571 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  136.435572 {3}{RequestManager}: (2382, 115)
[0 - 7efdc8311000]  136.435573 {3}{RequestManager}: (8, 116)
[0 - 7efdc8311000]  136.435574 {3}{RequestManager}: (14, 117)
[0 - 7efdc8311000]  136.435576 {3}{RequestManager}: (32, 118)
[0 - 7efdc8311000]  136.435577 {3}{RequestManager}: (1522, 119)
[0 - 7efdc8311000]  136.435578 {3}{RequestManager}: (13, 120)
[0 - 7efdc8311000]  136.435579 {3}{RequestManager}: (110, 121)
[0 - 7efdc8311000]  136.435581 {3}{RequestManager}: (2335, 122)
[0 - 7efdc8311000]  136.435582 {3}{RequestManager}: (4, 123)
[0 - 7efdc8311000]  136.435583 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  136.435584 {3}{RequestManager}: (114, 9)
[0 - 7efdc8311000]  136.435586 {3}{RequestManager}: (115, 10)
[0 - 7efdc8311000]  136.435587 {3}{RequestManager}: (116, 11)
[0 - 7efdc8311000]  136.435588 {3}{RequestManager}: (117, 12)
[0 - 7efdc8311000]  136.435589 {3}{RequestManager}: (118, 13)
[0 - 7efdc8311000]  136.435607 {3}{RequestManager}: (119, 14)
[0 - 7efdc8311000]  136.435609 {3}{RequestManager}: (120, 15)
[0 - 7efdc8311000]  136.435611 {3}{RequestManager}: (121, 16)
[0 - 7efdc8311000]  136.435612 {3}{RequestManager}: (122, 17)
[0 - 7efdc8311000]  136.435614 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  136.435650 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
[0 - 7efdc8311000]  136.518888 {3}{RequestManager}: [Done] guid(1000004) with spec_tree_depth(4)
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  138.795726 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  138.795732 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  138.795734 {3}{RequestManager}: (2335, 70)
[0 - 7efdc8311000]  138.795736 {3}{RequestManager}: (4, 71)
[0 - 7efdc8311000]  138.795737 {3}{RequestManager}: (50118, 72)
[0 - 7efdc8311000]  138.795739 {3}{RequestManager}: (50118, 73)
[0 - 7efdc8311000]  138.795740 {3}{RequestManager}: (133, 74)
[0 - 7efdc8311000]  138.795742 {3}{RequestManager}: (275, 75)
[0 - 7efdc8311000]  138.795743 {3}{RequestManager}: (2335, 76)
[0 - 7efdc8311000]  138.795744 {3}{RequestManager}: (9492, 77)
[0 - 7efdc8311000]  138.795746 {3}{RequestManager}: (13, 78)
[0 - 7efdc8311000]  138.795747 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  138.795748 {3}{RequestManager}: (4, 71)
[0 - 7efdc8311000]  138.795750 {3}{RequestManager}: (50118, 72)
[0 - 7efdc8311000]  138.795751 {3}{RequestManager}: (50118, 73)
[0 - 7efdc8311000]  138.795752 {3}{RequestManager}: (133, 74)
[0 - 7efdc8311000]  138.795754 {3}{RequestManager}: (275, 75)
[0 - 7efdc8311000]  138.795755 {3}{RequestManager}: (2335, 76)
[0 - 7efdc8311000]  138.795756 {3}{RequestManager}: (9492, 77)
[0 - 7efdc8311000]  138.795757 {3}{RequestManager}: (13, 78)
[0 - 7efdc8311000]  138.795759 {3}{RequestManager}: (92, 79)
[0 - 7efdc8311000]  138.795760 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  138.795761 {3}{RequestManager}: (70, 0)
[0 - 7efdc8311000]  138.795763 {3}{RequestManager}: (71, 1)
[0 - 7efdc8311000]  138.795764 {3}{RequestManager}: (72, 2)
[0 - 7efdc8311000]  138.795765 {3}{RequestManager}: (73, 3)
[0 - 7efdc8311000]  138.795767 {3}{RequestManager}: (74, 4)
[0 - 7efdc8311000]  138.795768 {3}{RequestManager}: (75, 5)
[0 - 7efdc8311000]  138.795769 {3}{RequestManager}: (76, 6)
[0 - 7efdc8311000]  138.795770 {3}{RequestManager}: (77, 7)
[0 - 7efdc8311000]  138.795772 {3}{RequestManager}: (78, 8)
[0 - 7efdc8311000]  138.795776 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  138.795777 {3}{RequestManager}: (4, 71)
[0 - 7efdc8311000]  138.795778 {3}{RequestManager}: (50118, 72)
[0 - 7efdc8311000]  138.795780 {3}{RequestManager}: (50118, 73)
[0 - 7efdc8311000]  138.795781 {3}{RequestManager}: (133, 74)
[0 - 7efdc8311000]  138.795782 {3}{RequestManager}: (275, 75)
[0 - 7efdc8311000]  138.795783 {3}{RequestManager}: (2335, 76)
[0 - 7efdc8311000]  138.795785 {3}{RequestManager}: (9492, 77)
[0 - 7efdc8311000]  138.795786 {3}{RequestManager}: (13, 78)
[0 - 7efdc8311000]  138.795787 {3}{RequestManager}: (92, 79)
[0 - 7efdc8311000]  138.795789 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  138.795790 {3}{RequestManager}: (70, 0)
[0 - 7efdc8311000]  138.795792 {3}{RequestManager}: (71, 1)
[0 - 7efdc8311000]  138.795793 {3}{RequestManager}: (72, 2)
[0 - 7efdc8311000]  138.795794 {3}{RequestManager}: (73, 3)
[0 - 7efdc8311000]  138.795796 {3}{RequestManager}: (74, 4)
[0 - 7efdc8311000]  138.795797 {3}{RequestManager}: (75, 5)
[0 - 7efdc8311000]  138.795798 {3}{RequestManager}: (76, 6)
[0 - 7efdc8311000]  138.795800 {3}{RequestManager}: (77, 7)
[0 - 7efdc8311000]  138.795801 {3}{RequestManager}: (78, 8)
[0 - 7efdc8311000]  138.795803 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  138.795850 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new
[0 - 7efdc8311000]  138.795853 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  138.795854 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  138.795856 {3}{RequestManager}: (9492, 123)
[0 - 7efdc8311000]  138.795857 {3}{RequestManager}: (50118, 124)
[0 - 7efdc8311000]  138.795859 {3}{RequestManager}: (50118, 125)
[0 - 7efdc8311000]  138.795860 {3}{RequestManager}: (133, 126)
[0 - 7efdc8311000]  138.795893 {3}{RequestManager}: (275, 127)
[0 - 7efdc8311000]  138.795894 {3}{RequestManager}: (2335, 128)
[0 - 7efdc8311000]  138.795896 {3}{RequestManager}: (9492, 129)
[0 - 7efdc8311000]  138.795897 {3}{RequestManager}: (110, 130)
[0 - 7efdc8311000]  138.795898 {3}{RequestManager}: (2335, 131)
[0 - 7efdc8311000]  138.795900 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  138.795901 {3}{RequestManager}: (50118, 124)
[0 - 7efdc8311000]  138.795902 {3}{RequestManager}: (50118, 125)
[0 - 7efdc8311000]  138.795904 {3}{RequestManager}: (133, 126)
[0 - 7efdc8311000]  138.795905 {3}{RequestManager}: (275, 127)
[0 - 7efdc8311000]  138.795906 {3}{RequestManager}: (2335, 128)
[0 - 7efdc8311000]  138.795907 {3}{RequestManager}: (9492, 129)
[0 - 7efdc8311000]  138.795909 {3}{RequestManager}: (13, 130)
[0 - 7efdc8311000]  138.795910 {3}{RequestManager}: (2335, 131)
[0 - 7efdc8311000]  138.795911 {3}{RequestManager}: (40, 132)
[0 - 7efdc8311000]  138.795912 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  138.795914 {3}{RequestManager}: (123, 9)
[0 - 7efdc8311000]  138.795915 {3}{RequestManager}: (124, 10)
[0 - 7efdc8311000]  138.795916 {3}{RequestManager}: (125, 11)
[0 - 7efdc8311000]  138.795918 {3}{RequestManager}: (126, 12)
[0 - 7efdc8311000]  138.795919 {3}{RequestManager}: (127, 13)
[0 - 7efdc8311000]  138.795920 {3}{RequestManager}: (128, 14)
[0 - 7efdc8311000]  138.795922 {3}{RequestManager}: (129, 15)
[0 - 7efdc8311000]  138.795923 {3}{RequestManager}: (130, 16)
[0 - 7efdc8311000]  138.795924 {3}{RequestManager}: (131, 17)
[0 - 7efdc8311000]  138.795926 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  138.795927 {3}{RequestManager}: (50118, 124)
[0 - 7efdc8311000]  138.795929 {3}{RequestManager}: (50118, 125)
[0 - 7efdc8311000]  138.795930 {3}{RequestManager}: (133, 126)
[0 - 7efdc8311000]  138.795931 {3}{RequestManager}: (275, 127)
[0 - 7efdc8311000]  138.795933 {3}{RequestManager}: (2335, 128)
[0 - 7efdc8311000]  138.795934 {3}{RequestManager}: (9492, 129)
[0 - 7efdc8311000]  138.795935 {3}{RequestManager}: (13, 130)
[0 - 7efdc8311000]  138.795937 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  138.795938 {3}{RequestManager}: (123, 9)
[0 - 7efdc8311000]  138.795939 {3}{RequestManager}: (124, 10)
[0 - 7efdc8311000]  138.795940 {3}{RequestManager}: (125, 11)
[0 - 7efdc8311000]  138.795942 {3}{RequestManager}: (126, 12)
[0 - 7efdc8311000]  138.795943 {3}{RequestManager}: (127, 13)
[0 - 7efdc8311000]  138.795944 {3}{RequestManager}: (128, 14)
[0 - 7efdc8311000]  138.795946 {3}{RequestManager}: (129, 15)
[0 - 7efdc8311000]  138.795947 {3}{RequestManager}: Number of Verified Tokens = 7
[0 - 7efdc8311000]  138.795949 {3}{RequestManager}: [Done] guid(1000004) with final length(128)
[0 - 7efdc8311000]  138.795987 {3}{RequestManager}: Final output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best
[0 - 7efdc8311000]  138.795993 {3}{RequestManager}: [Profile] guid(1000004) decoding_steps(17) start(98712190.0) finish(138795988.0) latency(40083798.0) acc_latency(170365818.0)
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 29
new_bc.num_tokens: 37
[0 - 7efdc8311000]  141.156727 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  141.156734 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  141.156736 {3}{RequestManager}: (92, 79)
[0 - 7efdc8311000]  141.156737 {3}{RequestManager}: (2335, 80)
[0 - 7efdc8311000]  141.156739 {3}{RequestManager}: (2203, 81)
[0 - 7efdc8311000]  141.156740 {3}{RequestManager}: (32, 82)
[0 - 7efdc8311000]  141.156741 {3}{RequestManager}: (5, 83)
[0 - 7efdc8311000]  141.156743 {3}{RequestManager}: (1980, 84)
[0 - 7efdc8311000]  141.156744 {3}{RequestManager}: (14, 85)
[0 - 7efdc8311000]  141.156745 {3}{RequestManager}: (32, 86)
[0 - 7efdc8311000]  141.156746 {3}{RequestManager}: (5, 87)
[0 - 7efdc8311000]  141.156747 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  141.156748 {3}{RequestManager}: (2335, 80)
[0 - 7efdc8311000]  141.156749 {3}{RequestManager}: (2203, 81)
[0 - 7efdc8311000]  141.156750 {3}{RequestManager}: (32, 82)
[0 - 7efdc8311000]  141.156752 {3}{RequestManager}: (5, 83)
[0 - 7efdc8311000]  141.156753 {3}{RequestManager}: (1980, 84)
[0 - 7efdc8311000]  141.156754 {3}{RequestManager}: (14, 85)
[0 - 7efdc8311000]  141.156755 {3}{RequestManager}: (32, 86)
[0 - 7efdc8311000]  141.156756 {3}{RequestManager}: (1365, 87)
[0 - 7efdc8311000]  141.156757 {3}{RequestManager}: (144, 88)
[0 - 7efdc8311000]  141.156758 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  141.156759 {3}{RequestManager}: (79, 0)
[0 - 7efdc8311000]  141.156760 {3}{RequestManager}: (80, 1)
[0 - 7efdc8311000]  141.156762 {3}{RequestManager}: (81, 2)
[0 - 7efdc8311000]  141.156763 {3}{RequestManager}: (82, 3)
[0 - 7efdc8311000]  141.156764 {3}{RequestManager}: (83, 4)
[0 - 7efdc8311000]  141.156765 {3}{RequestManager}: (84, 5)
[0 - 7efdc8311000]  141.156766 {3}{RequestManager}: (85, 6)
[0 - 7efdc8311000]  141.156767 {3}{RequestManager}: (86, 7)
[0 - 7efdc8311000]  141.156768 {3}{RequestManager}: (87, 8)
[0 - 7efdc8311000]  141.156771 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  141.156772 {3}{RequestManager}: (2335, 80)
[0 - 7efdc8311000]  141.156773 {3}{RequestManager}: (2203, 81)
[0 - 7efdc8311000]  141.156774 {3}{RequestManager}: (32, 82)
[0 - 7efdc8311000]  141.156775 {3}{RequestManager}: (5, 83)
[0 - 7efdc8311000]  141.156776 {3}{RequestManager}: (1980, 84)
[0 - 7efdc8311000]  141.156778 {3}{RequestManager}: (14, 85)
[0 - 7efdc8311000]  141.156779 {3}{RequestManager}: (32, 86)
[0 - 7efdc8311000]  141.156780 {3}{RequestManager}: (1365, 87)
[0 - 7efdc8311000]  141.156781 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  141.156782 {3}{RequestManager}: (79, 0)
[0 - 7efdc8311000]  141.156783 {3}{RequestManager}: (80, 1)
[0 - 7efdc8311000]  141.156784 {3}{RequestManager}: (81, 2)
[0 - 7efdc8311000]  141.156785 {3}{RequestManager}: (82, 3)
[0 - 7efdc8311000]  141.156787 {3}{RequestManager}: (83, 4)
[0 - 7efdc8311000]  141.156788 {3}{RequestManager}: (84, 5)
[0 - 7efdc8311000]  141.156789 {3}{RequestManager}: (85, 6)
[0 - 7efdc8311000]  141.156790 {3}{RequestManager}: (86, 7)
[0 - 7efdc8311000]  141.156792 {3}{RequestManager}: Number of Verified Tokens = 8
[0 - 7efdc8311000]  141.156837 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy
[0 - 7efdc8311000]  141.156840 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  141.156841 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  141.156843 {3}{RequestManager}: (4, 19)
[0 - 7efdc8311000]  141.156844 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]  141.156845 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]  141.156846 {3}{RequestManager}: (45714, 22)
[0 - 7efdc8311000]  141.156848 {3}{RequestManager}: (10, 23)
[0 - 7efdc8311000]  141.156849 {3}{RequestManager}: (765, 24)
[0 - 7efdc8311000]  141.156876 {3}{RequestManager}: (5059, 25)
[0 - 7efdc8311000]  141.156877 {3}{RequestManager}: (618, 26)
[0 - 7efdc8311000]  141.156878 {3}{RequestManager}: (36, 27)
[0 - 7efdc8311000]  141.156879 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  141.156880 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]  141.156881 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]  141.156882 {3}{RequestManager}: (133, 22)
[0 - 7efdc8311000]  141.156883 {3}{RequestManager}: (10, 23)
[0 - 7efdc8311000]  141.156884 {3}{RequestManager}: (765, 24)
[0 - 7efdc8311000]  141.156886 {3}{RequestManager}: (5059, 25)
[0 - 7efdc8311000]  141.156887 {3}{RequestManager}: (618, 26)
[0 - 7efdc8311000]  141.156888 {3}{RequestManager}: (36, 27)
[0 - 7efdc8311000]  141.156889 {3}{RequestManager}: (1497, 28)
[0 - 7efdc8311000]  141.156890 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  141.156891 {3}{RequestManager}: (19, 28)
[0 - 7efdc8311000]  141.156892 {3}{RequestManager}: (20, 29)
[0 - 7efdc8311000]  141.156893 {3}{RequestManager}: (21, 30)
[0 - 7efdc8311000]  141.156894 {3}{RequestManager}: (22, 31)
[0 - 7efdc8311000]  141.156895 {3}{RequestManager}: (23, 32)
[0 - 7efdc8311000]  141.156897 {3}{RequestManager}: (24, 33)
[0 - 7efdc8311000]  141.156898 {3}{RequestManager}: (25, 34)
[0 - 7efdc8311000]  141.156915 {3}{RequestManager}: (26, 35)
[0 - 7efdc8311000]  141.156916 {3}{RequestManager}: (27, 36)
[0 - 7efdc8311000]  141.156918 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  141.156919 {3}{RequestManager}: (50118, 20)
[0 - 7efdc8311000]  141.156920 {3}{RequestManager}: (50118, 21)
[0 - 7efdc8311000]  141.156921 {3}{RequestManager}: (133, 22)
[0 - 7efdc8311000]  141.156923 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  141.156924 {3}{RequestManager}: (19, 28)
[0 - 7efdc8311000]  141.156925 {3}{RequestManager}: (20, 29)
[0 - 7efdc8311000]  141.156926 {3}{RequestManager}: (21, 30)
[0 - 7efdc8311000]  141.156927 {3}{RequestManager}: Number of Verified Tokens = 3
[0 - 7efdc8311000]  141.156937 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  143.513651 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  143.513658 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  143.513659 {3}{RequestManager}: (1365, 87)
[0 - 7efdc8311000]  143.513661 {3}{RequestManager}: (7, 88)
[0 - 7efdc8311000]  143.513662 {3}{RequestManager}: (2382, 89)
[0 - 7efdc8311000]  143.513663 {3}{RequestManager}: (8, 90)
[0 - 7efdc8311000]  143.513665 {3}{RequestManager}: (14, 91)
[0 - 7efdc8311000]  143.513666 {3}{RequestManager}: (32, 92)
[0 - 7efdc8311000]  143.513667 {3}{RequestManager}: (1522, 93)
[0 - 7efdc8311000]  143.513668 {3}{RequestManager}: (13, 94)
[0 - 7efdc8311000]  143.513669 {3}{RequestManager}: (110, 95)
[0 - 7efdc8311000]  143.513671 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  143.513672 {3}{RequestManager}: (7, 88)
[0 - 7efdc8311000]  143.513673 {3}{RequestManager}: (2382, 89)
[0 - 7efdc8311000]  143.513674 {3}{RequestManager}: (8, 90)
[0 - 7efdc8311000]  143.513675 {3}{RequestManager}: (14, 91)
[0 - 7efdc8311000]  143.513676 {3}{RequestManager}: (32, 92)
[0 - 7efdc8311000]  143.513678 {3}{RequestManager}: (1522, 93)
[0 - 7efdc8311000]  143.513679 {3}{RequestManager}: (13, 94)
[0 - 7efdc8311000]  143.513680 {3}{RequestManager}: (110, 95)
[0 - 7efdc8311000]  143.513681 {3}{RequestManager}: (2335, 96)
[0 - 7efdc8311000]  143.513682 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  143.513683 {3}{RequestManager}: (87, 0)
[0 - 7efdc8311000]  143.513685 {3}{RequestManager}: (88, 1)
[0 - 7efdc8311000]  143.513686 {3}{RequestManager}: (89, 2)
[0 - 7efdc8311000]  143.513687 {3}{RequestManager}: (90, 3)
[0 - 7efdc8311000]  143.513688 {3}{RequestManager}: (91, 4)
[0 - 7efdc8311000]  143.513689 {3}{RequestManager}: (92, 5)
[0 - 7efdc8311000]  143.513690 {3}{RequestManager}: (93, 6)
[0 - 7efdc8311000]  143.513691 {3}{RequestManager}: (94, 7)
[0 - 7efdc8311000]  143.513693 {3}{RequestManager}: (95, 8)
[0 - 7efdc8311000]  143.513696 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  143.513697 {3}{RequestManager}: (7, 88)
[0 - 7efdc8311000]  143.513698 {3}{RequestManager}: (2382, 89)
[0 - 7efdc8311000]  143.513699 {3}{RequestManager}: (8, 90)
[0 - 7efdc8311000]  143.513700 {3}{RequestManager}: (14, 91)
[0 - 7efdc8311000]  143.513701 {3}{RequestManager}: (32, 92)
[0 - 7efdc8311000]  143.513703 {3}{RequestManager}: (1522, 93)
[0 - 7efdc8311000]  143.513704 {3}{RequestManager}: (13, 94)
[0 - 7efdc8311000]  143.513705 {3}{RequestManager}: (110, 95)
[0 - 7efdc8311000]  143.513706 {3}{RequestManager}: (2335, 96)
[0 - 7efdc8311000]  143.513707 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  143.513708 {3}{RequestManager}: (87, 0)
[0 - 7efdc8311000]  143.513709 {3}{RequestManager}: (88, 1)
[0 - 7efdc8311000]  143.513711 {3}{RequestManager}: (89, 2)
[0 - 7efdc8311000]  143.513712 {3}{RequestManager}: (90, 3)
[0 - 7efdc8311000]  143.513713 {3}{RequestManager}: (91, 4)
[0 - 7efdc8311000]  143.513714 {3}{RequestManager}: (92, 5)
[0 - 7efdc8311000]  143.513716 {3}{RequestManager}: (93, 6)
[0 - 7efdc8311000]  143.513717 {3}{RequestManager}: (94, 7)
[0 - 7efdc8311000]  143.513718 {3}{RequestManager}: (95, 8)
[0 - 7efdc8311000]  143.513719 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  143.513766 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog
[0 - 7efdc8311000]  143.513768 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  143.513769 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  143.513771 {3}{RequestManager}: (133, 22)
[0 - 7efdc8311000]  143.513772 {3}{RequestManager}: (275, 23)
[0 - 7efdc8311000]  143.513773 {3}{RequestManager}: (2335, 24)
[0 - 7efdc8311000]  143.513796 {3}{RequestManager}: (9492, 25)
[0 - 7efdc8311000]  143.513798 {3}{RequestManager}: (13, 26)
[0 - 7efdc8311000]  143.513799 {3}{RequestManager}: (92, 27)
[0 - 7efdc8311000]  143.513800 {3}{RequestManager}: (2335, 28)
[0 - 7efdc8311000]  143.513801 {3}{RequestManager}: (2203, 29)
[0 - 7efdc8311000]  143.513802 {3}{RequestManager}: (50118, 30)
[0 - 7efdc8311000]  143.513803 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  143.513805 {3}{RequestManager}: (133, 23)
[0 - 7efdc8311000]  143.513806 {3}{RequestManager}: (169, 24)
[0 - 7efdc8311000]  143.513807 {3}{RequestManager}: (689, 25)
[0 - 7efdc8311000]  143.513808 {3}{RequestManager}: (13, 26)
[0 - 7efdc8311000]  143.513809 {3}{RequestManager}: (3678, 27)
[0 - 7efdc8311000]  143.513810 {3}{RequestManager}: (2335, 28)
[0 - 7efdc8311000]  143.513811 {3}{RequestManager}: (2203, 29)
[0 - 7efdc8311000]  143.513813 {3}{RequestManager}: (32, 30)
[0 - 7efdc8311000]  143.513814 {3}{RequestManager}: (50118, 31)
[0 - 7efdc8311000]  143.513815 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  143.513816 {3}{RequestManager}: (22, 9)
[0 - 7efdc8311000]  143.513817 {3}{RequestManager}: (23, 10)
[0 - 7efdc8311000]  143.513835 {3}{RequestManager}: (24, 11)
[0 - 7efdc8311000]  143.513836 {3}{RequestManager}: (25, 12)
[0 - 7efdc8311000]  143.513837 {3}{RequestManager}: (26, 13)
[0 - 7efdc8311000]  143.513838 {3}{RequestManager}: (27, 14)
[0 - 7efdc8311000]  143.513840 {3}{RequestManager}: (28, 15)
[0 - 7efdc8311000]  143.513841 {3}{RequestManager}: (29, 16)
[0 - 7efdc8311000]  143.513842 {3}{RequestManager}: (30, 17)
[0 - 7efdc8311000]  143.513844 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  143.513845 {3}{RequestManager}: (133, 23)
[0 - 7efdc8311000]  143.513846 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  143.513847 {3}{RequestManager}: (22, 9)
[0 - 7efdc8311000]  143.513849 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]  143.513857 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

TheThe
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  145.870424 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  145.870431 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  145.870433 {3}{RequestManager}: (2335, 96)
[0 - 7efdc8311000]  145.870435 {3}{RequestManager}: (4, 97)
[0 - 7efdc8311000]  145.870436 {3}{RequestManager}: (50118, 98)
[0 - 7efdc8311000]  145.870437 {3}{RequestManager}: (50118, 99)
[0 - 7efdc8311000]  145.870439 {3}{RequestManager}: (133, 100)
[0 - 7efdc8311000]  145.870440 {3}{RequestManager}: (275, 101)
[0 - 7efdc8311000]  145.870441 {3}{RequestManager}: (2335, 102)
[0 - 7efdc8311000]  145.870443 {3}{RequestManager}: (9492, 103)
[0 - 7efdc8311000]  145.870444 {3}{RequestManager}: (13, 104)
[0 - 7efdc8311000]  145.870445 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  145.870446 {3}{RequestManager}: (4, 97)
[0 - 7efdc8311000]  145.870447 {3}{RequestManager}: (50118, 98)
[0 - 7efdc8311000]  145.870449 {3}{RequestManager}: (50118, 99)
[0 - 7efdc8311000]  145.870450 {3}{RequestManager}: (133, 100)
[0 - 7efdc8311000]  145.870451 {3}{RequestManager}: (275, 101)
[0 - 7efdc8311000]  145.870452 {3}{RequestManager}: (2335, 102)
[0 - 7efdc8311000]  145.870453 {3}{RequestManager}: (9492, 103)
[0 - 7efdc8311000]  145.870455 {3}{RequestManager}: (13, 104)
[0 - 7efdc8311000]  145.870456 {3}{RequestManager}: (92, 105)
[0 - 7efdc8311000]  145.870457 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  145.870458 {3}{RequestManager}: (96, 0)
[0 - 7efdc8311000]  145.870459 {3}{RequestManager}: (97, 1)
[0 - 7efdc8311000]  145.870461 {3}{RequestManager}: (98, 2)
[0 - 7efdc8311000]  145.870462 {3}{RequestManager}: (99, 3)
[0 - 7efdc8311000]  145.870463 {3}{RequestManager}: (100, 4)
[0 - 7efdc8311000]  145.870464 {3}{RequestManager}: (101, 5)
[0 - 7efdc8311000]  145.870465 {3}{RequestManager}: (102, 6)
[0 - 7efdc8311000]  145.870466 {3}{RequestManager}: (103, 7)
[0 - 7efdc8311000]  145.870468 {3}{RequestManager}: (104, 8)
[0 - 7efdc8311000]  145.870471 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  145.870472 {3}{RequestManager}: (4, 97)
[0 - 7efdc8311000]  145.870473 {3}{RequestManager}: (50118, 98)
[0 - 7efdc8311000]  145.870474 {3}{RequestManager}: (50118, 99)
[0 - 7efdc8311000]  145.870475 {3}{RequestManager}: (133, 100)
[0 - 7efdc8311000]  145.870477 {3}{RequestManager}: (275, 101)
[0 - 7efdc8311000]  145.870478 {3}{RequestManager}: (2335, 102)
[0 - 7efdc8311000]  145.870479 {3}{RequestManager}: (9492, 103)
[0 - 7efdc8311000]  145.870480 {3}{RequestManager}: (13, 104)
[0 - 7efdc8311000]  145.870481 {3}{RequestManager}: (92, 105)
[0 - 7efdc8311000]  145.870483 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  145.870484 {3}{RequestManager}: (96, 0)
[0 - 7efdc8311000]  145.870485 {3}{RequestManager}: (97, 1)
[0 - 7efdc8311000]  145.870486 {3}{RequestManager}: (98, 2)
[0 - 7efdc8311000]  145.870488 {3}{RequestManager}: (99, 3)
[0 - 7efdc8311000]  145.870489 {3}{RequestManager}: (100, 4)
[0 - 7efdc8311000]  145.870490 {3}{RequestManager}: (101, 5)
[0 - 7efdc8311000]  145.870491 {3}{RequestManager}: (102, 6)
[0 - 7efdc8311000]  145.870493 {3}{RequestManager}: (103, 7)
[0 - 7efdc8311000]  145.870494 {3}{RequestManager}: (104, 8)
[0 - 7efdc8311000]  145.870495 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  145.870549 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new
[0 - 7efdc8311000]  145.870551 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  145.870553 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  145.870554 {3}{RequestManager}: (133, 23)
[0 - 7efdc8311000]  145.870555 {3}{RequestManager}: (2700, 24)
[0 - 7efdc8311000]  145.870582 {3}{RequestManager}: (8563, 25)
[0 - 7efdc8311000]  145.870584 {3}{RequestManager}: (18960, 26)
[0 - 7efdc8311000]  145.870585 {3}{RequestManager}: (13, 27)
[0 - 7efdc8311000]  145.870586 {3}{RequestManager}: (188, 28)
[0 - 7efdc8311000]  145.870587 {3}{RequestManager}: (8563, 29)
[0 - 7efdc8311000]  145.870588 {3}{RequestManager}: (17389, 30)
[0 - 7efdc8311000]  145.870590 {3}{RequestManager}: (50118, 31)
[0 - 7efdc8311000]  145.870591 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  145.870592 {3}{RequestManager}: (133, 24)
[0 - 7efdc8311000]  145.870593 {3}{RequestManager}: (8563, 25)
[0 - 7efdc8311000]  145.870594 {3}{RequestManager}: (3652, 26)
[0 - 7efdc8311000]  145.870595 {3}{RequestManager}: (13, 27)
[0 - 7efdc8311000]  145.870597 {3}{RequestManager}: (18619, 28)
[0 - 7efdc8311000]  145.870598 {3}{RequestManager}: (36936, 29)
[0 - 7efdc8311000]  145.870599 {3}{RequestManager}: (17389, 30)
[0 - 7efdc8311000]  145.870600 {3}{RequestManager}: (50118, 31)
[0 - 7efdc8311000]  145.870601 {3}{RequestManager}: (50118, 32)
[0 - 7efdc8311000]  145.870602 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  145.870603 {3}{RequestManager}: (23, 9)
[0 - 7efdc8311000]  145.870605 {3}{RequestManager}: (24, 10)
[0 - 7efdc8311000]  145.870606 {3}{RequestManager}: (25, 11)
[0 - 7efdc8311000]  145.870607 {3}{RequestManager}: (26, 12)
[0 - 7efdc8311000]  145.870608 {3}{RequestManager}: (27, 13)
[0 - 7efdc8311000]  145.870609 {3}{RequestManager}: (28, 14)
[0 - 7efdc8311000]  145.870610 {3}{RequestManager}: (29, 15)
[0 - 7efdc8311000]  145.870611 {3}{RequestManager}: (30, 16)
[0 - 7efdc8311000]  145.870613 {3}{RequestManager}: (31, 17)
[0 - 7efdc8311000]  145.870614 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  145.870615 {3}{RequestManager}: (133, 24)
[0 - 7efdc8311000]  145.870616 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  145.870618 {3}{RequestManager}: (23, 9)
[0 - 7efdc8311000]  145.870619 {3}{RequestManager}: Number of Verified Tokens = 1
[0 - 7efdc8311000]  145.870629 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

TheTheThe
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  148.228314 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  148.228321 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  148.228323 {3}{RequestManager}: (92, 105)
[0 - 7efdc8311000]  148.228324 {3}{RequestManager}: (2335, 106)
[0 - 7efdc8311000]  148.228326 {3}{RequestManager}: (2203, 107)
[0 - 7efdc8311000]  148.228327 {3}{RequestManager}: (32, 108)
[0 - 7efdc8311000]  148.228328 {3}{RequestManager}: (5, 109)
[0 - 7efdc8311000]  148.228329 {3}{RequestManager}: (1980, 110)
[0 - 7efdc8311000]  148.228330 {3}{RequestManager}: (14, 111)
[0 - 7efdc8311000]  148.228331 {3}{RequestManager}: (32, 112)
[0 - 7efdc8311000]  148.228333 {3}{RequestManager}: (5, 113)
[0 - 7efdc8311000]  148.228334 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  148.228335 {3}{RequestManager}: (2335, 106)
[0 - 7efdc8311000]  148.228336 {3}{RequestManager}: (2203, 107)
[0 - 7efdc8311000]  148.228337 {3}{RequestManager}: (32, 108)
[0 - 7efdc8311000]  148.228338 {3}{RequestManager}: (5, 109)
[0 - 7efdc8311000]  148.228339 {3}{RequestManager}: (1980, 110)
[0 - 7efdc8311000]  148.228340 {3}{RequestManager}: (14, 111)
[0 - 7efdc8311000]  148.228342 {3}{RequestManager}: (32, 112)
[0 - 7efdc8311000]  148.228343 {3}{RequestManager}: (1365, 113)
[0 - 7efdc8311000]  148.228344 {3}{RequestManager}: (144, 114)
[0 - 7efdc8311000]  148.228345 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  148.228346 {3}{RequestManager}: (105, 0)
[0 - 7efdc8311000]  148.228347 {3}{RequestManager}: (106, 1)
[0 - 7efdc8311000]  148.228348 {3}{RequestManager}: (107, 2)
[0 - 7efdc8311000]  148.228350 {3}{RequestManager}: (108, 3)
[0 - 7efdc8311000]  148.228351 {3}{RequestManager}: (109, 4)
[0 - 7efdc8311000]  148.228352 {3}{RequestManager}: (110, 5)
[0 - 7efdc8311000]  148.228353 {3}{RequestManager}: (111, 6)
[0 - 7efdc8311000]  148.228354 {3}{RequestManager}: (112, 7)
[0 - 7efdc8311000]  148.228355 {3}{RequestManager}: (113, 8)
[0 - 7efdc8311000]  148.228358 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  148.228359 {3}{RequestManager}: (2335, 106)
[0 - 7efdc8311000]  148.228360 {3}{RequestManager}: (2203, 107)
[0 - 7efdc8311000]  148.228361 {3}{RequestManager}: (32, 108)
[0 - 7efdc8311000]  148.228362 {3}{RequestManager}: (5, 109)
[0 - 7efdc8311000]  148.228363 {3}{RequestManager}: (1980, 110)
[0 - 7efdc8311000]  148.228364 {3}{RequestManager}: (14, 111)
[0 - 7efdc8311000]  148.228366 {3}{RequestManager}: (32, 112)
[0 - 7efdc8311000]  148.228367 {3}{RequestManager}: (1365, 113)
[0 - 7efdc8311000]  148.228368 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  148.228369 {3}{RequestManager}: (105, 0)
[0 - 7efdc8311000]  148.228370 {3}{RequestManager}: (106, 1)
[0 - 7efdc8311000]  148.228371 {3}{RequestManager}: (107, 2)
[0 - 7efdc8311000]  148.228373 {3}{RequestManager}: (108, 3)
[0 - 7efdc8311000]  148.228374 {3}{RequestManager}: (109, 4)
[0 - 7efdc8311000]  148.228375 {3}{RequestManager}: (110, 5)
[0 - 7efdc8311000]  148.228377 {3}{RequestManager}: (111, 6)
[0 - 7efdc8311000]  148.228378 {3}{RequestManager}: (112, 7)
[0 - 7efdc8311000]  148.228379 {3}{RequestManager}: Number of Verified Tokens = 8
[0 - 7efdc8311000]  148.228430 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy
[0 - 7efdc8311000]  148.228432 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  148.228433 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  148.228435 {3}{RequestManager}: (133, 24)
[0 - 7efdc8311000]  148.228436 {3}{RequestManager}: (133, 25)
[0 - 7efdc8311000]  148.228437 {3}{RequestManager}: (133, 26)
[0 - 7efdc8311000]  148.228462 {3}{RequestManager}: (133, 27)
[0 - 7efdc8311000]  148.228463 {3}{RequestManager}: (133, 28)
[0 - 7efdc8311000]  148.228465 {3}{RequestManager}: (133, 29)
[0 - 7efdc8311000]  148.228466 {3}{RequestManager}: (133, 30)
[0 - 7efdc8311000]  148.228467 {3}{RequestManager}: (133, 31)
[0 - 7efdc8311000]  148.228468 {3}{RequestManager}: (133, 32)
[0 - 7efdc8311000]  148.228469 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  148.228470 {3}{RequestManager}: (133, 25)
[0 - 7efdc8311000]  148.228471 {3}{RequestManager}: (133, 26)
[0 - 7efdc8311000]  148.228473 {3}{RequestManager}: (133, 27)
[0 - 7efdc8311000]  148.228474 {3}{RequestManager}: (133, 28)
[0 - 7efdc8311000]  148.228475 {3}{RequestManager}: (133, 29)
[0 - 7efdc8311000]  148.228476 {3}{RequestManager}: (133, 30)
[0 - 7efdc8311000]  148.228477 {3}{RequestManager}: (133, 31)
[0 - 7efdc8311000]  148.228478 {3}{RequestManager}: (133, 32)
[0 - 7efdc8311000]  148.228479 {3}{RequestManager}: (133, 33)
[0 - 7efdc8311000]  148.228481 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  148.228482 {3}{RequestManager}: (24, 9)
[0 - 7efdc8311000]  148.228483 {3}{RequestManager}: (25, 10)
[0 - 7efdc8311000]  148.228501 {3}{RequestManager}: (26, 11)
[0 - 7efdc8311000]  148.228502 {3}{RequestManager}: (27, 12)
[0 - 7efdc8311000]  148.228503 {3}{RequestManager}: (28, 13)
[0 - 7efdc8311000]  148.228504 {3}{RequestManager}: (29, 14)
[0 - 7efdc8311000]  148.228505 {3}{RequestManager}: (30, 15)
[0 - 7efdc8311000]  148.228506 {3}{RequestManager}: (31, 16)
[0 - 7efdc8311000]  148.228508 {3}{RequestManager}: (32, 17)
[0 - 7efdc8311000]  148.228510 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  148.228511 {3}{RequestManager}: (133, 25)
[0 - 7efdc8311000]  148.228512 {3}{RequestManager}: (133, 26)
[0 - 7efdc8311000]  148.228514 {3}{RequestManager}: (133, 27)
[0 - 7efdc8311000]  148.228515 {3}{RequestManager}: (133, 28)
[0 - 7efdc8311000]  148.228516 {3}{RequestManager}: (133, 29)
[0 - 7efdc8311000]  148.228517 {3}{RequestManager}: (133, 30)
[0 - 7efdc8311000]  148.228518 {3}{RequestManager}: (133, 31)
[0 - 7efdc8311000]  148.228520 {3}{RequestManager}: (133, 32)
[0 - 7efdc8311000]  148.228521 {3}{RequestManager}: (133, 33)
[0 - 7efdc8311000]  148.228522 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  148.228523 {3}{RequestManager}: (24, 9)
[0 - 7efdc8311000]  148.228525 {3}{RequestManager}: (25, 10)
[0 - 7efdc8311000]  148.228526 {3}{RequestManager}: (26, 11)
[0 - 7efdc8311000]  148.228527 {3}{RequestManager}: (27, 12)
[0 - 7efdc8311000]  148.228528 {3}{RequestManager}: (28, 13)
[0 - 7efdc8311000]  148.228529 {3}{RequestManager}: (29, 14)
[0 - 7efdc8311000]  148.228531 {3}{RequestManager}: (30, 15)
[0 - 7efdc8311000]  148.228532 {3}{RequestManager}: (31, 16)
[0 - 7efdc8311000]  148.228533 {3}{RequestManager}: (32, 17)
[0 - 7efdc8311000]  148.228534 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  148.228545 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

TheTheTheTheTheTheTheTheTheTheTheThe
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  150.586230 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  150.586237 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  150.586239 {3}{RequestManager}: (1365, 113)
[0 - 7efdc8311000]  150.586240 {3}{RequestManager}: (7, 114)
[0 - 7efdc8311000]  150.586241 {3}{RequestManager}: (2382, 115)
[0 - 7efdc8311000]  150.586243 {3}{RequestManager}: (8, 116)
[0 - 7efdc8311000]  150.586244 {3}{RequestManager}: (14, 117)
[0 - 7efdc8311000]  150.586246 {3}{RequestManager}: (32, 118)
[0 - 7efdc8311000]  150.586247 {3}{RequestManager}: (1522, 119)
[0 - 7efdc8311000]  150.586248 {3}{RequestManager}: (13, 120)
[0 - 7efdc8311000]  150.586249 {3}{RequestManager}: (110, 121)
[0 - 7efdc8311000]  150.586251 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  150.586252 {3}{RequestManager}: (7, 114)
[0 - 7efdc8311000]  150.586253 {3}{RequestManager}: (2382, 115)
[0 - 7efdc8311000]  150.586254 {3}{RequestManager}: (8, 116)
[0 - 7efdc8311000]  150.586256 {3}{RequestManager}: (14, 117)
[0 - 7efdc8311000]  150.586257 {3}{RequestManager}: (32, 118)
[0 - 7efdc8311000]  150.586258 {3}{RequestManager}: (1522, 119)
[0 - 7efdc8311000]  150.586259 {3}{RequestManager}: (13, 120)
[0 - 7efdc8311000]  150.586261 {3}{RequestManager}: (110, 121)
[0 - 7efdc8311000]  150.586262 {3}{RequestManager}: (2335, 122)
[0 - 7efdc8311000]  150.586263 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  150.586264 {3}{RequestManager}: (113, 0)
[0 - 7efdc8311000]  150.586265 {3}{RequestManager}: (114, 1)
[0 - 7efdc8311000]  150.586267 {3}{RequestManager}: (115, 2)
[0 - 7efdc8311000]  150.586268 {3}{RequestManager}: (116, 3)
[0 - 7efdc8311000]  150.586269 {3}{RequestManager}: (117, 4)
[0 - 7efdc8311000]  150.586270 {3}{RequestManager}: (118, 5)
[0 - 7efdc8311000]  150.586272 {3}{RequestManager}: (119, 6)
[0 - 7efdc8311000]  150.586273 {3}{RequestManager}: (120, 7)
[0 - 7efdc8311000]  150.586274 {3}{RequestManager}: (121, 8)
[0 - 7efdc8311000]  150.586277 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  150.586279 {3}{RequestManager}: (7, 114)
[0 - 7efdc8311000]  150.586280 {3}{RequestManager}: (2382, 115)
[0 - 7efdc8311000]  150.586281 {3}{RequestManager}: (8, 116)
[0 - 7efdc8311000]  150.586282 {3}{RequestManager}: (14, 117)
[0 - 7efdc8311000]  150.586284 {3}{RequestManager}: (32, 118)
[0 - 7efdc8311000]  150.586285 {3}{RequestManager}: (1522, 119)
[0 - 7efdc8311000]  150.586286 {3}{RequestManager}: (13, 120)
[0 - 7efdc8311000]  150.586287 {3}{RequestManager}: (110, 121)
[0 - 7efdc8311000]  150.586289 {3}{RequestManager}: (2335, 122)
[0 - 7efdc8311000]  150.586290 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  150.586291 {3}{RequestManager}: (113, 0)
[0 - 7efdc8311000]  150.586292 {3}{RequestManager}: (114, 1)
[0 - 7efdc8311000]  150.586294 {3}{RequestManager}: (115, 2)
[0 - 7efdc8311000]  150.586295 {3}{RequestManager}: (116, 3)
[0 - 7efdc8311000]  150.586296 {3}{RequestManager}: (117, 4)
[0 - 7efdc8311000]  150.586298 {3}{RequestManager}: (118, 5)
[0 - 7efdc8311000]  150.586299 {3}{RequestManager}: (119, 6)
[0 - 7efdc8311000]  150.586300 {3}{RequestManager}: (120, 7)
[0 - 7efdc8311000]  150.586302 {3}{RequestManager}: (121, 8)
[0 - 7efdc8311000]  150.586303 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  150.586363 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog
[0 - 7efdc8311000]  150.586365 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  150.586367 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  150.586368 {3}{RequestManager}: (133, 33)
[0 - 7efdc8311000]  150.586394 {3}{RequestManager}: (133, 34)
[0 - 7efdc8311000]  150.586395 {3}{RequestManager}: (133, 35)
[0 - 7efdc8311000]  150.586397 {3}{RequestManager}: (133, 36)
[0 - 7efdc8311000]  150.586398 {3}{RequestManager}: (133, 37)
[0 - 7efdc8311000]  150.586399 {3}{RequestManager}: (133, 38)
[0 - 7efdc8311000]  150.586400 {3}{RequestManager}: (133, 39)
[0 - 7efdc8311000]  150.586401 {3}{RequestManager}: (133, 40)
[0 - 7efdc8311000]  150.586403 {3}{RequestManager}: (133, 41)
[0 - 7efdc8311000]  150.586404 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  150.586405 {3}{RequestManager}: (133, 34)
[0 - 7efdc8311000]  150.586406 {3}{RequestManager}: (133, 35)
[0 - 7efdc8311000]  150.586407 {3}{RequestManager}: (133, 36)
[0 - 7efdc8311000]  150.586408 {3}{RequestManager}: (133, 37)
[0 - 7efdc8311000]  150.586409 {3}{RequestManager}: (133, 38)
[0 - 7efdc8311000]  150.586411 {3}{RequestManager}: (133, 39)
[0 - 7efdc8311000]  150.586412 {3}{RequestManager}: (133, 40)
[0 - 7efdc8311000]  150.586413 {3}{RequestManager}: (133, 41)
[0 - 7efdc8311000]  150.586414 {3}{RequestManager}: (133, 42)
[0 - 7efdc8311000]  150.586415 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  150.586417 {3}{RequestManager}: (33, 9)
[0 - 7efdc8311000]  150.586418 {3}{RequestManager}: (34, 10)
[0 - 7efdc8311000]  150.586419 {3}{RequestManager}: (35, 11)
[0 - 7efdc8311000]  150.586420 {3}{RequestManager}: (36, 12)
[0 - 7efdc8311000]  150.586422 {3}{RequestManager}: (37, 13)
[0 - 7efdc8311000]  150.586423 {3}{RequestManager}: (38, 14)
[0 - 7efdc8311000]  150.586424 {3}{RequestManager}: (39, 15)
[0 - 7efdc8311000]  150.586425 {3}{RequestManager}: (40, 16)
[0 - 7efdc8311000]  150.586426 {3}{RequestManager}: (41, 17)
[0 - 7efdc8311000]  150.586428 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  150.586430 {3}{RequestManager}: (133, 34)
[0 - 7efdc8311000]  150.586431 {3}{RequestManager}: (133, 35)
[0 - 7efdc8311000]  150.586432 {3}{RequestManager}: (133, 36)
[0 - 7efdc8311000]  150.586433 {3}{RequestManager}: (133, 37)
[0 - 7efdc8311000]  150.586443 {3}{RequestManager}: (133, 38)
[0 - 7efdc8311000]  150.586445 {3}{RequestManager}: (133, 39)
[0 - 7efdc8311000]  150.586447 {3}{RequestManager}: (133, 40)
[0 - 7efdc8311000]  150.586448 {3}{RequestManager}: (133, 41)
[0 - 7efdc8311000]  150.586449 {3}{RequestManager}: (133, 42)
[0 - 7efdc8311000]  150.586450 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  150.586451 {3}{RequestManager}: (33, 9)
[0 - 7efdc8311000]  150.586453 {3}{RequestManager}: (34, 10)
[0 - 7efdc8311000]  150.586454 {3}{RequestManager}: (35, 11)
[0 - 7efdc8311000]  150.586455 {3}{RequestManager}: (36, 12)
[0 - 7efdc8311000]  150.586456 {3}{RequestManager}: (37, 13)
[0 - 7efdc8311000]  150.586457 {3}{RequestManager}: (38, 14)
[0 - 7efdc8311000]  150.586459 {3}{RequestManager}: (39, 15)
[0 - 7efdc8311000]  150.586460 {3}{RequestManager}: (40, 16)
[0 - 7efdc8311000]  150.586461 {3}{RequestManager}: (41, 17)
[0 - 7efdc8311000]  150.586462 {3}{RequestManager}: Number of Verified Tokens = 9
[0 - 7efdc8311000]  150.586478 {3}{RequestManager}: Output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

TheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheTheThe
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
update metadata
[0 - 7efdc8311000]  150.677555 {3}{RequestManager}: [Done] guid(1000003) with spec_tree_depth(5)
update metadata
update metadata
update metadata
request.beam_trees.size(): 1


new_bc.num_tokens: 9
request.beam_trees.size(): 1


new_bc.num_tokens: 18
[0 - 7efdc8311000]  169.411009 {3}{RequestManager}: Input size (9) Output size (9)
[0 - 7efdc8311000]  169.411017 {3}{RequestManager}: ========Input============
[0 - 7efdc8311000]  169.411019 {3}{RequestManager}: (2335, 122)
[0 - 7efdc8311000]  169.411021 {3}{RequestManager}: (4, 123)
[0 - 7efdc8311000]  169.411022 {3}{RequestManager}: (50118, 124)
[0 - 7efdc8311000]  169.411024 {3}{RequestManager}: (50118, 125)
[0 - 7efdc8311000]  169.411025 {3}{RequestManager}: (133, 126)
[0 - 7efdc8311000]  169.411026 {3}{RequestManager}: (275, 127)
[0 - 7efdc8311000]  169.411027 {3}{RequestManager}: (2335, 128)
[0 - 7efdc8311000]  169.411029 {3}{RequestManager}: (9492, 129)
[0 - 7efdc8311000]  169.411030 {3}{RequestManager}: (110, 130)
[0 - 7efdc8311000]  169.411031 {3}{RequestManager}: ========Output============
[0 - 7efdc8311000]  169.411032 {3}{RequestManager}: (4, 123)
[0 - 7efdc8311000]  169.411033 {3}{RequestManager}: (50118, 124)
[0 - 7efdc8311000]  169.411034 {3}{RequestManager}: (50118, 125)
[0 - 7efdc8311000]  169.411036 {3}{RequestManager}: (133, 126)
[0 - 7efdc8311000]  169.411037 {3}{RequestManager}: (275, 127)
[0 - 7efdc8311000]  169.411038 {3}{RequestManager}: (2335, 128)
[0 - 7efdc8311000]  169.411039 {3}{RequestManager}: (9492, 129)
[0 - 7efdc8311000]  169.411040 {3}{RequestManager}: (13, 130)
[0 - 7efdc8311000]  169.411041 {3}{RequestManager}: (2335, 131)
[0 - 7efdc8311000]  169.411043 {3}{RequestManager}: ========Committed============
[0 - 7efdc8311000]  169.411044 {3}{RequestManager}: (122, 0)
[0 - 7efdc8311000]  169.411045 {3}{RequestManager}: (123, 1)
[0 - 7efdc8311000]  169.411046 {3}{RequestManager}: (124, 2)
[0 - 7efdc8311000]  169.411047 {3}{RequestManager}: (125, 3)
[0 - 7efdc8311000]  169.411048 {3}{RequestManager}: (126, 4)
[0 - 7efdc8311000]  169.411050 {3}{RequestManager}: (127, 5)
[0 - 7efdc8311000]  169.411051 {3}{RequestManager}: (128, 6)
[0 - 7efdc8311000]  169.411052 {3}{RequestManager}: (129, 7)
[0 - 7efdc8311000]  169.411053 {3}{RequestManager}: (130, 8)
[0 - 7efdc8311000]  169.411056 {3}{RequestManager}: ========Verified============
[0 - 7efdc8311000]  169.411057 {3}{RequestManager}: (4, 123)
[0 - 7efdc8311000]  169.411059 {3}{RequestManager}: (50118, 124)
[0 - 7efdc8311000]  169.411060 {3}{RequestManager}: (50118, 125)
[0 - 7efdc8311000]  169.411061 {3}{RequestManager}: (133, 126)
[0 - 7efdc8311000]  169.411062 {3}{RequestManager}: (275, 127)
[0 - 7efdc8311000]  169.411063 {3}{RequestManager}: (2335, 128)
[0 - 7efdc8311000]  169.411064 {3}{RequestManager}: (9492, 129)
[0 - 7efdc8311000]  169.411065 {3}{RequestManager}: (13, 130)
[0 - 7efdc8311000]  169.411067 {3}{RequestManager}: ========New Committed============
[0 - 7efdc8311000]  169.411068 {3}{RequestManager}: (122, 0)
[0 - 7efdc8311000]  169.411069 {3}{RequestManager}: (123, 1)
[0 - 7efdc8311000]  169.411070 {3}{RequestManager}: (124, 2)
[0 - 7efdc8311000]  169.411072 {3}{RequestManager}: (125, 3)
[0 - 7efdc8311000]  169.411084 {3}{RequestManager}: (126, 4)
[0 - 7efdc8311000]  169.411085 {3}{RequestManager}: (127, 5)
[0 - 7efdc8311000]  169.411086 {3}{RequestManager}: (128, 6)
[0 - 7efdc8311000]  169.411087 {3}{RequestManager}: (129, 7)
[0 - 7efdc8311000]  169.411089 {3}{RequestManager}: Number of Verified Tokens = 8
[0 - 7efdc8311000]  169.411090 {3}{RequestManager}: [Done] guid(1000003) with final length(128)
[0 - 7efdc8311000]  169.411149 {3}{RequestManager}: Final output: </s>Write a short blog post (500 words) about the best dog toys for new dog owners.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best dog toys for new dog owners are the ones that are easy to clean and that are safe for your dog.

The best
[0 - 7efdc8311000]  169.411154 {3}{RequestManager}: [Profile] guid(1000003) decoding_steps(23) start(98712189.0) finish(169411150.0) latency(70698961.0) acc_lterminate called after throwing an instance of 'std::out_of_range'
  what():  vector::_M_range_check: __n (which is 0) >= this->size() (which is 1)
